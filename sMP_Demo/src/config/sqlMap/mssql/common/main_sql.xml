<?xml version="1.0" encoding="euc-kr" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
		"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 

<mapper namespace="common.main">
	<select id="managementSalesList" resultType="java.util.HashMap">
		/** common.main.managementSalesList **/
			SELECT
				CASE
				    WHEN FLAG='ORD'
				    THEN '당월주문금액'
				    WHEN FLAG='RECEIVE'
				    THEN '당월인수금액'
				    WHEN FLAG='SALE'
				    THEN '년간누적매출'
				    WHEN FLAG='PROFIT'
				    THEN '년간누적매출이익'
				    WHEN FLAG='RATE'
				    THEN '년간누적이익율'
				  END AS FLAG ,
				  CASE
				  WHEN FLAG = 'RATE' THEN
				    CONVERT(VARCHAR,CONTENT)+' %'
				  ELSE
				    CONVERT(VARCHAR,CONTENT)
				  END CONTENT FROM
		(
				SELECT	CONVERT(VARCHAR,CONVERT(NUMERIC,(ROUND(AA.ORD, -6))/1000000)) AS ORD
				,		CONVERT(VARCHAR,CONVERT(NUMERIC,(ROUND(AA.RECEIVE, -6))/1000000)) AS RECEIVE
				,		CONVERT(VARCHAR,CONVERT(NUMERIC,(ROUND(AA.SALE, -6))/1000000)) AS SALE
				,		CONVERT(VARCHAR,CONVERT(NUMERIC,(ROUND((AA.SALE-AA.BUY), -6))/1000000)) AS PROFIT
				,		CONVERT(VARCHAR,CONVERT(NUMERIC(18,1),(ROUND((CASE WHEN AA.SALE=0 THEN 0 ELSE (AA.SALE-AA.BUY)*100/AA.SALE END),1))))  AS RATE
				FROM
				(
						SELECT	(		
										SELECT	SUM(
														(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan
																WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan
																WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan
																ELSE B.orde_requ_quan
														END) *
														(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris
																WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric
																ELSE B.orde_requ_pric
														END)
												)
										FROM	mrordm A WITH(NOLOCK) 
										INNER JOIN mrordt B WITH(NOLOCK) 
											ON	A.orde_iden_numb = B.orde_iden_numb 
										LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
											ON	B.orde_iden_numb = C.orde_iden_numb 
											AND B.orde_sequ_numb = C.orde_sequ_numb 
										LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
											ON	C.orde_iden_numb = D.orde_iden_numb 
											AND C.orde_sequ_numb = D.orde_sequ_numb 
											AND C.purc_iden_numb = D.purc_iden_numb
										LEFT OUTER JOIN mrordtlist E WITH(NOLOCK)
											ON  D.orde_iden_numb = E.orde_iden_numb
											AND D.orde_sequ_numb = E.orde_sequ_numb
											AND D.purc_iden_numb = E.purc_iden_numb
											AND D.deli_iden_numb = E.deli_iden_numb
										WHERE 1 = 1 
										AND		(
													CASE 
														WHEN D.orde_iden_numb IS NOT NULL 
															THEN D.deli_stat_flag 
														WHEN C.orde_iden_numb IS NOT NULL 
															THEN C.purc_stat_flag 
														ELSE B.orde_stat_flag END
												) IN ('05', '10', '40', '50', '60', '69', '70', '80') 
										AND		A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01'))
								) AS ORD
						,		(
										SELECT	ISNULL(SUM(A.SALE_PROD_AMOU),0)
										FROM	MRORDTLIST A WITH(NOLOCK) 
										WHERE	A.RECE_REGI_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01'))
								) AS RECEIVE
						,		(
										SELECT	ISNULL(SUM(SALE_REQU_AMOU),0)
										FROM	MSSALM WITH(NOLOCK)                 
										WHERE	sap_jour_numb IS NOT NULL
										AND		CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120) + '0101') AND CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120) + '1231 23:59')
								) AS SALE
						,		(
										SELECT	ISNULL(SUM(BUYI_REQU_AMOU),0)
										FROM	MSBUYM WITH(NOLOCK)                 
										WHERE	sap_jour_numb IS NOT NULL                      
										AND		CLOS_BUYI_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120) + '0101') AND CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120) + '1231 23:59')
								) AS BUY
				) AA
		) AAA
		UNPIVOT(
				CONTENT FOR FLAG IN(
					ORD
				,	RECEIVE
				,	SALE
				,	PROFIT
				,	RATE
				)
		)AS UNPVT
	</select>
	
	<select id="managementBorgList" resultType="java.util.HashMap">
		/** common.main.managementBorgList**/
		SELECT	CASE	WHEN FLAG = 'BRANCHCNT' THEN '구매사'
						WHEN FLAG = 'VENDORCNT' THEN '공급사'
						WHEN FLAG = 'REQBRANCHCNT' THEN '구매사등록요청'
						WHEN FLAG = 'REQVENDORCNT' THEN '공급사등록요청'
				END FLAG
		,		CONVERT(VARCHAR, CONTENT)+' 개사' AS CONTENT 
		FROM(
			SELECT	SUM(A.BRANCHCNT) AS BRANCHCNT
			,		SUM(A.VENDORCNT) AS VENDORCNT
			,		SUM(A.REQBRANCHCNT) AS REQBRANCHCNT
			,		SUM(REQVENDORCNT) AS REQVENDORCNT
			FROM(	
				SELECT	COUNT(
								CASE	WHEN SVCTYPECD = 'BUY' AND BORGTYPECD = 'CLT' THEN BORGID
								END
						) BRANCHCNT
				,		COUNT(
								CASE	WHEN SVCTYPECD = 'VEN' THEN BORGID
								END
						) VENDORCNT
				,		0 AS REQBRANCHCNT
				,		0 AS REQVENDORCNT
				FROM SMPBORGS WITH(NOLOCK)  
				WHERE	ISUSE = 1
				UNION ALL
				SELECT	0 AS BRANCHCNT
				,		0 AS VENDORCNT
				,		COUNT(BRANCHID) AS REQBRANCHCNT
				,		0 AS REQVENDORCNT
				FROM REQSMPBRANCHS WITH(NOLOCK) 
				WHERE REGISTERCD != 40
				UNION ALL
				SELECT	0 AS BRANCHCNT
				,		0 AS VENDORCNT
				,		0 AS REQBRANCHCNT
				,		COUNT(VENDORID) AS REQVENDORCNT
				FROM REQSMPVENDORS WITH(NOLOCK) 
				WHERE REGISTERCD != 40
			)A
		)AA
		UNPIVOT(
			CONTENT FOR FLAG IN
				(BRANCHCNT, VENDORCNT, REQBRANCHCNT, REQVENDORCNT)
		) AS UNPVT
	</select>
	
	
	<select id="managementAdjustList" resultType="java.util.HashMap">
		/** common.main..managementProductList **/
		SELECT	MAX(AAAA.ADJUST_RANK) AS ADJUST_RANK
		,		CASE	WHEN AAAA.ADJUST_FLAG = 'BALANCE_AMOU' THEN '총 채권 잔액'
						WHEN AAAA.ADJUST_FLAG = 'ISLMIT_CNT' THEN '주문제한'
						WHEN AAAA.ADJUST_FLAG = 'AVG_DAY' THEN '평균 회수 기일'
						WHEN AAAA.ADJUST_FLAG = 'TO_DAY_AMOU' THEN '당일 입금액'
						WHEN AAAA.ADJUST_FLAG = 'MONTH_DAY_AMOU' THEN '당월 입금액'
						WHEN AAAA.ADJUST_FLAG = 'YEAR_DAY_AMOU' THEN '금년 입금액'
						WHEN AAAA.ADJUST_FLAG = 'BUYI_TOTA_AMOU' THEN '총 채무 잔액'
						WHEN AAAA.ADJUST_FLAG = 'ETC_EXPIRATION_DATE_AMOU' THEN '당월 외담대 만기도래금액'
				END ADJUST_FLAG
		,		CASE	WHEN AAAA.ADJUST_FLAG = 'ISLMIT_CNT' OR AAAA.ADJUST_FLAG = 'BALANCE_AMOU' OR AAAA.ADJUST_FLAG = 'BUYI_TOTA_AMOU' THEN CONVERT(VARCHAR,SUM(AAAA.ADJUST_CONTENT))+' 개사'
						WHEN AAAA.ADJUST_FLAG = 'AVG_DAY' THEN CONVERT(VARCHAR,SUM(AAAA.ADJUST_CONTENT))+' 일'
						ELSE CONVERT(VARCHAR,SUM(AAAA.ADJUST_CONTENT))+' 건'
				END ADJUST_CONTENT
		,		CASE	WHEN AAAA.ADJUST_FLAG = 'ISLMIT_CNT' OR AAAA.ADJUST_FLAG = 'AVG_DAY' THEN ''
						ELSE ISNULL(CONVERT(VARCHAR,SUM(AAAA.ADJUST_AMOU)),0)
				END ADJUST_AMOU
		,		ADJUST_FLAG AS ADJUST_FLAG2
		FROM(			
			SELECT	CASE	WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU_CNT' THEN 1
							WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU' THEN 2
							WHEN AAA.ADJUST_FLAG = 'ISLMIT_CNT' THEN 3
							WHEN AAA.ADJUST_FLAG = 'AVG_DAY' THEN 4
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_CNT' THEN 5
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_AMOU' THEN 6
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_CNT' THEN 7
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_AMOU' THEN 8
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_CNT' THEN 9
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_AMOU' THEN 10
							WHEN AAA.ADJUST_FLAG = 'ETC_EXPIRATION_DATE_AMOU' THEN 11
					END ADJUST_RANK
			,		CASE	WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU_CNT' THEN 'BALANCE_AMOU'
							WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU' THEN 'BALANCE_AMOU'
							WHEN AAA.ADJUST_FLAG = 'ISLMIT_CNT' THEN 'ISLMIT_CNT'
							WHEN AAA.ADJUST_FLAG = 'AVG_DAY' THEN 'AVG_DAY'
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_CNT' THEN 'MONTH_DAY_AMOU'
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_AMOU' THEN 'MONTH_DAY_AMOU'
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_CNT' THEN 'YEAR_DAY_AMOU'
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_AMOU' THEN 'YEAR_DAY_AMOU'
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_CNT' THEN 'BUYI_TOTA_AMOU'
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_AMOU' THEN 'BUYI_TOTA_AMOU'
							WHEN AAA.ADJUST_FLAG = 'ETC_EXPIRATION_DATE_AMOU' THEN 'ETC_EXPIRATION_DATE_AMOU'
							ELSE ''
					END ADJUST_FLAG
			,		CASE	WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU_CNT' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'ISLMIT_CNT' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'AVG_DAY' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_CNT' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_CNT' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_CNT' THEN ADJUST_AMOU
					END ADJUST_CONTENT
			,		CASE	WHEN AAA.ADJUST_FLAG = 'BALANCE_AMOU' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'MONTH_DAY_AMOU' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'YEAR_DAY_AMOU' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'BUYI_TOTA_AMOU' THEN ADJUST_AMOU
							WHEN AAA.ADJUST_FLAG = 'ETC_EXPIRATION_DATE_AMOU' THEN ADJUST_AMOU
							ELSE 0
					END ADJUST_AMOU
			FROM(		
				SELECT	ADJUST_AMOU
				,		ADJUST_FLAG
				FROM(
					SELECT	CONVERT(NUMERIC, SUM(A.BALANCE_AMOU_CNT)) AS BALANCE_AMOU_CNT
					,		CONVERT(NUMERIC, SUM(A.BALANCE_AMOU)) AS BALANCE_AMOU
					,		CONVERT(NUMERIC, SUM(A.ISLMIT_CNT)) AS ISLMIT_CNT
					,		CONVERT(NUMERIC, SUM(A.AVG_DAY)) AS AVG_DAY
					,		CONVERT(NUMERIC, SUM(A.MONTH_DAY_CNT)) AS MONTH_DAY_CNT
					,		CONVERT(NUMERIC, SUM(A.MONTH_DAY_AMOU)) AS MONTH_DAY_AMOU
					,		CONVERT(NUMERIC, SUM(A.YEAR_DAY_CNT)) AS YEAR_DAY_CNT
					,		CONVERT(NUMERIC, SUM(A.YEAR_DAY_AMOU)) AS YEAR_DAY_AMOU
					,		CONVERT(NUMERIC, SUM(A.BUYI_TOTA_CNT)) AS BUYI_TOTA_CNT
					,		CONVERT(NUMERIC, SUM(A.BUYI_TOTA_AMOU)) AS BUYI_TOTA_AMOU
					,		CONVERT(NUMERIC, SUM(A.ETC_EXPIRATION_DATE_AMOU)) AS ETC_EXPIRATION_DATE_AMOU
					FROM(
						------총채권 금액, 주문제한(법인기준, 이관여부 : 아니오(0) )----------
						SELECT	COUNT(A.BALANCE_AMOU) AS BALANCE_AMOU_CNT
						,		SUM(A.BALANCE_AMOU) AS BALANCE_AMOU
						,		SUM(ISLMIT_CNT) AS ISLMIT_CNT
						,		0 AS AVG_DAY
						,		0 AS MONTH_DAY_CNT
						,		0 AS MONTH_DAY_AMOU
						,		0 AS YEAR_DAY_CNT
						,		0 AS YEAR_DAY_AMOU
						,		0 AS BUYI_TOTA_CNT
						,		0 AS BUYI_TOTA_AMOU
						,		0 AS ETC_EXPIRATION_DATE_AMOU
						FROM(
							SELECT	CASE	WHEN AAA.BALANCE_AMOU != 0 THEN AAA.BALANCE_AMOU
									END BALANCE_AMOU	--잔액
							,		CASE	WHEN BBB.ISLIMIT = '1' THEN CONVERT(INT, BBB.ISLIMIT)
									END	ISLMIT_CNT	--주문제한
							FROM(
								SELECT	AA.clientid AS clientid
								,		MAX(AA.create_borgid) AS create_borgid
								,		SUM(AA.BALANCE_AMOU) AS BALANCE_AMOU
								,		MIN(AA.TRANSFER_STATUS) AS TRANSFER_STATUS
								FROM(	
									SELECT	ISNULL(A.sale_tota_amou,0) AS sale_tota_amou
									,		ISNULL(A.pay_amou, 0) AS pay_amou
									,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
									,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS BALANCE_AMOU
									,		A.clientid AS clientid
									,		A.create_borgid AS create_borgid
									,		A.BRANCHID AS BRANCHID
									,		B.CREAT_DATE AS CREAT_DATE
									,		A.TRANSFER_STATUS
									FROM MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN(
														SELECT 	SALE_SEQU_NUMB
														,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
														,		MAX(CREAT_DATE) AS CREAT_DATE
														,		MAX(ALRAM_DATE) AS ALRAM_DATE
														FROM 	MPTREC WITH(NOLOCK)  
														GROUP BY SALE_SEQU_NUMB
									)B 
										ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
									WHERE	A.SAP_JOUR_NUMB IS NOT NULL
								)AA
								WHERE AA.create_borgid = 13
								AND (AA.RECE_PAY_AMOU > 0 OR AA.RECE_PAY_AMOU = 0)
								GROUP BY AA.CLIENTID
							)AAA
							LEFT OUTER JOIN SMPBORGS BBB WITH(NOLOCK) 
									ON AAA.CLIENTID = BBB.BORGID
							WHERE AAA.TRANSFER_STATUS = '1'
						)A
						----------평균회수기일(전체 채권에 평균회수기일 고식 적용)
						UNION ALL
						SELECT	0 AS BALANCE_AMOU_CNT
						,		0 AS BALANCE_AMOU
						,		0 AS ISLMIT_CNT
						,		SUM(AVG_REV_AMOU_DATE)/ COUNT(AVG_REV_AMOU_DATE) AS AVG_DAY
						,		0 AS MONTH_DAY_CNT
						,		0 AS MONTH_DAY_AMOU
						,		0 AS YEAR_DAY_CNT
						,		0 AS YEAR_DAY_AMOU
						,		0 AS BUYI_TOTA_CNT
						,		0 AS BUYI_TOTA_AMOU
						,		0 AS ETC_EXPIRATION_DATE_AMOU
						FROM(
						
							SELECT	MAX(AA.create_borgid) AS create_borgid
							,		CASE	WHEN SUM(ISNULL(AA.SALE_TOTA_AMOU2,0)) = 0 THEN 0
											ELSE ROUND(SUM(AA.AVG_REV_AMOU)/SUM(AA.SALE_TOTA_AMOU2),2) 
									END AVG_REV_AMOU_DATE
							FROM(
							<![CDATA[
								SELECT	ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
								,		A.clientid AS clientid
								,		A.create_borgid AS create_borgid
								,		CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0))<=0 
															THEN (DATEDIFF ( day ,A.CLOS_SALE_DATE, B.ALRAM_DATE) * ISNULL(B.RECE_PAY_AMOU, 0))
												ELSE 0
										END AVG_REV_AMOU
								,		CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) <= 0 THEN ISNULL(A.SALE_TOTA_AMOU, 0)
										END SALE_TOTA_AMOU2
							]]>
								FROM MSSALM A WITH(NOLOCK) 
								LEFT OUTER JOIN(
													SELECT 	SALE_SEQU_NUMB
													,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
													,		MAX(CREAT_DATE) AS CREAT_DATE
													,		MAX(ALRAM_DATE) AS ALRAM_DATE
													FROM 	MPTREC WITH(NOLOCK)  
													GROUP BY SALE_SEQU_NUMB
								)B 
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
								WHERE	A.SAP_JOUR_NUMB IS NOT NULL
								AND A.CLOS_SALE_DATE BETWEEN DATEADD(YEAR, -1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(), 120)+'01')) AND DATEADD(MONTH,1 ,DATEADD(MONTH, -1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(), 120)+'01')))
								
							)AA
							WHERE AA.create_borgid = 13
							AND (AA.RECE_PAY_AMOU > 0 OR AA.RECE_PAY_AMOU = 0)
						)B
						----------------당월 입금액
						UNION ALL
						SELECT	0 AS BALANCE_AMOU_CNT
						,		0 AS BALANCE_AMOU
						,		0 AS ISLMIT_CNT
						,		0 AS AVG_DAY
						,		COUNT(MONTH_DAY_AMOU) AS MONTH_DAY_CNT
						,		SUM(MONTH_DAY_AMOU) AS MONTH_DAY_AMOU
						,		0 AS YEAR_DAY_CNT
						,		0 AS YEAR_DAY_AMOU
						,		0 AS BUYI_TOTA_CNT
						,		0 AS BUYI_TOTA_AMOU
						,		0 AS ETC_EXPIRATION_DATE_AMOU
						FROM(	
							SELECT	COUNT(A.SALE_SEQU_NUMB) AS MONTH_DAY_CNT
							,		SUM(B.RECE_PAY_AMOU) AS MONTH_DAY_AMOU
							FROM MSSALM A WITH(NOLOCK) 
							LEFT OUTER JOIN MPTREC B WITH(NOLOCK) 
								ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							WHERE B.ALRAM_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01'))
							GROUP BY A.SALE_SEQU_NUMB
						)C
							
						----------------금년 입금액
						UNION ALL
						SELECT	0 AS BALANCE_AMOU_CNT
						,		0 AS BALANCE_AMOU
						,		0 AS ISLMIT_CNT
						,		0 AS AVG_DAY
						,		0 AS MONTH_DAY_CNT
						,		0 AS MONTH_DAY_AMOU
						,		COUNT(YEAR_DAY_AMOU) AS YEAR_DAY_CNT
						,		SUM(YEAR_DAY_AMOU) AS YEAR_DAY_AMOU
						,		0 AS BUYI_TOTA_CNT
						,		0 AS BUYI_TOTA_AMOU
						,		0 AS ETC_EXPIRATION_DATE_AMOU
						FROM(	
							SELECT	COUNT(A.SALE_SEQU_NUMB) AS YEAR_DAY_CNT
							,		SUM(B.RECE_PAY_AMOU) AS YEAR_DAY_AMOU
							FROM MSSALM A WITH(NOLOCK) 
							LEFT OUTER JOIN MPTREC B WITH(NOLOCK) 
								ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							WHERE B.ALRAM_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120)+'0101') AND DATEADD(YEAR, 1, CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120)+'0101'))
							GROUP BY A.SALE_SEQU_NUMB
						)D
						---------채무잔액
						UNION ALL
						SELECT	0 AS BALANCE_AMOU_CNT
						,		0 AS BALANCE_AMOU
						,		0 AS ISLMIT_CNT
						,		0 AS AVG_DAY
						,		0 AS MONTH_DAY_CNT
						,		0 AS MONTH_DAY_AMOU
						,		0 AS YEAR_DAY_CNT
						,		0 AS YEAR_DAY_AMOU
						,		COUNT(E.VENDORID) AS BUYI_TOTA_CNT
						,		SUM(E.BUYI_BALANCE_AMOU) AS BUYI_TOTA_AMOU
						,		0 AS ETC_EXPIRATION_DATE_AMOU
						FROM(
							SELECT	AA.VENDORID
							,		BUYI_TOTA_AMOU
							,		BUYI_BALANCE_AMOU
							FROM(
								SELECT	A.VENDORID
								,		SUM(A.BUYI_TOTA_AMOU) AS BUYI_TOTA_AMOU
								,		SUM(A.PAY_AMOU) AS BUYI_PAY_AMOU
								,		SUM(A.BUYI_TOTA_AMOU) - SUM(B.RECE_PAY_AMOU) AS BUYI_BALANCE_AMOU
								FROM MSBUYM A WITH(NOLOCK) 
								LEFT OUTER JOIN (
									SELECT	SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
									,		BUYI_SEQU_NUMB
									FROM MPTPAY WITH(NOLOCK) 
									GROUP BY BUYI_SEQU_NUMB
								)B
									ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
								GROUP BY A.VENDORID
							)AA
							WHERE AA.BUYI_BALANCE_AMOU > 0
						)E
						------------외담대만기도래 금액
						UNION ALL
						SELECT	0 AS BALANCE_AMOU_CNT
						,		0 AS BALANCE_AMOU
						,		0 AS ISLMIT_CNT
						,		0 AS AVG_DAY
						,		0 AS MONTH_DAY_CNT
						,		0 AS MONTH_DAY_AMOU
						,		0 AS YEAR_DAY_CNT
						,		0 AS YEAR_DAY_AMOU
						,		0 AS BUYI_TOTA_CNT
						,		0 AS BUYI_TOTA_AMOU
						,		SUM(F.ETC_EXPIRATION_DATE_AMOU) AS ETC_EXPIRATION_DATE_AMOU
						FROM(
							SELECT	SUM(CASE	WHEN (ETC_EXPIRATION_DATE != NULL OR ETC_EXPIRATION_DATE IS NOT NULL) THEN A.BUYI_TOTA_AMOU
										END) AS ETC_EXPIRATION_DATE_AMOU
							FROM MSBUYM A WITH(NOLOCK) 
							WHERE A.ETC_EXPIRATION_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01'))
						)F
					)A
				)AA
				UNPIVOT(
						ADJUST_AMOU FOR ADJUST_FLAG IN(
															BALANCE_AMOU_CNT
														,	BALANCE_AMOU
														,	ISLMIT_CNT
														,	AVG_DAY
														,	MONTH_DAY_CNT
														,	MONTH_DAY_AMOU
														,	YEAR_DAY_CNT
														,	YEAR_DAY_AMOU
														,	BUYI_TOTA_CNT
														,	BUYI_TOTA_AMOU
														,	ETC_EXPIRATION_DATE_AMOU
						)
				)AS UNPVT
			)AAA
		)AAAA	
		GROUP BY AAAA.ADJUST_FLAG
		ORDER BY MAX(AAAA.ADJUST_RANK)
	</select>
	
	
	<select id="managementProductList" resultType="java.util.HashMap">
		/** common.main..managementProductList **/
		SELECT	CASE	WHEN FLAG = 'PRODUCT_CNT' THEN '등록 상품수'
						WHEN FLAG = 'MC_NEW_GOOD_REQUEST_CNT' THEN '구매사 상품등록 요청'
						WHEN FLAG = 'MC_GOOD_REQUEST_CNT' THEN '공급사 상품등록 요청'
						WHEN FLAG = 'PRODUCT_PRICE_REQ' THEN '공급사 단가 변경 요청'
						WHEN FLAG = 'PRODUCT_END_REQ' THEN '공급사 상품 종료 요청'
						WHEN FLAG = 'SUGGEST_CNT' THEN '신규 자재 제안'
						WHEN FLAG = 'FIX_APP_STS2' THEN '당일 매입 단가 변경'
						WHEN FLAG = 'SPOT_PRODUCT_CNT' THEN '당일 상품 등록'
						WHEN FLAG = 'FIX_APP_STS3' THEN '당일 상품 종료'
				END FLAG
		,		CASE	WHEN (FLAG = 'PRODUCT_CNT' OR FLAG = 'PRODUCT_END_CNT') THEN CONVERT(VARCHAR, CONTENT)+' 개'
						ELSE CONVERT(VARCHAR, CONTENT)+' 건'
				END CONTENT
		,		FLAG AS FLAG2
		FROM(
			SELECT	SUM(A.PRODUCT_CNT) AS PRODUCT_CNT
			,		SUM(A.MC_NEW_GOOD_REQUEST_CNT) AS MC_NEW_GOOD_REQUEST_CNT
			,		SUM(A.MC_GOOD_REQUEST_CNT) AS MC_GOOD_REQUEST_CNT
			,		SUM(A.PRODUCT_PRICE_REQ) AS PRODUCT_PRICE_REQ
			,		SUM(A.PRODUCT_END_REQ) AS PRODUCT_END_REQ
			,		SUM(A.SUGGEST_CNT) AS SUGGEST_CNT
			,		SUM(FIX_APP_STS2) AS FIX_APP_STS2
			,		SUM(SPOT_PRODUCT_CNT) AS SPOT_PRODUCT_CNT
			,		SUM(FIX_APP_STS3) AS FIX_APP_STS3
			FROM(		
				SELECT	COUNT(A.PRODUCT_CNT) AS PRODUCT_CNT				--등록상품수
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM(	
					SELECT	CASE	WHEN C.ISUSE = 1 THEN A.GOOD_IDEN_NUMB
							END PRODUCT_CNT
					,		CASE	WHEN C.ISUSE = 0 THEN A.GOOD_IDEN_NUMB
							END PRODUCT_END_CNT
					FROM MCGOOD A WITH(NOLOCK) 
					INNER JOIN mccategorymaster B  WITH(NOLOCK) 
						ON A.cate_id = B.CATE_ID 
						AND B.cate_level = '3' 
					LEFT OUTER JOIN MCGOODVENDOR C WITH(NOLOCK) 
						ON A.GOOD_IDEN_NUMB = C.GOOD_IDEN_NUMB
					--WHERE C.ISUSE = 1
				)A
				UNION ALL
				SELECT	0 AS PRODUCT_CNT
				,		COUNT(1) AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM MCNEWGOODREQUEST WITH(NOLOCK) 
				WHERE state = 10
				AND delete_state = 0
				UNION ALL
				--공급사 신규상품 제안
				SELECT	0 AS PRODUCT_CNT
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		COUNT(1) AS MC_GOOD_REQUEST_CNT			--신규상품 제안 카운트
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM MCGOODREQUEST WITH(NOLOCK)  
				WHERE APP_STS = 0
				UNION ALL
				SELECT	0 AS PRODUCT_CNT
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT	
				,		COUNT(A.PRODUCT_PRICE_REQ) AS PRODUCT_PRICE_REQ
				,		COUNT(A.PRODUCT_END_REQ) AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM(	
					SELECT	CASE	WHEN APPLT_FIX_CODE = 20 THEN 1
							END PRODUCT_PRICE_REQ
					,		CASE	WHEN APPLT_FIX_CODE = 30 THEN 1
							END PRODUCT_END_REQ
					FROM MCGOODFIX WITH(NOLOCK) 
					WHERE FIX_APP_STS = 0
					AND (GOOD_IDEN_NUMB != 0 
					AND (GOOD_IDEN_NUMB IS NOT NULL OR GOOD_IDEN_NUMB != ''))
					AND (VENDORID != '' OR VENDORID IS NOT NULL)
				)A
				UNION ALL
				SELECT	0 AS PRODUCT_CNT
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT	
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		COUNT(1) AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM SMPNEW_MATERSUGGEST WITH(NOLOCK) 
				UNION ALL
				SELECT	0 AS PRODUCT_CNT
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT	
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		COUNT(1) AS SPOT_PRODUCT_CNT
				,		0 AS FIX_APP_STS2
				,		0 AS FIX_APP_STS3
				FROM MCGOOD WITH(NOLOCK)  
				WHERE insert_date BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(10),GETDATE(),120)) AND GETDATE()
				UNION ALL
				SELECT	0 AS PRODUCT_CNT
				,		0 AS MC_NEW_GOOD_REQUEST_CNT
				,		0 AS MC_GOOD_REQUEST_CNT	
				,		0 AS PRODUCT_PRICE_REQ
				,		0 AS PRODUCT_END_REQ
				,		0 AS SUGGEST_CNT
				,		0 AS SPOT_PRODUCT_CNT
				,		COUNT(CASE	WHEN FIX_APP_STS = 2 AND APPLT_FIX_CODE = 20 THEN 1 END) AS FIX_APP_STS2
				,		COUNT(CASE	WHEN FIX_APP_STS = 2 AND APPLT_FIX_CODE = 30 THEN 1 END) AS FIX_APP_STS3
				FROM MCGOODFIX WITH(NOLOCK) 
				WHERE APP_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(10),GETDATE(),120)) AND GETDATE()
			)A
		)AA
		UNPIVOT(
			CONTENT FOR  FLAG IN(
							PRODUCT_CNT
					,		MC_NEW_GOOD_REQUEST_CNT
					,		MC_GOOD_REQUEST_CNT	
					,		PRODUCT_PRICE_REQ
					,		PRODUCT_END_REQ
					,		SUGGEST_CNT
					,		SPOT_PRODUCT_CNT
					,		FIX_APP_STS2
					,		FIX_APP_STS3
			)
		)AS UNPVT
	</select>
	
	<select id="managementEtcList" resultType="java.util.HashMap">
		/** common.main.managementEtcList **/
			SELECT	CASE	WHEN AAA.FLAG = 'QNA_CNT' THEN 'QnA 처리중'
							WHEN AAA.FLAG = 'BID_CNT' THEN '입찰 진행중'
							WHEN AAA.FLAG = 'AVG_PURC_DATE' THEN '평균 발주 접수일'
							WHEN AAA.FLAG = 'INVOICE_DATE' THEN '배송 완료율'
							WHEN AAA.FLAG = 'RECE_REGI_DATE' THEN '평균 납기일'
					END FLAG
			,		CASE	WHEN AAA.FLAG = 'QNA_CNT' OR AAA.FLAG = 'BID_CNT' THEN CONVERT(VARCHAR,CONTENT)+' 건'
							WHEN AAA.FLAG = 'INVOICE_DATE' THEN CONVERT(VARCHAR,CONTENT)+' %'
							ELSE CONVERT(VARCHAR,CONTENT)+' 일'
					END CONTENT
			,		FLAG AS FLAG2
			FROM(	
				SELECT	FLAG
				,		CONTENT
				FROM(		
					SELECT	CONVERT(NUMERIC,SUM(A.QNA_CNT)) AS QNA_CNT
					,		CONVERT(NUMERIC,SUM(A.BID_CNT)) AS BID_CNT
					,		CONVERT(NUMERIC,SUM(A.AVG_PURC_DATE)) AS AVG_PURC_DATE
					,		CONVERT(NUMERIC,SUM(A.INVOICE_DATE)) AS INVOICE_DATE
					,		CONVERT(NUMERIC,SUM(A.RECE_REGI_DATE)) AS RECE_REGI_DATE
					FROM(	
						SELECT	COUNT(1) AS QNA_CNT
						,		0 AS BID_CNT
						,		0 AS AVG_PURC_DATE
						,		0 AS INVOICE_DATE
						,		0 AS RECE_REGI_DATE
						FROM MEREQU WITH(NOLOCK) 
						WHERE STAT_FLAG_CODE != 2
						UNION ALL
						SELECT	0 AS QNA_CNT
						,		COUNT(1) AS BID_CNT
						,		0 AS AVG_PURC_DATE
						,		0 AS INVOICE_DATE
						,		0 AS RECE_REGI_DATE
						FROM MCBID WITH(NOLOCK) 
						WHERE BIDSTATE = 10
						UNION ALL
						SELECT	0 AS QNA_CNT
						,		0 AS BID_CNT
						<![CDATA[
						,		CASE
									WHEN SUM(B.PURC_50_DATE) > 0 
										THEN
											CASE	
												WHEN COUNT(B.PURC_50_DATE) = 0 THEN SUM(B.PURC_50_DATE)
												ELSE CONVERT(DECIMAL(10, 1), CONVERT(NUMERIC, SUM(B.PURC_50_DATE)) / CONVERT(NUMERIC, COUNT(B.PURC_50_DATE)))
											END
										ELSE 0
								END AVG_PURC_DATE
						]]>
						,		0 AS INVOICE_DATE
						,		0 AS RECE_REGI_DATE
						FROM(	
							SELECT	DATEDIFF(DAY, CLIN_DATE, PURC_RECE_DATE) AS PURC_50_DATE
							FROM MRPURT WITH(NOLOCK) 
							WHERE 1=1
							AND PURC_STAT_FLAG = 50
							AND CLIN_DATE BETWEEN DATEADD(DAY , -90, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
						)B
						UNION ALL
						SELECT	0 AS QNA_CNT
						,		0 AS BID_CNT
						,		0 AS AVG_PURC_DATE
						,		CONVERT(NUMERIC, C.INVOICEDATE_CNT)/CONVERT(NUMERIC, C.CNT) * 100 AS INVOICE_DATE
						,		0 AS RECE_REGI_DATE
						FROM(
							SELECT	COUNT(CASE	WHEN (B.INVOICEDATE IS NOT NULL OR B.INVOICEDATE != '') THEN 1
											END) AS INVOICEDATE_CNT
							,		COUNT(CASE	WHEN (B.INVOICEDATE IS NULL OR B.INVOICEDATE = '') THEN 1
											END) AS INVOICEDATE_NOT_CNT
							,		COUNT(1) AS CNT
							FROM MRPURT A WITH(NOLOCK) 
							LEFT OUTER JOIN MRACPT B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
								AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
								AND A.PURC_IDEN_NUMB = B.PURC_IDEN_NUMB
							WHERE CLIN_DATE BETWEEN DATEADD(DAY , -90, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
						)C
						UNION ALL
						<![CDATA[
						SELECT	0 AS QNA_CNT
						,		0 AS BID_CNT
						,		0 AS AVG_PURC_DATE
						,		0 AS INVOICE_DATE
						,		CASE
									WHEN SUM(D.RECE_REGI_DATE) > 0 
										THEN 
											CASE	
												WHEN COUNT(D.RECE_REGI_DATE) = 0
													THEN SUM(D.RECE_REGI_DATE) 
												ELSE CONVERT(DECIMAL(10,1), CONVERT(NUMERIC, SUM(D.RECE_REGI_DATE))/CONVERT(NUMERIC, COUNT(D.RECE_REGI_DATE)))
											END
									ELSE 0
							END RECE_REGI_DATE
						]]>
						FROM(	
							SELECT	DATEDIFF(DAY, A.CLIN_DATE, B.INVOICEDATE) AS RECE_REGI_DATE
							FROM MRPURT A WITH(NOLOCK) 
							LEFT OUTER JOIN MRACPT B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
								AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
								AND A.PURC_IDEN_NUMB = B.PURC_IDEN_NUMB
							WHERE A.CLIN_DATE BETWEEN DATEADD(DAY , -90, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
						)D
					)A
				)AA
				UNPIVOT(
					CONTENT FOR FLAG IN (
											QNA_CNT
										,	BID_CNT
										,	AVG_PURC_DATE
										,	INVOICE_DATE
										,	RECE_REGI_DATE
					)
				)AS UNPVT
			)AAA
	</select>
	
	<select id="managementOrderStateList" resultType="java.util.HashMap">
		/** common.main.managementOrderStateList **/
		SELECT	CASE	WHEN AAAA.ORDERTYPE = 'PURC40' THEN '발주의뢰'
						WHEN AAAA.ORDERTYPE = 'PURC50' THEN '발주접수'
						WHEN AAAA.ORDERTYPE = 'PURC55' THEN '출하(준비중)'
						WHEN AAAA.ORDERTYPE = 'PURC60' THEN '출하'
						WHEN AAAA.ORDERTYPE = 'RECE70' THEN '인수완료'
						WHEN AAAA.ORDERTYPE = 'RETUREQ' THEN '반품요청'
						WHEN AAAA.ORDERTYPE = 'RETUSUC' THEN '반품완료'
				END ORDERTYPE
		,		CONVERT(VARCHAR, SUM(AAAA.ORDERCNT))+' 건' AS ORDERCNT
		,		SUM(AAAA.ORDERAMOUNT) AS ORDERAMOUNT
		FROM(
			SELECT	CASE	WHEN ORDERTYPE = 'PURC40CNT' THEN 'PURC40'
							WHEN ORDERTYPE = 'PURC40AMOUNT' THEN 'PURC40'
							WHEN ORDERTYPE = 'PURC50CNT' THEN 'PURC50'
							WHEN ORDERTYPE = 'PURC50AMOUNT' THEN 'PURC50'
							WHEN ORDERTYPE = 'DELI55CNT' THEN 'PURC55'
							WHEN ORDERTYPE = 'DELI55AMOUNT' THEN 'PURC55'
							WHEN ORDERTYPE = 'DELI60CNT' THEN 'PURC60'
							WHEN ORDERTYPE = 'DELI60AMOUNT' THEN 'PURC60'
							WHEN ORDERTYPE = 'RECE70CNT' THEN 'RECE70'
							WHEN ORDERTYPE = 'RECE70AMOUNT' THEN 'RECE70'
							
							WHEN ORDERTYPE = 'RETUREQCNT' THEN 'RETUREQ'
							WHEN ORDERTYPE = 'RETUREQAMOUNT' THEN 'RETUREQ'
							WHEN ORDERTYPE = 'RETUSUCCNT' THEN 'RETUSUC'
							WHEN ORDERTYPE = 'RETUSUCAMOUNT' THEN 'RETUSUC'
							ELSE ''
					END ORDERTYPE
			,		CASE	WHEN ORDERTYPE = 'PURC40CNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'PURC50CNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'DELI55CNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'DELI60CNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'RECE70CNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'RETUREQCNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'RETUSUCCNT' THEN ORDERVAL
							ELSE 0
					END ORDERCNT
			,		CASE	WHEN ORDERTYPE = 'PURC40AMOUNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'PURC50AMOUNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'DELI55AMOUNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'DELI60AMOUNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'RECE70AMOUNT' THEN ORDERVAL
							
							WHEN ORDERTYPE = 'RETUREQAMOUNT' THEN ORDERVAL
							WHEN ORDERTYPE = 'RETUSUCAMOUNT' THEN ORDERVAL
							ELSE 0
					END ORDERAMOUNT
			FROM(				
				SELECT	ORDERVAL
				,		ORDERTYPE
				FROM(			
					SELECT	SUM(A.PURC40CNT) AS PURC40CNT
					,		SUM(A.PURC40AMOUNT) AS PURC40AMOUNT
					,		SUM(A.PURC50CNT) AS PURC50CNT
					,		SUM(A.PURC50AMOUNT) AS PURC50AMOUNT
					,		SUM(A.DELI55CNT) AS DELI55CNT
					,		SUM(A.DELI55AMOUNT) AS DELI55AMOUNT
					,		SUM(A.DELI60CNT) AS DELI60CNT
					,		SUM(A.DELI60AMOUNT) AS DELI60AMOUNT
					,		SUM(A.RECE70CNT) AS RECE70CNT
					,		SUM(A.RECE70AMOUNT) AS RECE70AMOUNT
					,		SUM(A.RETUREQCNT) AS RETUREQCNT
					,		SUM(A.RETUREQAMOUNT) AS RETUREQAMOUNT
					,		SUM(A.RETUSUCCNT) AS RETUSUCCNT
					,		SUM(A.RETUSUCAMOUNT) AS RETUSUCAMOUNT
					FROM(	
						SELECT	CONVERT(NUMERIC, COUNT(A.PURC40AMOUNT)) AS PURC40CNT		--발주의뢰 카운트
						,		CONVERT(NUMERIC, SUM(A.PURC40AMOUNT)) AS PURC40AMOUNT		--발주의뢰 금액
						,		CONVERT(NUMERIC, COUNT(A.PURC50AMOUNT)) AS PURC50CNT		--발주접수 카운트
						,		CONVERT(NUMERIC, SUM(A.PURC50AMOUNT)) AS PURC50AMOUNT		--발주접수 금액
						,		CONVERT(NUMERIC, COUNT(A.DELI55AMOUNT)) AS DELI55CNT
						,		CONVERT(NUMERIC, SUM(A.DELI55AMOUNT)) AS DELI55AMOUNT
						,		CONVERT(NUMERIC, COUNT(A.DELI60AMOUNT)) AS DELI60CNT
						,		CONVERT(NUMERIC, SUM(A.DELI60AMOUNT)) AS DELI60AMOUNT
						,		0 AS RECE70CNT
						,		0 AS RECE70AMOUNT
						,		0 AS RETUREQCNT
						,		0 AS RETUREQAMOUNT
						,		0 AS RETUSUCCNT
						,		0 AS RETUSUCAMOUNT
						
						FROM(	
							SELECT	CASE	WHEN C.PURC_STAT_FLAG = 40 AND D.ORDE_IDEN_NUMB IS NULL THEN B.PURC_REQU_QUAN * B.ORDE_REQU_PRIC
									END PURC40AMOUNT
							,		CASE	WHEN C.PURC_STAT_FLAG = 50 AND D.ORDE_IDEN_NUMB IS NULL THEN C.PURC_REQU_QUAN * C.ORDE_REQU_PRIC
									END PURC50AMOUNT
							,		CASE	WHEN D.DELI_STAT_FLAG = 60 AND (D.INVOICEDATE is null or D.INVOICEDATE = '') THEN C.ORDE_REQU_PRIC * D.DELI_PROD_QUAN
									END DELI55AMOUNT
							,		CASE	WHEN D.DELI_STAT_FLAG = 60 AND (D.INVOICEDATE IS NOT NULL or D.INVOICEDATE != '') THEN C.ORDE_REQU_PRIC * D.DELI_PROD_QUAN
									END DELI60AMOUNT
							FROM MRORDM A WITH(NOLOCK) 
							LEFT OUTER JOIN MRORDT B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
							LEFT OUTER JOIN MRPURT C WITH(NOLOCK) 
								ON B.ORDE_IDEN_NUMB = C.ORDE_IDEN_NUMB
								AND B.ORDE_SEQU_NUMB = C.ORDE_SEQU_NUMB
							LEFT OUTER JOIN MRACPT D WITH(NOLOCK) 
								ON C.ORDE_IDEN_NUMB = D.ORDE_IDEN_NUMB
								AND C.ORDE_SEQU_NUMB = D.ORDE_SEQU_NUMB
								AND C.PURC_IDEN_NUMB = D.PURC_IDEN_NUMB
							LEFT OUTER JOIN SMPBRANCHS E WITH(NOLOCK) 
								ON A.BRANCHID = E.BRANCHID
							LEFT OUTER JOIN SMPWORKINFO F WITH(NOLOCK) 
								ON E.WORKID = F.WORKID
							WHERE F.IS_SKTS_MANAGE = 1
							AND A.REGI_DATE_TIME BETWEEN DATEADD(DAY , -180, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
						)A
						/*
						UNION ALL
						SELECT	0 AS PURC40CNT
						,		0 AS PURC40AMOUNT
						,		0 AS PURC50CNT
						,		0 AS PURC50AMOUNT
						,		SUM(B.DELI55CNT) AS DELI55CNT			--출하일 카운트
						,		SUM(B.DELI55AMOUNT) AS DELI55AMOUNT		--출하일 금액
						,		SUM(B.DELI60CNT) AS DELI60CNT			--배송정보입력일 카운트
						,		SUM(B.DELI60AMOUNT) AS DELI60AMOUNT		--배송정보입력일 금액
						,		0 AS RECE70CNT
						,		0 AS RECE70AMOUNT
						FROM(
							SELECT	CONVERT(NUMERIC, COUNT(1)) AS DELI55CNT
							,		CONVERT(NUMERIC, SUM(A.ORDE_REQU_PRIC * A.DELI_PROD_QUAN)) AS DELI55AMOUNT
							,		0 AS DELI60CNT
							,		0 AS DELI60AMOUNT
							FROM MRPURT A WITH(NOLOCK) 
							LEFT OUTER JOIN MRACPT B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
								AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
								AND A.PURC_IDEN_NUMB = B.PURC_IDEN_NUMB
							WHERE 1=1
							--AND B.DELI_DEGR_DATE BETWEEN CONVERT(DATETIME,CONVERT(VARCHAR(10), GETDATE(),120)) AND GETDATE()
							AND B.DELI_STAT_FLAG = 60
							AND (B.deli_invo_iden is null or B.deli_invo_iden = '')
							UNION ALL
							SELECT	0 AS DELI55CNT
							,		0 AS DELI55AMOUNT
							,		CONVERT(NUMERIC, COUNT(1)) AS DELI60CNT
							,		CONVERT(NUMERIC, SUM(A.ORDE_REQU_PRIC * A.DELI_PROD_QUAN)) AS DELI60AMOUNT
							FROM MRPURT A WITH(NOLOCK) 
							LEFT OUTER JOIN MRACPT B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
								AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
								AND A.PURC_IDEN_NUMB = B.PURC_IDEN_NUMB
							WHERE 1=1
							AND (B.deli_invo_iden IS NOT NULL or B.deli_invo_iden != '')
							AND B.DELI_STAT_FLAG = 60
							--AND B.INVOICEDATE BETWEEN CONVERT(DATETIME,CONVERT(VARCHAR(10), GETDATE(),120)) AND GETDATE()
						)B
						*/
						UNION ALL
						SELECT	0 AS PURC40CNT
						,		0 AS PURC40AMOUNT
						,		0 AS PURC50CNT
						,		0 AS PURC50AMOUNT
						,		0 AS DELI55CNT
						,		0 AS DELI55AMOUNT
						,		0 AS DELI60CNT
						,		0 AS DELI60AMOUNT
						,		CONVERT(NUMERIC, SUM(C.RECE70CNT)) AS RECE70CNT			--인수 카운트
						,		CONVERT(NUMERIC, SUM(C.RECE70AMOUNT)) AS RECE70AMOUNT	--인수 금액
						,		0 AS RETUREQCNT
						,		0 AS RETUREQAMOUNT
						,		0 AS RETUSUCCNT
						,		0 AS RETUSUCAMOUNT
						FROM(
							SELECT	COUNT(1) AS RECE70CNT
							,		SUM(A.SALE_PROD_AMOU) AS RECE70AMOUNT
							FROM MRORDTLIST A WITH(NOLOCK) 
							LEFT OUTER JOIN mracpt B WITH(NOLOCK) 
								ON A.orde_iden_numb = B.orde_iden_numb 
								AND A.orde_sequ_numb = B.orde_sequ_numb 
								AND A.purc_iden_numb = B.purc_iden_numb 
								AND A.deli_iden_numb = B.deli_iden_numb
							INNER JOIN SMPBRANCHS C WITH(NOLOCK) 
								ON A.BRANCHID = C.BRANCHID
							INNER JOIN SMPWORKINFO D WITH(NOLOCK) 
								ON C.WORKID = D.WORKID
							WHERE 1=1
							AND (A.SALE_SEQU_NUMB IS NULL OR A.SALE_SEQU_NUMB = '')
							AND B.DELI_STAT_FLAG = 70
							AND D.IS_SKTS_MANAGE = 1
							AND A.RECE_REGI_DATE BETWEEN DATEADD(DAY , -180, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
							GROUP BY A.BRANCHID
						)C
						UNION ALL
						SELECT	0 AS PURC40CNT
						,		0 AS PURC40AMOUNT
						,		0 AS PURC50CNT
						,		0 AS PURC50AMOUNT
						,		0 AS DELI55CNT
						,		0 AS DELI55AMOUNT
						,		0 AS DELI60CNT
						,		0 AS DELI60AMOUNT
						,		0 AS RECE70CNT
						,		0 AS RECE70AMOUNT
						,		CONVERT(NUMERIC, COUNT(RETUREQAMOUNT)) AS RETUREQCNT
						,		CONVERT(NUMERIC, SUM(RETUREQAMOUNT)) AS RETUREQAMOUNT
						,		CONVERT(NUMERIC, COUNT(RETUSUCAMOUNT)) AS RETUSUCCNT
						,		CONVERT(NUMERIC, SUM(RETUSUCAMOUNT)) AS RETUSUCAMOUNT
						FROM(
							SELECT	CASE	WHEN A.RETU_STAT_FLAG = 0 THEN A.retu_prod_quan*B.SALE_PROD_PRIS
										END RETUREQAMOUNT
							,		CASE	WHEN A.RETU_STAT_FLAG = 1 THEN A.retu_prod_quan*B.SALE_PROD_PRIS
										END AS RETUSUCAMOUNT
							FROM MRAREM A WITH(NOLOCK) 
							INNER JOIN MRORDTLIST B WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
								AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
								AND A.PURC_IDEN_NUMB = B.PURC_IDEN_NUMB
								AND A.DELI_IDEN_NUMB = B.DELI_IDEN_NUMB
								AND A.RECE_IDEN_NUMB = B.RECE_IDEN_NUMB
							INNER JOIN MRORDM C WITH(NOLOCK) 
								ON A.ORDE_IDEN_NUMB = C.ORDE_IDEN_NUMB
							INNER JOIN SMPBRANCHS D WITH(NOLOCK) 
								ON C.BRANCHID = D.BRANCHID
							INNER JOIN SMPWORKINFO E WITH(NOLOCK) 
								ON D.WORKID = E.WORKID
							WHERE (B.SALE_SEQU_NUMB IS NULL OR SALE_SEQU_NUMB = '')
							AND E.IS_SKTS_MANAGE = '1'
						)D
					)A
				)AA
				UNPIVOT(
					ORDERVAL FOR ORDERTYPE IN (
													PURC40CNT
												,	PURC40AMOUNT
												,	PURC50CNT
												,	PURC50AMOUNT
												,	DELI55CNT
												,	DELI55AMOUNT
												,	DELI60CNT
												,	DELI60AMOUNT
												,	RECE70CNT
												,	RECE70AMOUNT
												,	RETUREQCNT
												,	RETUREQAMOUNT
												,	RETUSUCCNT
												,	RETUSUCAMOUNT
					)
				)AS UNPVT
			)AAA
		)AAAA	
		GROUP BY AAAA.ORDERTYPE
	</select>
	
	<select id="managementOrderStateList2" resultType="java.util.HashMap">
		/** common.main.managementOrderStateList **/
<!-- 			SELECT	SUM(A.PURC_REQU_QUAN * A.ORDE_REQU_PRIC) AS PURC40AMOUNT -->
<!-- 			,		0 AS PURC50AMOUNT -->
<!-- 			FROM MRORDT A -->
<!-- 			LEFT OUTER JOIN MRPURT B -->
<!-- 				ON A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB -->
<!-- 				AND A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB -->
<!-- 			WHERE B.PURC_STAT_FLAG = 40 -->
<!-- 			UNION ALL -->
			SELECT	0 AS PURC40AMOUNT
			,		SUM(B.PURC_REQU_QUAN * B.ORDE_REQU_PRIC) AS PURC40AMOUNT
			FROM MRPURT B WITH(NOLOCK) 
			WHERE B.PURC_STAT_FLAG = '50'
			AND (B.deli_prod_quan = '0' or B.deli_prod_quan = '' or B.deli_prod_quan is null)
	</select>
	
	<select id="managementProductTop10List" resultType="java.util.HashMap">
		/** common.main.managementProductTop10List **/
		SELECT	TOP 10 A.GOOD_IDEN_NUMB AS GOOD_IDEN_NUMB
		,		B.GOOD_NAME AS GOOD_NAME
		,		A.SALE_PROD_AMOU AS SALE_PROD_AMOU
		,		A.SALE_PROD_PRIS AS SALE_PROD_PRIS
		,		A.SALE_PROD_QUAN AS SALE_PROD_QUAN
		,		A.CLOS_SALE_DATE AS CLOS_SALE_DATE
		FROM(	
			SELECT	A.GOOD_IDEN_NUMB AS GOOD_IDEN_NUMB
			,		SUM(A.SALE_PROD_AMOU) AS SALE_PROD_AMOU
			,		SUM(A.SALE_PROD_PRIS) AS SALE_PROD_PRIS
			,		SUM(A.SALE_PROD_QUAN) AS SALE_PROD_QUAN
			,		MAX(B.CLOS_SALE_DATE) AS CLOS_SALE_DATE
			FROM MRORDTLIST A WITH(NOLOCK) 
			INNER JOIN MSSALM B WITH(NOLOCK) 
				ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
			WHERE B.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, SUBSTRING(CONVERT(VARCHAR,DATEADD(MONTH,-1 , GETDATE()),120),1,8)+'01') AND DATEADD(DAY,-1,CONVERT(DATETIME,CONVERT(VARCHAR(8),GETDATE(), 120)+'01'))
			GROUP BY GOOD_IDEN_NUMB
		)A
		INNER JOIN MCGOOD B
			ON A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
		ORDER BY A.SALE_PROD_AMOU DESC
	</select>
	
	<select id="managementSaleTop10List" resultType="java.util.HashMap">
		/** common.main.managementSaleTop10List**/
		SELECT TOP 10	A.CLIENTID AS BRANCHID
		,		B.BORGNM AS CLIENTNM
		,		A.SALE_REQU_AMOU AS SALE_REQU_AMOU
		FROM(
			SELECT	CLIENTID AS CLIENTID
			,		SUM(SALE_TOTA_AMOU) AS SALE_TOTA_AMOU
			,		SUM(SALE_REQU_AMOU) AS SALE_REQU_AMOU
			FROM MSSALM WITH(NOLOCK) 
			WHERE clos_sale_date BETWEEN CONVERT(DATETIME, SUBSTRING(CONVERT(VARCHAR,DATEADD(MONTH,-1 , GETDATE()),120),1,8)+'01') AND DATEADD(DAY,-1,CONVERT(DATETIME,CONVERT(VARCHAR(8),GETDATE(), 120)+'01'))
			AND (SAP_JOUR_NUMB IS NOT NULL OR SAP_JOUR_NUMB != '')
			GROUP BY CLIENTID
		)A
		INNER JOIN SMPBORGS B WITH(NOLOCK) 
			ON A.CLIENTID = B.BORGID
		ORDER BY A.SALE_TOTA_AMOU DESC
	</select>
	
	<select id="managementBuyiTop10List" resultType="java.util.HashMap">
		/** common.main.managementBuyiTop10List**/
		SELECT	TOP 10 A.VENDORID AS VENDORID
		,		B.VENDORNM AS VENDORNM
		,		A.BUYI_REQU_AMOU AS BUYI_REQU_AMOU
		FROM(
			SELECT	VENDORID AS VENDORID
			,		SUM(BUYI_TOTA_AMOU) AS BUYI_TOTA_AMOU
			,		SUM(buyi_requ_amou) AS buyi_requ_amou
			FROM MSBUYM WITH(NOLOCK) 
			WHERE clos_buyi_date BETWEEN CONVERT(DATETIME, SUBSTRING(CONVERT(VARCHAR,DATEADD(MONTH,-1 , GETDATE()),120),1,8)+'01') AND DATEADD(DAY,-1,CONVERT(DATETIME,CONVERT(VARCHAR(8),GETDATE(), 120)+'01'))
			GROUP BY VENDORID
		)A
		INNER JOIN SMPVENDORS B
			ON A.VENDORID = B.VENDORID
		ORDER BY BUYI_TOTA_AMOU DESC
	</select>
	
	
	<select id="managementBranchOrderList" resultType="java.util.HashMap">
		/* common.main.managementBranchOrderList */
		SELECT	CASE
					WHEN AAA.FLAG = 'TO_DAY_ORDE_AMOU' THEN '당일 주문 금액'
					WHEN AAA.FLAG = 'TO_MONTH_ORDE_AMOU' THEN '당월 주문 금액'
					WHEN AAA.FLAG = 'TO_YEAR_ORDE_AMOU' THEN '금년 주문 금액'
					WHEN AAA.FLAG = 'BALACE_AMOU' THEN '채무잔액 (사업장 기준)'
					WHEN AAA.FLAG = 'NEWGOOD_REQ_CNT' THEN '상품등록요청'
					WHEN AAA.FLAG = 'MRBORG_USER_CNT' THEN '관심상품'
					WHEN AAA.FLAG = 'SMPNEW_MATER_CNT' THEN '신규자제제안'
				END FLAG
		,		CASE
					WHEN AAA.FLAG = 'NEWGOOD_REQ_CNT' OR AAA.FLAG = 'MRBORG_USER_CNT' OR AAA.FLAG = 'SMPNEW_MATER_CNT'
						THEN CONVERT(VARCHAR, AAA.CONTENT)+' 건'
					ELSE CONVERT(VARCHAR, AAA.CONTENT)
				END CONTENT
		,		FLAG AS FLAG2
		FROM(	
			SELECT	FLAG
			,		CONTENT
			FROM(	
				SELECT	CONVERT(INT, SUM(A.TO_DAY_ORDE_AMOU)) AS TO_DAY_ORDE_AMOU
				,		CONVERT(INT,SUM(A.TO_MONTH_ORDE_AMOU)) AS TO_MONTH_ORDE_AMOU
				,		CONVERT(INT,SUM(A.TO_YEAR_ORDE_AMOU)) AS TO_YEAR_ORDE_AMOU
				,		CONVERT(INT,SUM(A.BALACE_AMOU)) AS BALACE_AMOU
				,		CONVERT(INT,SUM(A.NEWGOOD_REQ_CNT)) AS NEWGOOD_REQ_CNT
				,		CONVERT(INT,SUM(A.MRBORG_USER_CNT)) AS MRBORG_USER_CNT
				,		CONVERT(INT,SUM(A.SMPNEW_MATER_CNT)) AS SMPNEW_MATER_CNT
				FROM(
					--당일 주문금액
					SELECT	SUM(
									(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan
											WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan
											WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan
											ELSE B.orde_requ_quan
									END) *
									(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris
											WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric
											ELSE B.orde_requ_pric
									END)
								) AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		0 AS NEWGOOD_REQ_CNT
					,		0 AS MRBORG_USER_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM mrordm A WITH(NOLOCK) 
					INNER JOIN mrordt B WITH(NOLOCK) 
						ON A.orde_iden_numb = B.orde_iden_numb 
					LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
						ON B.orde_iden_numb = C.orde_iden_numb 
						AND B.orde_sequ_numb = C.orde_sequ_numb 
					LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
						ON C.orde_iden_numb = D.orde_iden_numb 
						AND C.orde_sequ_numb = D.orde_sequ_numb 
						AND C.purc_iden_numb = D.purc_iden_numb
					LEFT OUTER JOIN mrordtlist E WITH(NOLOCK)
					ON  D.orde_iden_numb = E.orde_iden_numb
					AND D.orde_sequ_numb = E.orde_sequ_numb
					AND D.purc_iden_numb = E.purc_iden_numb
					AND D.deli_iden_numb = E.deli_iden_numb
					LEFT OUTER JOIN SMPBRANCHS I WITH(NOLOCK) 
						ON A.branchid = I.BRANCHID 
					LEFT OUTER JOIN SMPWORKINFO P WITH(NOLOCK) 
						ON I.WORKID = P.WORKID 
					WHERE 1 = 1 
					AND (
							CASE 
								WHEN D.orde_iden_numb IS NOT NULL 
									THEN D.deli_stat_flag 
								WHEN C.orde_iden_numb IS NOT NULL 
									THEN C.purc_stat_flag 
								ELSE B.orde_stat_flag END
						) IN ('05', '10', '40', '50', '60', '69', '70', '80') 
					AND A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(10), GETDATE(), 120)) AND GETDATE()
					AND P.IS_SKTS_MANAGE = '1'
					AND A.branchid = #{branchId}
					UNION ALL
					--당월 주문금액
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		SUM(
									(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan
											WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan
											WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan
											ELSE B.orde_requ_quan
									END) *
									(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris
											WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric
											ELSE B.orde_requ_pric
									END)
								) AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		0 AS NEWGOOD_REQ_CNT
					,		0 AS MRBORG_USER_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM mrordm A WITH(NOLOCK) 
					INNER JOIN mrordt B WITH(NOLOCK) 
						ON A.orde_iden_numb = B.orde_iden_numb 
					LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
						ON B.orde_iden_numb = C.orde_iden_numb 
						AND B.orde_sequ_numb = C.orde_sequ_numb 
					LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
						ON C.orde_iden_numb = D.orde_iden_numb 
						AND C.orde_sequ_numb = D.orde_sequ_numb 
						AND C.purc_iden_numb = D.purc_iden_numb
					LEFT OUTER JOIN mrordtlist E WITH(NOLOCK)
					ON  D.orde_iden_numb = E.orde_iden_numb
					AND D.orde_sequ_numb = E.orde_sequ_numb
					AND D.purc_iden_numb = E.purc_iden_numb
					AND D.deli_iden_numb = E.deli_iden_numb
					LEFT OUTER JOIN SMPBRANCHS I WITH(NOLOCK) 
						ON A.branchid = I.BRANCHID 
					LEFT OUTER JOIN SMPWORKINFO P WITH(NOLOCK) 
						ON I.WORKID = P.WORKID 
					WHERE 1 = 1 
					AND (
							CASE 
								WHEN D.orde_iden_numb IS NOT NULL 
									THEN D.deli_stat_flag 
								WHEN C.orde_iden_numb IS NOT NULL 
									THEN C.purc_stat_flag 
								ELSE B.orde_stat_flag END
						) IN ('05', '10', '40', '50', '60', '69', '70', '80') 
					AND A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01'))
					AND P.IS_SKTS_MANAGE = '1'
					AND A.branchid = #{branchId}
					UNION ALL
					--금년주문금액
					
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		SUM(	(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan 
											WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan 
											WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan 
											ELSE B.orde_requ_quan 
									END) * 
									(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris 
											WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric 
											ELSE B.orde_requ_pric 
									END) ) AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		0 AS NEWGOOD_REQ_CNT
					,		0 AS MRBORG_USER_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM mrordm A WITH(NOLOCK) 
					INNER JOIN mrordt B WITH(NOLOCK) 
						ON A.orde_iden_numb = B.orde_iden_numb 
					LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
						ON B.orde_iden_numb = C.orde_iden_numb 
						AND B.orde_sequ_numb = C.orde_sequ_numb 
					LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
						ON C.orde_iden_numb = D.orde_iden_numb 
						AND C.orde_sequ_numb = D.orde_sequ_numb 
						AND C.purc_iden_numb = D.purc_iden_numb 
					LEFT OUTER JOIN mrordtlist E WITH(NOLOCK) 
						ON D.orde_iden_numb = E.orde_iden_numb 
						AND D.orde_sequ_numb = E.orde_sequ_numb 
						AND D.purc_iden_numb = E.purc_iden_numb 
						AND D.deli_iden_numb = E.deli_iden_numb 
					LEFT OUTER JOIN SMPBRANCHS I WITH(NOLOCK) 
						ON A.branchid = I.BRANCHID 
					LEFT OUTER JOIN SMPWORKINFO P WITH(NOLOCK) 
						ON I.WORKID = P.WORKID 
					WHERE 1 = 1 
					AND (CASE	WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_stat_flag 
								WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_stat_flag 
								ELSE B.orde_stat_flag 
						END) IN ('05', '10', '40', '50', '60', '69', '70', '80') 
					AND A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120)+'0101') AND DATEADD(YEAR, 1, DATEADD(MONTH, -1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01')))
					AND (CASE	WHEN P.IS_SKTS_MANAGE = 1 OR ( I.WORKID = '8' AND ( A.regi_date_time BETWEEN CONVERT(DATETIME,'2012-06-01') AND CONVERT(DATETIME, '2013-03-31 23:59:59') )) THEN '1' ELSE '0' END) = 1
					AND A.branchid = #{branchId}
	
					UNION ALL
					------------채무잔액-------------
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		(SUM(A.SALE_TOTA_AMOU) - SUM(B.RECE_PAY_AMOU)) AS BALACE_AMOU
					,		0 AS MRBORG_USER_CNT
					,		0 AS NEWGOOD_REQ_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM MSSALM A WITH(NOLOCK) 
					LEFT OUTER JOIN( 
						SELECT	SALE_SEQU_NUMB
						,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
						FROM MPTREC WITH(NOLOCK) 
						GROUP BY SALE_SEQU_NUMB
					)B
						ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
					WHERE A.BRANCHID = #{branchId}
					GROUP BY A.BRANCHID
					
					UNION ALL
					-------------상품등록요청-------------
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		COUNT(1) AS NEWGOOD_REQ_CNT
					,		0 AS MRBORG_USER_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM MCNEWGOODREQUEST WITH(NOLOCK)  
					WHERE INSERT_BORGID = #{branchId}
					AND STATE = '10'
					AND INSERT_DATE BETWEEN CONVERT(DATETIME, CONVERT(VARCHAR(4),GETDATE(),120)+'0101') AND DATEADD(YEAR, 1, DATEADD(MONTH, -1, CONVERT(DATETIME, CONVERT(VARCHAR(8),GETDATE(),120)+'01')))
					
					UNION ALL
					-------------관심상품------------
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		0 AS NEWGOOD_REQ_CNT
					,		COUNT(1) AS MRBORG_USER_CNT
					,		0 AS SMPNEW_MATER_CNT
					FROM mrborgusergood USERGOOD WITH(NOLOCK)   
					INNER JOIN mcdisplaygood DISPGOOD WITH(NOLOCK) 
						ON USERGOOD.disp_good_id = DISPGOOD.disp_good_id
					INNER JOIN mcgoodvendor GOODVENDOR WITH(NOLOCK) 
						ON DISPGOOD.good_iden_numb = GOODVENDOR.good_iden_numb
						AND DISPGOOD.vendorid = GOODVENDOR.vendorid
					INNER JOIN mcgood GOOD WITH(NOLOCK) 
						ON GOODVENDOR.good_iden_numb = GOOD.good_iden_numb
					INNER JOIN SMPBORGS BORGS WITH(NOLOCK) 
						ON GOODVENDOR.vendorid = BORGS.BORGID
					WHERE 1=1
					AND GOODVENDOR.ISUSE = '1'
					AND USERGOOD.BRANCHID = #{branchId}
					UNION ALL
					
					-------------신규자제제안------------
					SELECT	0 AS TO_DAY_ORDE_AMOU
					,		0 AS TO_MONTH_ORDE_AMOU
					,		0 AS TO_YEAR_ORDE_AMOU
					,		0 AS BALACE_AMOU
					,		0 AS NEWGOOD_REQ_CNT
					,		0 AS MRBORG_USER_CNT
					,		COUNT(1) AS SMPNEW_MATER_CNT
					FROM SMPNEW_MATERSUGGEST A  WITH(NOLOCK) 
					WHERE 1=1 
					AND A.USERID IN (SELECT USERID FROM SMPBORGS_USERS WITH(NOLOCK) 	WHERE BORGID = #{branchId})
				)A
			)AA
			UNPIVOT(
				CONTENT FOR FLAG IN(
										TO_DAY_ORDE_AMOU
									,	TO_MONTH_ORDE_AMOU
									,	TO_YEAR_ORDE_AMOU
									,	BALACE_AMOU
									,	NEWGOOD_REQ_CNT
									,	MRBORG_USER_CNT
									,	SMPNEW_MATER_CNT
				)
			)AS UNPVT	
		)AAA
	</select>
	
	<select id="managementReceNotAmouList" resultType="java.util.HashMap">
		/* common.main.managementReceNotAmouList */
		SELECT	CASE	
					WHEN AAAA.FLAG = 'PURC_AMOU'
						THEN '발주금액'
					WHEN AAAA.FLAG = 'RECE_AMOU'
						THEN '인수완료금액'
					WHEN AAAA.FLAG = 'RECENOT_AMOU'
						THEN '미인수금액'
				END FLAG
		,		MAX(CLIENT_AMOU) AS CLIENT_AMOU
		,		MAX(BRANCH_AMOU) AS BRANCH_AMOU
		,		AAAA.FLAG AS FLAG2
		FROM(
			SELECT	CASE
						WHEN AAA.FLAG = 'PURC_CLIENT_AMOU' OR AAA.FLAG = 'PURC_BRANCH_AMOU'
							THEN 'PURC_AMOU'
						WHEN AAA.FLAG = 'RECE_CLIENT_AMOU' OR AAA.FLAG = 'RECE_BRANCH_AMOU'
							THEN 'RECE_AMOU'
						WHEN AAA.FLAG = 'RECENOT_CLIENT_AMOU' OR AAA.FLAG = 'RECENOT_BRANCH_AMOU'
							THEN 'RECENOT_AMOU'
					END FLAG	
			,		CASE
						WHEN AAA.FLAG = 'PURC_CLIENT_AMOU'
							THEN AAA.CONTENT
						WHEN AAA.FLAG = 'RECE_CLIENT_AMOU'
							THEN AAA.CONTENT
						WHEN AAA.FLAG = 'RECENOT_CLIENT_AMOU'
							THEN AAA.CONTENT
					END CLIENT_AMOU
			,		CASE
						WHEN AAA.FLAG = 'PURC_BRANCH_AMOU'
							THEN AAA.CONTENT
						WHEN AAA.FLAG = 'RECE_BRANCH_AMOU'
							THEN AAA.CONTENT
						WHEN AAA.FLAG = 'RECENOT_BRANCH_AMOU'
							THEN AAA.CONTENT
					END BRANCH_AMOU
			FROM(
				SELECT	FLAG
				,		CONTENT
				FROM(
					SELECT	CONVERT(FLOAT, SUM(A.PURC_CLIENT_AMOU)) AS PURC_CLIENT_AMOU
					,		CONVERT(FLOAT, SUM(A.PURC_BRANCH_AMOU)) AS PURC_BRANCH_AMOU
					,		CONVERT(FLOAT, SUM(A.RECE_CLIENT_AMOU)) AS RECE_CLIENT_AMOU
					,		CONVERT(FLOAT, SUM(A.RECE_BRANCH_AMOU)) AS RECE_BRANCH_AMOU
					,		CONVERT(FLOAT, SUM(A.RECENOT_CLIENT_AMOU)) AS RECENOT_CLIENT_AMOU
					,		CONVERT(FLOAT, SUM(A.RECENOT_BRANCH_AMOU)) AS RECENOT_BRANCH_AMOU
					FROM(			
						SELECT	SUM(
												(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan
														WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan
														WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan
														ELSE B.orde_requ_quan
												END) *
												(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris
														WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric
														ELSE B.orde_requ_pric
												END)
											) AS PURC_CLIENT_AMOU
						,		0 AS PURC_BRANCH_AMOU
						,		0 AS RECE_CLIENT_AMOU
						,		0 AS RECE_BRANCH_AMOU
						,		0 AS RECENOT_CLIENT_AMOU
						,		0 AS RECENOT_BRANCH_AMOU
						FROM mrordm A WITH(NOLOCK) 
						INNER JOIN mrordt B WITH(NOLOCK) 
							ON A.orde_iden_numb = B.orde_iden_numb 
						LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
							ON B.orde_iden_numb = C.orde_iden_numb 
							AND B.orde_sequ_numb = C.orde_sequ_numb 
						LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
							ON C.orde_iden_numb = D.orde_iden_numb 
							AND C.orde_sequ_numb = D.orde_sequ_numb 
							AND C.purc_iden_numb = D.purc_iden_numb 
						LEFT OUTER JOIN mrordtlist E WITH(NOLOCK) 
							ON D.orde_iden_numb = E.orde_iden_numb 
							AND D.orde_sequ_numb = E.orde_sequ_numb 
							AND D.purc_iden_numb = E.purc_iden_numb 
							AND D.deli_iden_numb = E.deli_iden_numb 
						LEFT OUTER JOIN mcgood H WITH(NOLOCK) 
							ON B.good_iden_numb = H.good_iden_numb 
						LEFT OUTER JOIN SMPBRANCHS I WITH(NOLOCK) 
							ON A.branchid = I.BRANCHID 
						LEFT OUTER JOIN SMPWORKINFO P WITH(NOLOCK) 
							ON I.WORKID = P.WORKID 
						LEFT OUTER JOIN mcgoodvendor O WITH(NOLOCK) 
							ON (
									CASE 
										WHEN E.orde_iden_numb IS NOT NULL 
											THEN E.good_iden_numb 
										WHEN C.orde_iden_numb IS NOT NULL 
											THEN C.good_iden_numb 
										ELSE B.good_iden_numb 
									END	) = O.good_iden_numb 
							AND (
									CASE 
										WHEN E.orde_iden_numb IS NOT NULL 
											THEN E.vendorid 
										WHEN C.orde_iden_numb IS NOT NULL 
											THEN C.vendorid 
												ELSE B.vendorid 
										END) = O.vendorid 
						WHERE 1 = 1 
						AND (
								CASE 
									WHEN D.orde_iden_numb IS NOT NULL 
										THEN D.deli_stat_flag 
									WHEN C.orde_iden_numb IS NOT NULL 
										THEN C.purc_stat_flag 
									ELSE B.orde_stat_flag END
							) IN ('05', '10', '40', '50', '60', '69', '70', '80')
						AND A.CLIENTID = #{clientId}
						AND E.SALE_SEQU_NUMB IS NULL
						AND A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME,'2014-01-01') AND GETDATE()
						
						UNION ALL
						
						SELECT	0 AS PURC_CLIENT_AMOU
						,		SUM(
												(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_quan
														WHEN D.orde_iden_numb IS NOT NULL THEN D.deli_prod_quan
														WHEN C.orde_iden_numb IS NOT NULL THEN C.purc_requ_quan
														ELSE B.orde_requ_quan
												END) *
												(CASE	WHEN E.orde_iden_numb IS NOT NULL THEN E.sale_prod_pris
														WHEN C.orde_iden_numb IS NOT NULL THEN C.orde_requ_pric
														ELSE B.orde_requ_pric
												END)
											) AS PURC_BRANCH_AMOU
						,		0 AS RECE_CLIENT_AMOU
						,		0 AS RECE_BRANCH_AMOU
						,		0 AS RECENOT_CLIENT_AMOU
						,		0 AS RECENOT_BRANCH_AMOU
						FROM mrordm A WITH(NOLOCK) 
						INNER JOIN mrordt B WITH(NOLOCK) 
							ON A.orde_iden_numb = B.orde_iden_numb 
						LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
							ON B.orde_iden_numb = C.orde_iden_numb 
							AND B.orde_sequ_numb = C.orde_sequ_numb 
						LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
							ON C.orde_iden_numb = D.orde_iden_numb 
							AND C.orde_sequ_numb = D.orde_sequ_numb 
							AND C.purc_iden_numb = D.purc_iden_numb 
						LEFT OUTER JOIN mrordtlist E WITH(NOLOCK) 
							ON D.orde_iden_numb = E.orde_iden_numb 
							AND D.orde_sequ_numb = E.orde_sequ_numb 
							AND D.purc_iden_numb = E.purc_iden_numb 
							AND D.deli_iden_numb = E.deli_iden_numb 
						LEFT OUTER JOIN mcgood H WITH(NOLOCK) 
							ON B.good_iden_numb = H.good_iden_numb 
						LEFT OUTER JOIN SMPBRANCHS I WITH(NOLOCK) 
							ON A.branchid = I.BRANCHID 
						LEFT OUTER JOIN SMPWORKINFO P WITH(NOLOCK) 
							ON I.WORKID = P.WORKID 
						LEFT OUTER JOIN mcgoodvendor O WITH(NOLOCK) 
							ON (
									CASE 
										WHEN E.orde_iden_numb IS NOT NULL 
											THEN E.good_iden_numb 
										WHEN C.orde_iden_numb IS NOT NULL 
											THEN C.good_iden_numb 
										ELSE B.good_iden_numb 
									END	) = O.good_iden_numb 
							AND (
									CASE 
										WHEN E.orde_iden_numb IS NOT NULL 
											THEN E.vendorid 
										WHEN C.orde_iden_numb IS NOT NULL 
											THEN C.vendorid 
												ELSE B.vendorid 
										END) = O.vendorid 
						WHERE 1 = 1 
						AND (
								CASE 
									WHEN D.orde_iden_numb IS NOT NULL 
										THEN D.deli_stat_flag 
									WHEN C.orde_iden_numb IS NOT NULL 
										THEN C.purc_stat_flag 
									ELSE B.orde_stat_flag END
							) IN ('05', '10', '40', '50', '60', '69', '70', '80')
						AND A.BRANCHID = #{branchId}
						AND (E.SALE_SEQU_NUMB IS NULL OR E.SALE_SEQU_NUMB = '')
						AND A.REGI_DATE_TIME BETWEEN CONVERT(DATETIME,'2014-01-01') AND GETDATE()
						
						UNION ALL
						
						SELECT	0 AS PURC_CLIENT_AMOU
						,		0 AS PURC_BRANCH_AMOU
						,		SUM(A.sale_prod_amou) AS RECE_CLIENT_AMOU
						,		0 AS RECE_BRANCH_AMOU
						,		0 AS RECENOT_CLIENT_AMOU
						,		0 AS RECENOT_BRANCH_AMOU
						FROM mrordtlist A WITH(NOLOCK)
						LEFT OUTER JOIN mcgood B WITH(NOLOCK) 
							ON A.good_iden_numb = B.good_iden_numb 
						LEFT OUTER JOIN mssalm D WITH(NOLOCK) 
							ON A.sale_sequ_numb = D.sale_sequ_numb 
						LEFT OUTER JOIN MSBUYM I WITH(NOLOCK) 
							ON A.buyi_sequ_numb = I.buyi_sequ_numb 
						LEFT OUTER JOIN SMPBRANCHS E WITH(NOLOCK) 
							ON A.branchid = E.BRANCHID 
						LEFT OUTER JOIN SMPWORKINFO F WITH(NOLOCK) 
							ON E.WORKID = F.WORKID 
						LEFT OUTER JOIN mracpt G WITH(NOLOCK) 
							ON A.orde_iden_numb = G.orde_iden_numb 
							AND A.orde_sequ_numb = G.orde_sequ_numb 
							AND A.purc_iden_numb = G.purc_iden_numb 
							AND A.deli_iden_numb = G.deli_iden_numb 
						WHERE 1 = 1 
						AND A.CLIENTID = #{clientId}
						AND G.deli_stat_flag = '70'
						AND D.CLOS_SALE_DATE IS NULL
						
						UNION ALL
						
						SELECT	0 AS PURC_CLIENT_AMOU
						,		0 AS PURC_BRANCH_AMOU
						,		0 AS RECE_CLIENT_AMOU
						,		SUM(A.sale_prod_amou) AS RECE_BRANCH_AMOU
						,		0 AS NOTRECE_CLIENT_AMOU
						,		0 AS NOTRECE_BRANCH_AMOU
						FROM mrordtlist A WITH(NOLOCK)
						LEFT OUTER JOIN mcgood B WITH(NOLOCK) 
							ON A.good_iden_numb = B.good_iden_numb 
						LEFT OUTER JOIN mssalm D WITH(NOLOCK) 
							ON A.sale_sequ_numb = D.sale_sequ_numb 
						LEFT OUTER JOIN MSBUYM I WITH(NOLOCK) 
							ON A.buyi_sequ_numb = I.buyi_sequ_numb 
						LEFT OUTER JOIN SMPBRANCHS E WITH(NOLOCK) 
							ON A.branchid = E.BRANCHID 
						LEFT OUTER JOIN SMPWORKINFO F WITH(NOLOCK) 
							ON E.WORKID = F.WORKID 
						LEFT OUTER JOIN mracpt G WITH(NOLOCK) 
							ON A.orde_iden_numb = G.orde_iden_numb 
							AND A.orde_sequ_numb = G.orde_sequ_numb 
							AND A.purc_iden_numb = G.purc_iden_numb 
							AND A.deli_iden_numb = G.deli_iden_numb 
						WHERE 1 = 1 
						AND A.BRANCHID = #{branchId}  
						AND G.deli_stat_flag = '70'
						AND D.CLOS_SALE_DATE IS NULL
						
						UNION ALL
						
						SELECT	0 AS PURC_CLIENT_AMOU
						,		0 AS PURC_BRANCH_AMOU
						,		0 AS RECE_CLIENT_AMOU
						,		0 AS RECE_BRANCH_AMOU
						,		SUM(
										CASE
											WHEN D.orde_iden_numb IS NOT NULL
												THEN D.deli_prod_quan * C.orde_requ_pric
											ELSE (C.purc_requ_quan-C.deli_prod_quan) * C.orde_requ_pric
										END
									) AS RECENOT_CLIENT_AMOU
						,		0 AS RECENOT_BRANCH_AMOU
						FROM mrordm A WITH(NOLOCK) 
						INNER JOIN mrordt B WITH(NOLOCK) 
							ON A.orde_iden_numb = B.orde_iden_numb 
						LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
							ON B.orde_iden_numb = C.orde_iden_numb 
							AND B.orde_sequ_numb = C.orde_sequ_numb 
						LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
							ON C.orde_iden_numb = D.orde_iden_numb 
							AND C.orde_sequ_numb = D.orde_sequ_numb 
							AND C.purc_iden_numb = D.purc_iden_numb 
						WHERE A.CLIENTID = #{clientId} 
						AND (
								CASE 
									WHEN D.orde_iden_numb IS NOT NULL 
										THEN D.deli_stat_flag
									ELSE C.purc_stat_flag
								END
							) IN ('40', '50', '60')
						
						UNION ALL
						
						SELECT	0 AS PURC_CLIENT_AMOU
						,		0 AS PURC_BRANCH_AMOU
						,		0 AS RECE_CLIENT_AMOU
						,		0 AS RECE_BRANCH_AMOU
						,		0 AS RECENOT_CLIENT_AMOU
						,		SUM(
										CASE
											WHEN D.orde_iden_numb IS NOT NULL
												THEN D.deli_prod_quan * C.orde_requ_pric
											ELSE (C.purc_requ_quan-C.deli_prod_quan) * C.orde_requ_pric
										END
									) AS RECENOT_BRANCH_AMOU
						FROM mrordm A WITH(NOLOCK) 
						INNER JOIN mrordt B WITH(NOLOCK) 
							ON A.orde_iden_numb = B.orde_iden_numb 
						LEFT OUTER JOIN mrpurt C WITH(NOLOCK) 
							ON B.orde_iden_numb = C.orde_iden_numb 
							AND B.orde_sequ_numb = C.orde_sequ_numb 
						LEFT OUTER JOIN mracpt D WITH(NOLOCK) 
							ON C.orde_iden_numb = D.orde_iden_numb 
							AND C.orde_sequ_numb = D.orde_sequ_numb 
							AND C.purc_iden_numb = D.purc_iden_numb 
						WHERE A.BRANCHID = #{branchId}
						AND (
								CASE 
									WHEN D.orde_iden_numb IS NOT NULL 
										THEN D.deli_stat_flag
									ELSE C.purc_stat_flag
								END
							) IN ('40', '50', '60')
						
					)A
				)AA
				UNPIVOT(
					CONTENT FOR FLAG IN (
												PURC_CLIENT_AMOU
											,	PURC_BRANCH_AMOU
											,	RECE_CLIENT_AMOU
											,	RECE_BRANCH_AMOU
											,	RECENOT_CLIENT_AMOU
											,	RECENOT_BRANCH_AMOU
										)
				)AS UNPVT
			)AAA
		)AAAA
		GROUP BY AAAA.FLAG
	</select>
	
	<select id="managementBranchProductTop10List" resultType="java.util.HashMap">
		/* common.main.managementBranchProductTop10List*/
		SELECT	TOP 10 A.GOOD_IDEN_NUMB AS GOOD_IDEN_NUMB
		,		B.GOOD_NAME AS GOOD_NAME
		,		A.SALE_PROD_AMOU AS SALE_PROD_AMOU
		,		A.SALE_PROD_PRIS AS SALE_PROD_PRIS
		,		A.SALE_PROD_QUAN AS SALE_PROD_QUAN
		,		A.CLOS_SALE_DATE AS CLOS_SALE_DATE
		,		C.GOOD_SPEC_DESC AS GOOD_SPEC_DESC
		,		C.GOOD_ST_SPEC_DESC AS GOOD_ST_SPEC_DESC
		FROM(	
			SELECT	A.GOOD_IDEN_NUMB AS GOOD_IDEN_NUMB
			,		SUM(A.SALE_PROD_AMOU) AS SALE_PROD_AMOU
			,		SUM(A.SALE_PROD_PRIS) AS SALE_PROD_PRIS
			,		SUM(A.SALE_PROD_QUAN) AS SALE_PROD_QUAN
			,		MAX(B.CLOS_SALE_DATE) AS CLOS_SALE_DATE
			FROM MRORDTLIST A WITH(NOLOCK) 
			INNER JOIN MSSALM B WITH(NOLOCK) 
				ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
			WHERE B.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, SUBSTRING(CONVERT(VARCHAR,DATEADD(MONTH,-1 , GETDATE()),120),1,8)+'01') AND DATEADD(DAY,-1,CONVERT(DATETIME,CONVERT(VARCHAR(8),GETDATE(), 120)+'01'))
			AND A.BRANCHID = #{branchId}
			GROUP BY GOOD_IDEN_NUMB
		)A
		INNER JOIN MCGOOD B WITH(NOLOCK) 
			ON A.GOOD_IDEN_NUMB = B.GOOD_IDEN_NUMB
		INNER JOIN (
			SELECT	GOOD_IDEN_NUMB
			,		MAX(GOOD_SPEC_DESC) AS GOOD_SPEC_DESC
			,		MAX(GOOD_ST_SPEC_DESC) AS GOOD_ST_SPEC_DESC
			FROM MCGOODVENDOR WITH(NOLOCK) 
			GROUP BY GOOD_IDEN_NUMB
		)C
			ON B.GOOD_IDEN_NUMB = C.GOOD_IDEN_NUMB
		ORDER BY A.SALE_PROD_AMOU DESC
	</select>
	
	<select id="managementBranchSaleEbillList" resultType="java.util.HashMap">
		/* common.main.managementBranchSaleEbillList */
		WITH DATES AS (
			SELECT	CONVERT(DATE, CONVERT(VARCHAR(8),DATEADD(MONTH, -3, GETDATE()),120)+'01') AS VALUE
			UNION ALL
			SELECT	DATEADD(MONTH, 1, VALUE)
			FROM DATES
			WHERE DATEDIFF(DAY, VALUE, CONVERT(VARCHAR(8),DATEADD(MONTH, -1, GETDATE()),120)+'01') > 0
		)
		SELECT	A.VALUE
		,		SUBSTRING(A.VALUE,1,4)+' 년 '+SUBSTRING(A.VALUE,6,2)+' 월' AS FLAG
		,		ISNULL(B.SALE_TOTA_AMOU,0) AS CONTENT
		FROM(
			SELECT	CONVERT(VARCHAR(7), VALUE, 120) AS VALUE
			FROM DATES
		)A
		LEFT OUTER JOIN(
			SELECT	CONVERT(VARCHAR(7), CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
			,		SUM(SALE_TOTA_AMOU) AS SALE_TOTA_AMOU
			FROM MSSALM WITH(NOLOCK) 
			WHERE BRANCHID = #{branchId}
			AND (SAP_JOUR_NUMB IS NOT NULL OR SAP_JOUR_NUMB != '')
			GROUP BY CONVERT(VARCHAR(7), CLOS_SALE_DATE, 120)
		)B
			ON A.VALUE = CONVERT(VARCHAR(7), CLOS_SALE_DATE, 120)
		ORDER BY CONVERT(VARCHAR(7), A.VALUE, 120) DESC
	</select>
	
</mapper>