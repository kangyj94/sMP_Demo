<?xml version="1.0" encoding="euc-kr" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" 
		"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 

<mapper namespace="adjust">

<!-- 	정산생성 정산대상 목록 리스트 -->
	<select id="adjustGenerationList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustGenerationList */
		SELECT  ORDE_IDEN_NUMB
		,       ORDE_SEQU_NUMB
		,       ORDE_IDEN_NUMB + '-' + ORDE_SEQU_NUMB AS ORDER_NUM 
		,       PURC_IDEN_NUMB
		,       DELI_IDEN_NUMB
		,       RECE_IDEN_NUMB
		,       ORDE_TYPE_CLAS
		,       DBO.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,       A.GROUPID
		,       A.CLIENTID
		,       A.BRANCHID
		,		CONVERT(VARCHAR, ORDE_REGI_DATE, 23) AS ORDE_REGI_DATE
		,		CONVERT(VARCHAR, DELI_REGI_DATE, 23) AS DELI_REGI_DATE
		,		CONVERT(VARCHAR, RECE_REGI_DATE, 23) AS RECE_REGI_DATE
		,       DELI_AREA_CODE
		,       A.VENDORID
		,		DBO.FNS_BORG_STRING(A.VENDORID) AS VENDORNM
		,		B.BORGNM AS BRANCHNM
		,       CONS_IDEN_NAME
		,       DISP_GOOD_ID
		,       VTAX_CLAS_CODE
		,       CASE 
			    	WHEN VTAX_CLAS_CODE = '10' THEN SALE_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS SALE_PROD_TAX
		,       CASE 
			    	WHEN VTAX_CLAS_CODE = '10' THEN PURC_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS PURC_PROD_TAX	    	
		,       SALE_PROD_QUAN
		,       SALE_PROD_PRIS
		,       SALE_PROD_AMOU
		,       PURC_PROD_PRIS
		,       PURC_PROD_AMOU
		,       A.GOOD_IDEN_NUMB
		,       GOOD_NAME
		,       ORDE_USER_ID
		,       REAL_RECE_NUMB
		,       SALE_SEQU_NUMB
		,       BUYI_SEQU_NUMB
		,		ORG_BRANCHID
		,		DBO.FNS_BORGNAMEBYBORGID(ORG_BRANCHID) AS ORG_BRANCHNM
		,		C.USERNM AS ORDE_USER_NM
		,		D.GOOD_ST_SPEC_DESC
		,		D.GOOD_SPEC_DESC
		FROM 	MRORDTLIST A WITH(NOLOCK)
				LEFT OUTER JOIN
				SMPBORGS B WITH(NOLOCK)
				ON B.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
				LEFT OUTER JOIN 
				SMPUSERS C WITH(NOLOCK)
				ON A.ORDE_USER_ID = C.USERID
				LEFT OUTER JOIN 
				MCGOODVENDOR D WITH(NOLOCK)
				ON  A.GOOD_IDEN_NUMB = D.GOOD_IDEN_NUMB
				AND A.VENDORID = D.VENDORID	
		WHERE 	SALE_SEQU_NUMB IS NULL
	<if test="srcDate != null and srcDate != '' and srcDate == 'deli'">
		<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
		AND 	DELI_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))
		</if>
	</if>
	<if test="srcDate != null and srcDate != '' and srcDate == 'rece'">
		<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
		AND 	RECE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
		</if>
	</if>
	<if test="srcDate != null and srcDate != '' and srcDate == 'orde'">
		<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
		AND 	ORDE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
		</if>
	</if>
		<if test="srcConsIdenName != null and srcConsIdenName != ''">
		AND 	CONS_IDEN_NAME LIKE '%' + #{srcConsIdenName} + '%'
		</if>
		<if test="srcOrdeNumb != null and srcOrdeNumb != ''">
		AND 	ORDE_IDEN_NUMB LIKE '%' + #{srcOrdeNumb} + '%'
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND 	A.CLIENTID = #{srcClientId}
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND 	A.BRANCHID = #{srcBranchId}
		</if>
		<if test="srcOrderTypeCd != null and srcOrderTypeCd != ''">
		AND 	ORDE_TYPE_CLAS = #{srcOrderTypeCd}
		</if>
		<if test="srcTaxClasCd != null and srcTaxClasCd != ''">
		AND 	VTAX_CLAS_CODE = #{srcTaxClasCd}
		</if>
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND 	SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
		<if test="sale_sequ_numb == null and sale_sequ_numb == ''">
		AND 	SALE_SEQU_NUMB IS NULL
		</if>		
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND 	BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
		<if test="buyi_sequ_numb == null and buyi_sequ_numb == ''">
		AND 	BUYI_SEQU_NUMB IS NULL
		</if>		
		<if test="srcVendorId != null and srcVendorId != '' and srcVendorId neq '0'.toString()">
		AND 	A.VENDORID = #{srcVendorId}
		</if>
		<if test="srcGoodNm != null and srcGoodNm != ''">
		AND 	A.GOOD_NAME LIKE '%' + #{srcGoodNm} + '%'
		</if>		
	</select>
	
	<select id="adjustCreatList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustCreatList */
		SELECT  ORDE_IDEN_NUMB
		,       ORDE_SEQU_NUMB
		,       ORDE_IDEN_NUMB + '-' + ORDE_SEQU_NUMB AS ORDER_NUM 
		,       PURC_IDEN_NUMB
		,       DELI_IDEN_NUMB
		,       RECE_IDEN_NUMB
		,       ORDE_TYPE_CLAS
		,       dbo.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,       GROUPID
		,       CLIENTID
		,       BRANCHID
		,		CONVERT(VARCHAR, ORDE_REGI_DATE, 23) AS ORDE_REGI_DATE
		,		CONVERT(VARCHAR, DELI_REGI_DATE, 23) AS DELI_REGI_DATE
		,		CONVERT(VARCHAR, RECE_REGI_DATE, 23) AS RECE_REGI_DATE
		,       DELI_AREA_CODE
		,       VENDORID
		,       CONS_IDEN_NAME
		,       DISP_GOOD_ID
		,       VTAX_CLAS_CODE
		,       CASE 
			    	WHEN VTAX_CLAS_CODE = '10' THEN SALE_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS SALE_PROD_TAX
		,       CASE 
			    	WHEN VTAX_CLAS_CODE = '10' THEN PURC_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS PURC_PROD_TAX	    	
		,       SALE_PROD_QUAN
		,       SALE_PROD_PRIS
		,       SALE_PROD_AMOU
		,       PURC_PROD_PRIS
		,       PURC_PROD_AMOU
		,       GOOD_IDEN_NUMB
		,       GOOD_NAME
		,       ORDE_USER_ID
		,       REAL_RECE_NUMB
		,       SALE_SEQU_NUMB
		,       BUYI_SEQU_NUMB
		FROM 	MRORDTLIST WITH(NOLOCK)
		WHERE 	SALE_SEQU_NUMB IS NOT NULL
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND 	SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND 	BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
	</select>	
	

	<select id="adjustGenerationMasterList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustGenerationMasterList */	
		SELECT 	A.SALE_SEQU_NUMB
		,		A.SALE_SEQU_NAME
		,		A.CLIENTID
		,		A.BRANCHID
		,		D.BORGNM AS CLIENTNM  							
		,		A.SALE_REQU_AMOU
		,		A.SALE_TOTA_AMOU
		,		A.CREA_SALE_USERID 
		,		B.USERNM AS CREA_SALE_USERNM
		,		C.WORKID
		,		C.WORKNM
		,		dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',A.PAYM_COND_CODE) AS PAYCONDNM
		FROM 	MSSALM A WITH(NOLOCK)
				LEFT OUTER JOIN 
				(	
					SELECT	A1.WORKID
					, 		A2.WORKNM
					,		A1.BRANCHID
					,		A1.BRANCHNM
					FROM 	SMPBRANCHS A1 WITH(NOLOCK)
					,		SMPWORKINFO A2 WITH(NOLOCK)
					WHERE	A1.WORKID = A2.WORKID
				)C
				ON A.BRANCHID = C.BRANCHID		
				LEFT OUTER JOIN
				SMPBORGS D  WITH(NOLOCK)
				ON D.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
		,		SMPUSERS B WITH(NOLOCK)
		WHERE   A.CREA_SALE_USERID = B.USERID
		AND     SALE_CONF_DATE IS NULL
		AND		SALE_CONF_USERID IS NULL
		AND		CREATE_BORGID = #{create_borgid}
		<if test="create_userid != null and create_userid != ''">
		AND 	CREA_SALE_USERID = #{create_userid}
		</if>		
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>		
	</select>
	

	<select id="adjustGenerationMasterListForAll" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustGenerationMasterListForAll */	
		SELECT	MAX(AA.SALE_SEQU_NUMB) AS SALE_SEQU_NUMB
		,		AA.BRANCHID
		FROM
		(		
			SELECT 	CONVERT(BIGINT, A.SALE_SEQU_NUMB) AS SALE_SEQU_NUMB 
			,		A.BRANCHID
			FROM 	MSSALM A WITH(NOLOCK)
			WHERE   A.SALE_CONF_DATE IS NULL
			AND		A.SALE_CONF_USERID IS NULL
			AND		A.CREATE_BORGID = #{create_borgid}
			<if test="create_userid != null and create_userid != ''">
			AND 	A.CREA_SALE_USERID = #{create_userid}
			</if>	
		)AA
		GROUP BY AA.BRANCHID
	</select>
	
	<insert id="insertAdjustMaster">
		/* adjust.insertAdjustMaster */	
		INSERT INTO MSSALM(
			  SALE_SEQU_NUMB
			, CLIENTID
			, BRANCHID
			, SALE_SEQU_NAME
			, CREA_SALE_USERID
			, crea_sale_date
			, SALE_REQU_AMOU
			, SALE_REQU_VTAX
			, SALE_TOTA_AMOU
			, PAYM_COND_CODE
			, TRAN_STAT_FLAG	
			, CREATE_BORGID	
			, TRANSFER_STATUS
		)VALUES(
			  #{sale_sequ_numb}
			, #{clientId}
			, #{branchId}
			, #{sale_sequ_name}
			, #{crea_sale_userid}
			, #{crea_sale_date}
			, 0
			, 0
			, 0
			, #{paym_cond_code}
			, '0'	
			, #{create_borgid}
			, '1'
		)	
	</insert>
	
	<insert id="insertAdjustMasterAll">
		/* adjust.insertAdjustMasterAll */	
		INSERT INTO MSSALM
		(
			  SALE_SEQU_NUMB
			, CLIENTID
			, BRANCHID
			, SALE_SEQU_NAME
			, CREA_SALE_USERID
			, crea_sale_date
			, SALE_REQU_AMOU
			, SALE_REQU_VTAX
			, SALE_TOTA_AMOU
			, PAYM_COND_CODE
			, TRAN_STAT_FLAG	
			, CREATE_BORGID	
			, TRANSFER_STATUS
		)
			SELECT	(select NEXT_ID from SMP_SEQUENCE where TABLE_NAME = 'SEQ_MSSALM') + Row_Number()OVER(order by B.BRANCHID)-1
			,		A.CLIENTID
			,		B.BRANCHID
			,		CONVERT(VARCHAR(8), GETDATE(), 112) + '_' +B.BRANCHNM 
			,		#{userId}
			,		GETDATE()
			,		SUM(D.SALE_PROD_AMOU)
			,		CASE
						WHEN MAX(D.VTAX_CLAS_CODE) = '10' THEN FLOOR(SUM(D.SALE_PROD_AMOU) * 0.1)
						ELSE 0
					END	
			,		SUM(D.SALE_PROD_AMOU) +	(CASE
												WHEN MAX(D.VTAX_CLAS_CODE) = '10' THEN FLOOR(SUM(D.SALE_PROD_AMOU) * 0.1)
												ELSE 0
											END)	
			,		MAX(B.PAYBILLTYPE)
			,		'0'
			,		#{create_borgid}		
			,		'1'
			FROM	SMPBORGS A
			,		SMPBRANCHS B
			,		SMPWORKINFO C
			,		MRORDTLIST D
			WHERE 	A.BORGID = B.BRANCHID
			AND		B.WORKID = C.WORKID
			AND		C.USERID = #{userId}
			AND 	A.BORGID = D.BRANCHID
			AND 	C.IS_SKTS_MANAGE = '1'
			AND		D.SALE_SEQU_NUMB IS NULL
		<if test="srcDate != null and srcDate != '' and srcDate == 'deli'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	D.DELI_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))
			</if>
		</if>
		<if test="srcDate != null and srcDate != '' and srcDate == 'rece'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	D.RECE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
			</if>
		</if>
		<if test="srcDate != null and srcDate != '' and srcDate == 'orde'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	D.ORDE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
			</if>
		</if>
			GROUP BY A.CLIENTID, B.BRANCHID, B.BRANCHNM		
	</insert>
	
	<update id="updateSequenceToSaleMaster">
		UPDATE	SMP_SEQUENCE SET
		NEXT_ID = (SELECT MAX(CONVERT(INT, SALE_SEQU_NUMB)) + 1 FROM MSSALM)
		WHERE TABLE_NAME = 'SEQ_MSSALM'
	</update>
	
	<update id="addAdjustCreatList">
		/* adjust.addAdjustCreatList */	
		UPDATE MRORDTLIST SET
		SALE_SEQU_NUMB = #{sale_sequ_numb}
		${subQuery}
	</update>

	<update id="updateAdjustCreatListForAll">
		/* adjust.updateAdjustCreatListForAll */	
		UPDATE MRORDTLIST SET
			SALE_SEQU_NUMB = #{sale_sequ_numb}
			WHERE BRANCHID = #{branchId}
			AND	  SALE_SEQU_NUMB IS NULL		  
		<if test="srcDate != null and srcDate != '' and srcDate == 'deli'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	DELI_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))
			</if>
		</if>
		<if test="srcDate != null and srcDate != '' and srcDate == 'rece'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	RECE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
			</if>
		</if>
		<if test="srcDate != null and srcDate != '' and srcDate == 'orde'">
			<if test="srcStatDate != null and srcStatDate != '' and srcEndDate != null and srcEndDate != ''">
			AND 	ORDE_REGI_DATE BETWEEN CONVERT(DATETIME, #{srcStatDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcEndDate}))	
			</if>
		</if>
	</update>
	
	<update id="updMrordtListForDivision">
		/* adjust.updMrordtListForDivision */	
		UPDATE MRORDTLIST SET
				SALE_PROD_QUAN = #{sale_prod_quan}
		,		SALE_PROD_AMOU = SALE_PROD_PRIS * #{sale_prod_quan}
		,		PURC_PROD_AMOU = PURC_PROD_PRIS * #{sale_prod_quan}
		WHERE	ORDE_IDEN_NUMB = #{orde_iden_numb}
		AND 	ORDE_SEQU_NUMB = #{orde_sequ_numb}
		AND 	PURC_IDEN_NUMB = #{purc_iden_numb}
		AND 	DELI_IDEN_NUMB = #{deli_iden_numb}
		AND 	RECE_IDEN_NUMB = #{rece_iden_numb}
		AND     SALE_SEQU_NUMB IS NULL
        <![CDATA[
        AND     SALE_PROD_QUAN > CONVERT(INT, #{sale_prod_quan})
        ]]>
	</update>
	
	<insert id="insMrordtListForDivision">
		/* adjust.insMrordtListForDivision */	
		INSERT INTO MRORDTLIST 
		(		ORDE_IDEN_NUMB
		,	    ORDE_SEQU_NUMB
		,	    PURC_IDEN_NUMB
		,	    DELI_IDEN_NUMB
		,	    RECE_IDEN_NUMB
		,	    ORDE_TYPE_CLAS
		,	    GROUPID
		,	    CLIENTID
		,	    BRANCHID
		,	    ORDE_REGI_DATE
		,	    DELI_REGI_DATE
		,	    RECE_REGI_DATE
		,	    DELI_AREA_CODE
		,	    VENDORID
		,	    CONS_IDEN_NAME
		,	    DISP_GOOD_ID
		,	    VTAX_CLAS_CODE
		,	    SALE_PROD_QUAN
		,	    SALE_PROD_PRIS
		,	    SALE_PROD_AMOU
		,	    PURC_PROD_PRIS
		,	    PURC_PROD_AMOU
		,	    GOOD_IDEN_NUMB
		,	    GOOD_NAME
		,	    ORDE_USER_ID
		,	    REAL_RECE_NUMB
		,	    SALE_SEQU_NUMB
		,	    BUYI_SEQU_NUMB)
        SELECT
			    ORDE_IDEN_NUMB
		,	    ORDE_SEQU_NUMB
		,	    PURC_IDEN_NUMB
		,	    DELI_IDEN_NUMB
		,	   (SELECT 	MAX(CONVERT(INT, RECE_IDEN_NUMB)) + 1 
				FROM 	MRORDTLIST 		
				WHERE	ORDE_IDEN_NUMB = #{orde_iden_numb}
				AND 	ORDE_SEQU_NUMB = #{orde_sequ_numb}
				AND 	PURC_IDEN_NUMB = #{purc_iden_numb}
				AND 	DELI_IDEN_NUMB = #{deli_iden_numb})
		,	    ORDE_TYPE_CLAS
		,	    GROUPID
		,	    CLIENTID
		,	    BRANCHID
		,	    ORDE_REGI_DATE
		,	    DELI_REGI_DATE
		,	    RECE_REGI_DATE
		,	    DELI_AREA_CODE
		,	    VENDORID
		,	    CONS_IDEN_NAME
		,	    DISP_GOOD_ID
		,	    VTAX_CLAS_CODE
		,	    SALE_PROD_QUAN - CONVERT(INT, #{sale_prod_quan})
		,	    SALE_PROD_PRIS 
		,	    SALE_PROD_PRIS * (SALE_PROD_QUAN - CONVERT(INT, #{sale_prod_quan}))
		,	    PURC_PROD_PRIS
		,	    PURC_PROD_PRIS * (SALE_PROD_QUAN - CONVERT(INT, #{sale_prod_quan})) 
		,	    GOOD_IDEN_NUMB
		,	    GOOD_NAME
		,	    ORDE_USER_ID
		,	    REAL_RECE_NUMB
		,	    SALE_SEQU_NUMB
		,	    BUYI_SEQU_NUMB
		FROM	MRORDTLIST
		WHERE	ORDE_IDEN_NUMB = #{orde_iden_numb}
		AND 	ORDE_SEQU_NUMB = #{orde_sequ_numb}
		AND 	PURC_IDEN_NUMB = #{purc_iden_numb}
		AND 	DELI_IDEN_NUMB = #{deli_iden_numb}
		AND 	RECE_IDEN_NUMB = #{rece_iden_numb}
		AND     SALE_SEQU_NUMB IS NULL
		<![CDATA[
		AND     SALE_PROD_QUAN > CONVERT(INT, #{sale_prod_quan})
		]]>
	</insert>

	<update id="removeAdjustCreatList">
		/* adjust.removeAdjustCreatList */	
		UPDATE MRORDTLIST SET
		SALE_SEQU_NUMB = NULL
		${subQuery}
	</update>
	
	<update id="updateMssalmAmou">
		/* adjust.updateMssalmAmou */	
		UPDATE MSSALM SET
				SALE_REQU_AMOU = #{sale_requ_amou}
		,		SALE_REQU_VTAX = #{sale_requ_vtax}
		,		SALE_TOTA_AMOU = #{sale_tota_amou}
		WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}	
	</update>
	
	<delete id="delAdjustMaster">
		/* adjust.delAdjustMaster */	
		DELETE FROM MSSALM WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}
	</delete>
	
	<update id="updateAdjustCreatList">
		/* adjust.updateAdjustCreatList */	
		UPDATE MRORDTLIST SET
		SALE_SEQU_NUMB = NULL
		WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}
	</update>
	
	<sql id="adjustSalesConfirmListSql">
		(
		SELECT 	SALE_SEQU_NUMB
		,		A.CLIENTID
		,		B.BORGNM AS CLIENTNM
		,		SALE_SEQU_NAME
		,		CREA_SALE_USERID
		,		CONVERT(VARCHAR(10), CREA_SALE_DATE, 120) AS CREA_SALE_DATE
		,		SALE_REQU_AMOU
		,		SALE_REQU_VTAX
		,		SALE_TOTA_AMOU
		,		CASE
					WHEN SALE_CONF_DATE IS NULL THEN '정산생성'
					WHEN SAP_JOUR_NUMB IS NULL THEN '매출확정'
					WHEN SAP_JOUR_NUMB IS NOT NULL THEN '매출전송'
				END AS SALE_STATUS_NAME

		,		CASE
					WHEN SALE_CONF_DATE IS NULL THEN '10'
					WHEN SAP_JOUR_NUMB IS NULL THEN '20'
					WHEN SAP_JOUR_NUMB IS NOT NULL THEN '30'
				END AS SALE_STATUS_CODE
		,		CONVERT(VARCHAR(10), SALE_CONF_DATE, 120) AS SALE_CONF_DATE
		,		SAP_JOUR_NUMB	
		,		CREATE_BORGID		
		,		(SELECT COUNT(1) FROM MRORDTLIST A1 WITH(NOLOCK) WHERE A1.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB AND BUYI_SEQU_NUMB IS NOT NULL) AS BUYI_CONF_CNT
		FROM 	MSSALM A WITH(NOLOCK)
				LEFT OUTER JOIN
				SMPBORGS B WITH(NOLOCK)
				ON B.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
		)A
	WHERE	CREATE_BORGID = #{create_borgid}
<!-- 	AND 	SALE_TOTA_AMOU != 0 	 -->
	<if test="srcCreatStartDate != null and srcCreatStartDate != '' and srcCreatEndDate != null and srcCreatEndDate != ''">
	AND 	CREA_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcCreatStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcCreatEndDate}))
	</if>
	<if test="srcSaleStatus != null and srcSaleStatus != ''">
	AND 	SALE_STATUS_CODE = #{srcSaleStatus}
	</if>
	<if test="srcSaleNm != null and srcSaleNm != ''">
	AND 	SALE_SEQU_NAME LIKE '%' + #{srcSaleNm} + '%'
	</if>
	<if test="srcBranchNm != null and srcBranchNm != ''">
	AND 	CLIENTNM LIKE '%' + #{srcBranchNm} + '%'
	</if>		
	<if test="srcAccUser != null and srcAccUser != ''">
	AND 	CREA_SALE_USERID = #{srcAccUser}
	</if>		
	</sql>
	
	<select id="adjustSalesConfirmListCnt" resultType="int">
		/* adjust.adjustSalesConfirmListCnt */
		SELECT  COUNT(1)
		FROM 	
		<include refid="adjustSalesConfirmListSql"/>
	</select>		
	
	<select id="adjustSalesConfirmList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustSalesConfirmList */	
		SELECT  A.*
		FROM 	
		<include refid="adjustSalesConfirmListSql"/>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>		
	</select>
	
	<select id="adjustSalesConfirmDetailListCnt" resultType="int">
		SELECT  COUNT(1)
		FROM 	MRORDTLIST A WITH(NOLOCK)
		,		MRORDT B WITH(NOLOCK)
		WHERE 	A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
		AND     A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
		AND     A.SALE_SEQU_NUMB = #{sale_sequ_numb}	
		<if test="srcOrdeNumb != null and srcOrdeNumb != ''">
		AND 	A.ORDE_IDEN_NUMB LIKE '%' + #{srcOrdeNumb} + '%'
		</if>		
	</select>		
	
	<select id="adjustSalesConfirmDetailList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustSalesConfirmDetailList **/
		SELECT  A.ORDE_IDEN_NUMB
		,       A.ORDE_SEQU_NUMB
		,       A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDER_NUM 
		,       A.PURC_IDEN_NUMB
		,       A.DELI_IDEN_NUMB
		,       A.RECE_IDEN_NUMB
		,       A.ORDE_TYPE_CLAS
		,       dbo.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',A.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,       A.GROUPID
		,       A.CLIENTID
		,       A.BRANCHID
		,		C.BORGNM AS BRANCHNM
		,		CONVERT(VARCHAR, A.ORDE_REGI_DATE, 23) AS ORDE_REGI_DATE
		,		CONVERT(VARCHAR, A.DELI_REGI_DATE, 23) AS DELI_REGI_DATE
		,		CONVERT(VARCHAR, A.RECE_REGI_DATE, 23) AS RECE_REGI_DATE
		,       A.DELI_AREA_CODE
		,       A.VENDORID
		,       A.CONS_IDEN_NAME
		,       A.DISP_GOOD_ID
		,       A.VTAX_CLAS_CODE
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN A.SALE_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS SALE_PROD_TAX
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN (A.SALE_PROD_AMOU * 0.1) + A.SALE_PROD_AMOU
		          	ELSE A.SALE_PROD_AMOU 
			    END AS SALE_TOTA_AMOU	    
			    
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN A.PURC_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS PURC_PROD_TAX
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN (A.PURC_PROD_AMOU * 0.1) + A.PURC_PROD_AMOU
		          	ELSE A.PURC_PROD_AMOU 
			    END AS PURC_TOTA_AMOU 
		,       A.SALE_PROD_QUAN
		,       A.SALE_PROD_PRIS
		,       A.SALE_PROD_AMOU
		,       A.PURC_PROD_PRIS
		,       A.PURC_PROD_AMOU
		,       A.GOOD_IDEN_NUMB
		,       A.GOOD_NAME
		,       A.ORDE_USER_ID
		,       A.REAL_RECE_NUMB
		,       A.SALE_SEQU_NUMB
		,       A.BUYI_SEQU_NUMB
		,		B.ORDE_REQU_QUAN
		,		D.VENDORNM AS VENDORNM
		,		E.GOOD_SPEC_DESC
		,		E.GOOD_ST_SPEC_DESC
		FROM 	MRORDTLIST A WITH(NOLOCK)
		LEFT OUTER JOIN MCGOODVENDOR E WITH(NOLOCK)
			ON	A.good_iden_numb = E.good_iden_numb
			AND	A.vendorid = E.vendorid
		LEFT OUTER JOIN SMPBORGS C WITH(NOLOCK)
			ON C.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
		LEFT OUTER JOIN SMPVENDORS D WITH(NOLOCK)
			ON A.VENDORID = D.VENDORID
		,		MRORDT B WITH(NOLOCK)
		WHERE 	A.ORDE_IDEN_NUMB = B.ORDE_IDEN_NUMB
		AND     A.ORDE_SEQU_NUMB = B.ORDE_SEQU_NUMB
		AND     A.SALE_SEQU_NUMB = #{sale_sequ_numb}	
		<if test="srcOrdeNumb != null and srcOrdeNumb != ''">
		AND 	A.ORDE_IDEN_NUMB LIKE '%' + #{srcOrdeNumb} + '%'
		</if>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>				
	</select>
	
	<update id="modAdjustConfirm">
		UPDATE MSSALM SET
		<if test="oper != null and oper != '' and oper == 'add'">
			SALE_CONF_DATE = GETDATE()
		,	SALE_CONF_USERID = #{userId}
		</if>
		<if test="oper != null and oper != '' and oper == 'mod'">
			SALE_CONF_DATE = NULL
		,	SALE_CONF_USERID = NULL
		</if>		
		<foreach item="item" collection="sale_sequ_numb_Arr" open=" WHERE SALE_SEQU_NUMB IN (" separator="," close=")">
				#{item}
		</foreach>
		<if test="oper != null and oper != '' and oper == 'mod'">
		AND 	NOT EXISTS (	SELECT 1 FROM MRORDTLIST A1 WHERE A1.BUYI_SEQU_NUMB IS NOT NULL
								<foreach item="item" collection="sale_sequ_numb_Arr" open=" AND A1.SALE_SEQU_NUMB IN (" separator="," close=")">
										#{item}
								</foreach>								
							)
		</if>
	</update>
	
	<select id="selectAdjustConfirmCnt" resultType="int">
	    /** adjust.selectAdjustConfirmCnt **/
        select  count(1)
        from    MSSALM WITH(NOLOCK)
        where   1 = 1
        <if test="oper != null and oper != '' and oper == 'add'">
        and     (SALE_CONF_DATE is not null or sap_jour_numb is not null)
        </if>
        <if test="oper != null and oper != '' and oper == 'mod'">
        and     (SALE_CONF_DATE is null or sap_jour_numb is not null)
        </if>
        <foreach item="item" collection="sale_sequ_numb_Arr" open=" and SALE_SEQU_NUMB IN (" separator="," close=")">
                #{item}
        </foreach>
    </select>
    
    <select id="selectAdjustBuyConfirmCnt" resultType="int">
        /** adjust.selectAdjustBuyConfirmCnt **/
        select  count(1)
        from    mrordtlist a with(nolock)
        <foreach item="item" collection="sale_sequ_numb_Arr" open=" where a.SALE_SEQU_NUMB IN (" separator="," close=")">
                #{item}
        </foreach>
        and     a.buyi_sequ_numb is not null
    </select>
	
	<sql id="adjustPurcConfirmListSql">
	(
		SELECT	B.vendorid
		,       MAX(A.SALE_SEQU_NUMB) AS SALE_SEQU_NUMB
		,       MAX(B.BUYI_SEQU_NUMB) AS BUYI_SEQU_NUMB
		,		C.VENDORNM
		,		SUM(B.purc_prod_amou) AS purc_prod_amou
		,		MAX(B.vtax_clas_code) AS vtax_clas_code
		,		(CASE	WHEN MAX(B.vtax_clas_code) = '10' THEN FLOOR(SUM(B.purc_prod_amou) * 0.1)
						ELSE 0 
				END) AS PURC_PROD_TAX
		,		CONVERT(VARCHAR, MAX(A.CREA_SALE_DATE), 23) AS CREA_SALE_DATE
		,		MAX(A.SAP_JOUR_NUMB) AS SAP_JOUR_NUMB
		,		(CASE	WHEN MAX(B.BUYI_SEQU_NUMB) IS NULL THEN '10'
						WHEN MAX(B.BUYI_SEQU_NUMB) IS NOT NULL THEN '20'
				END) AS PURC_STATUS_CODE
		,		MAX(C.PAYBILLTYPE) AS PAYBILLTYPE
		,       dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(C.PAYBILLTYPE)) AS PAYBILLTYPENM
		FROM	mssalm A WITH(NOLOCK)
		INNER JOIN 
		(
			SELECT * FROM mrordtlist B WITH(NOLOCK)
			WHERE NOT EXISTS
			(
			SELECT 1 FROM mrordtlist D WITH(NOLOCK)
			WHERE B.orde_iden_numb = D.orde_iden_numb AND B.orde_sequ_numb = D.orde_sequ_numb
			AND ((orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '1')OR(orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '3'))
			)
		) B
				ON	A.sale_sequ_numb = B.sale_sequ_numb
		INNER JOIN SMPVENDORS C WITH(NOLOCK)
				ON	B.vendorid = C.VENDORID
		WHERE	B.buyi_sequ_numb IS NULL
		AND		A.CREATE_BORGID = #{create_borgid}
		AND		A.SALE_CONF_DATE IS NOT NULL
		AND		B.SALE_SEQU_NUMB IS NOT NULL
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND		C.VENDORNM LIKE '%' + #{srcVendorNm} + '%'
		</if>
		GROUP BY B.vendorid, C.VENDORNM
		<if test="srcCreatStartDate != null and srcCreatStartDate != '' and srcCreatEndDate != null and srcCreatEndDate != ''">
		HAVING MAX(A.CREA_SALE_DATE) BETWEEN CONVERT(DATETIME, #{srcCreatStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcCreatEndDate}))
		</if>
	)AA
	</sql>	
	
	
	<select id="adjustPurcConfirmListCnt" resultType="int">
		/* adjust.adjustPurcConfirmListCnt */
		SELECT 	COUNT(1) FROM 	  		  
		<include refid="adjustPurcConfirmListSql"/>
	</select>	

	<select id="adjustPurcConfirmList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustPurcConfirmList */	
		SELECT	AA.*
		,		(AA.purc_prod_amou + PURC_PROD_TAX) AS buyi_tota_amou
		FROM 
		<include refid="adjustPurcConfirmListSql"/>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>	
	</select>
	
	<select id="adjustPurcConfirmDetailList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustPurcConfirmDetailList */
		SELECT  A.ORDE_IDEN_NUMB
		,       A.ORDE_SEQU_NUMB
		,       A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDER_NUM 
		,       A.PURC_IDEN_NUMB
		,       A.DELI_IDEN_NUMB
		,       A.RECE_IDEN_NUMB
		,       A.ORDE_TYPE_CLAS
		,       dbo.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',A.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,       A.GROUPID
		,       A.CLIENTID
		,       A.BRANCHID
		,		CONVERT(VARCHAR, A.ORDE_REGI_DATE, 23) AS ORDE_REGI_DATE
		,		CONVERT(VARCHAR, A.DELI_REGI_DATE, 23) AS DELI_REGI_DATE
		,		CONVERT(VARCHAR, A.RECE_REGI_DATE, 23) AS RECE_REGI_DATE
		,       A.DELI_AREA_CODE
		,       A.VENDORID
		,       A.CONS_IDEN_NAME
		,       A.DISP_GOOD_ID
		,       A.VTAX_CLAS_CODE
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN FLOOR(A.SALE_PROD_AMOU * 0.1)
		          	ELSE 0 
			    END AS SALE_PROD_TAX
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN FLOOR(A.PURC_PROD_AMOU * 0.1)
		          	ELSE 0 
			    END AS PURC_PROD_TAX	    	
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN FLOOR(A.PURC_PROD_AMOU * 0.1) + FLOOR(A.PURC_PROD_AMOU)
		          	ELSE FLOOR(A.PURC_PROD_AMOU) 
			    END AS BUYI_TOTA_AMOU
		,       A.SALE_PROD_QUAN
		,       A.SALE_PROD_PRIS
		,       A.SALE_PROD_AMOU
		,       A.PURC_PROD_PRIS
		,       A.PURC_PROD_AMOU
		,       A.GOOD_IDEN_NUMB
		,       A.GOOD_NAME
		,       A.ORDE_USER_ID
		,       A.REAL_RECE_NUMB
		,       A.SALE_SEQU_NUMB
		,       A.BUYI_SEQU_NUMB
		,		E.GOOD_SPEC_DESC
		,		E.GOOD_ST_SPEC_DESC
		FROM 	(
                    SELECT * FROM mrordtlist B WITH(NOLOCK)
                    WHERE NOT EXISTS
                    (
                    SELECT 1 FROM mrordtlist D WITH(NOLOCK)
                    WHERE
                        B.orde_iden_numb = D.orde_iden_numb AND B.orde_sequ_numb = D.orde_sequ_numb
                    AND
                        ((orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '1')
                    OR    (orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '3'))
                    )
		) A
		LEFT OUTER JOIN MCGOODVENDOR E WITH(NOLOCK)
			ON	A.good_iden_numb = E.good_iden_numb
			AND	A.vendorid = E.vendorid
		, 		MSSALM B WITH(NOLOCK)
		WHERE	1 = 1
		AND		A.VENDORID = #{vendorId}
		AND		A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		AND     B.SALE_CONF_DATE IS NOT NULL
		AND		B.CREATE_BORGID = #{create_borgid}
		<if test="srcPurcStatus != null and srcPurcStatus != '' and srcPurcStatus == '10'">
		AND 	A.BUYI_SEQU_NUMB IS NULL
		</if>
		<if test="srcPurcStatus != null and srcPurcStatus != '' and srcPurcStatus == '20'">
		AND 	A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
		<if test="srcOrdeNumb != null and srcOrdeNumb != ''">
		AND 	A.ORDE_IDEN_NUMB LIKE '%' + #{srcOrdeNumb} + '%'
		</if>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>
	</select>
	
	<insert id="insertMsBuyM">
		/* adjust.insertMsBuyM */
		INSERT INTO MSBUYM(
			  BUYI_SEQU_NUMB
			, VENDORID
			, BUYI_CONF_USERID
			, BUYI_CONF_DATE
			, BUYI_REQU_AMOU
			, BUYI_REQU_VTAX
			, BUYI_TOTA_AMOU
			, PAYM_COND_CODE
			, TRAN_STAT_FLAG
			, CREATE_BORGID	
		)VALUES(
			  #{buyi_sequ_numb}
			, #{vendorId}
			, #{userId}
			, GETDATE()
			, #{buyi_requ_amou}
			, #{buyi_requ_vtax}
			, #{buyi_tota_amou}
			, #{paym_cond_code}
			, '0'
			, #{create_borgid}
		)	
	</insert>
	
	<update id="addPurcDetailList_bak" >
		/* adjust.addPurcDetailList */
		UPDATE MRORDTLIST SET
		BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		FROM MRORDTLIST A
		,	 MSSALM B
		WHERE A.SALE_SEQU_NUMB IS NOT NULL
		AND   A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		AND   A.BUYI_SEQU_NUMB IS NULL
		AND   B.CREATE_BORGID = #{create_borgid}
		<foreach item="item" collection="vendorIdArr" open=" AND A.VENDORID IN (" separator="," close=")">
				#{item}
		</foreach>		
		AND   B.SALE_CONF_DATE IS NOT NULL
	</update>
	
	<update id="addPurcDetailList" >
		/* adjust.addPurcDetailList */
		UPDATE MRORDTLIST SET
		BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		<include refid="selectPurcDetailListSql"/>
	</update>
	<sql id="selectPurcDetailListSql">
		FROM		MRORDTLIST A WITH(NOLOCK) 
		,			MSSALM B WITH(NOLOCK)
		WHERE A.SALE_SEQU_NUMB IS NOT NULL
		AND A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		AND A.BUYI_SEQU_NUMB IS NULL
		AND B.CREATE_BORGID = #{create_borgid}
		AND A.VENDORID = #{vendorId}
		AND B.SALE_CONF_DATE IS NOT NULL
<!-- 	사이몬 관련 주문 예외 처리 -->
		AND NOT ((orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '1') OR (orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '3'))
	</sql>
	<select id="selectPurcConfirmSum" resultType="string">
	    /* adjust.selectPurcConfirmSum */
	   SELECT  SUM(A.purc_prod_amou)
	   <include refid="selectPurcDetailListSql"/>
    </select>
	
	<select id="adjustPurcCancelListCnt" resultType="int">
		/* adjust.adjustPurcCancelListCnt */
		SELECT	COUNT(1)
		FROM MSBUYM A WITH(NOLOCK)
		INNER JOIN SMPVENDORS B WITH(NOLOCK)
			ON A.VENDORID = B.VENDORID
		WHERE A.BUYI_SEQU_NUMB IS NOT NULL
		AND A.CREATE_BORGID = #{create_borgid}
		AND A.SAP_JOUR_NUMB IS NULL
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND B.VENDORNM LIKE '%'+#{srcVendorNm}+'%'
		</if>
	</select>
	
	<select id="adjustPurcCancelList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustPurcCancelList */
		SELECT  A.BUYI_SEQU_NUMB
		,       A.VENDORID
		,       B.VENDORNM
		,       A.BUYI_CONF_USERID
		,		CONVERT(VARCHAR, A.BUYI_CONF_DATE, 23) AS CREA_SALE_DATE
		,		CONVERT(VARCHAR, A.CLOS_BUYI_DATE, 23) AS CLOS_BUYI_DATE
		,       A.BUYI_REQU_AMOU AS PURC_PROD_AMOU
		,       A.BUYI_REQU_VTAX AS purc_prod_tax
		,       A.BUYI_TOTA_AMOU
		,       A.SAP_JOUR_NUMB
		,		CONVERT(VARCHAR, A.EXPIRATION_DATE, 23) AS EXPIRATION_DATE
		,       A.TRAN_SAP_JOUR_DATE
		,       A.TRAN_USER_ID
		,       A.PAY_AMOU_NUMB
		,       A.PAY_AMOU
		,       A.TRAN_STAT_FLAG
		,       B.PAYBILLTYPE AS PAYBILLTYPE
		,       dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',B.PAYBILLTYPE) AS PAYBILLTYPENM 
		FROM 	MSBUYM A WITH(NOLOCK)
		,		SMPVENDORS B WITH(NOLOCK)
		WHERE A.VENDORID = B.VENDORID
		AND A.BUYI_SEQU_NUMB IS NOT NULL
		AND A.CREATE_BORGID = #{create_borgid}
		AND A.SAP_JOUR_NUMB IS NULL
		AND A.BUYI_SEQU_NUMB != '39150'
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND B.VENDORNM LIKE '%'+#{srcVendorNm}+'%'
		</if>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>
	</select>
	
	<delete id="deleteMsBuyM">
		/* adjust.deleteMsBuyM */
		DELETE FROM MSBUYM WHERE BUYI_SEQU_NUMB
		<foreach item="item" collection="buyi_sequ_numb_Arr" open="  IN (" separator="," close=")">
			#{item}
		</foreach>		
	</delete>
	
	<update id="modPurcDetailList" >
		/* adjust.modPurcDetailList */
		UPDATE MRORDTLIST SET
		BUYI_SEQU_NUMB = NULL
		WHERE SALE_SEQU_NUMB IS NOT NULL
		<foreach item="item" collection="buyi_sequ_numb_Arr" open=" AND buyi_sequ_numb IN (" separator="," close=")">
			#{item}
		</foreach>		
	</update>
	
	<select id="adjustBalanceListCnt" resultType="int">
		SELECT 	DATEDIFF(	MONTH
						,	CONVERT(DATETIME, #{srcConfStartDate} + '01')
						,	DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfEndDate} + '01'))
						)
	</select>

	<select id="adjustBalanceList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustBalanceList */
		SELECT 	AA.*
		FROM
		(
			SELECT	XX.SALE_CONF_DATE
			,		SUM(SALE_PROD_AMOU) AS SALE_PROD_AMOU
			,		SUM(SALE_PROD_QUAN) AS SALE_PROD_QUAN
			,		SUM(BUYI_PROD_AMOU) AS BUYI_PROD_AMOU
			,		SUM(BUYI_PROD_QUAN) AS BUYI_PROD_QUAN
			,		CASE
						WHEN CONVERT(INT, SUM(SALE_PROD_QUAN)) - CONVERT(INT, SUM(BUYI_PROD_QUAN)) = 0 THEN 'N'
						ELSE 'Y'
					END AS DESCYN
			FROM
			(
				SELECT	SALE_SEQU_NUMB
				,		AA.ADJUST_CONF_DATE AS SALE_CONF_DATE
				,		MAX(AA.SALE_TOTA_AMOU) AS SALE_PROD_AMOU
				,		SUM(AA.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		SUM(AA.BUYI_PROD_AMOU) AS BUYI_PROD_AMOU
				,		SUM(AA.BUYI_PROD_QUAN) AS BUYI_PROD_QUAN
				FROM
				(
					SELECT	B.SALE_SEQU_NUMB
					,		B.BUYI_SEQU_NUMB
					,		CONVERT(VARCHAR(7), A.SALE_CONF_DATE, 120) AS ADJUST_CONF_DATE
					,		A.SALE_REQU_AMOU AS SALE_TOTA_AMOU
					,		B.PURC_PROD_AMOU AS BUYI_PROD_AMOU
					,		B.SALE_PROD_QUAN
					,		CASE WHEN B.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE B.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
					FROM	MSSALM A WITH(NOLOCK)
					,		MRORDTLIST B WITH(NOLOCK)
					WHERE 	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
					AND		A.CREATE_BORGID = #{create_borgid}
					AND 	LTRIM(A.SALE_CONF_DATE) BETWEEN CONVERT(DATETIME, #{srcConfStartDate} + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfEndDate} + '01'))
				)AA
				GROUP BY AA.ADJUST_CONF_DATE, SALE_SEQU_NUMB
			) XX
			GROUP BY SALE_CONF_DATE
		)AA
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>
	</select>
	
	<select id="adjustBalanceDetailCnt" resultType="int">
		/* adjust.adjustBalanceDetailCnt */	
		SELECT	COUNT(1)
		FROM
		(
			SELECT	A.ADJUST_CONF_DATE
			,		A.ORDE_TYPE_CLAS
			,		A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDE_NUMB
			,		A.SALE_PROD_QUAN
			,		A.SALE_PROD_AMOU
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.PURC_PROD_AMOU END AS BUYI_PROD_AMOU
			,		A.PURC_IDEN_NUMB
			,		A.DELI_IDEN_NUMB	
			,		A.RECE_IDEN_NUMB		
			FROM
			(
				SELECT	A.SALE_SEQU_NUMB
				,		B.BUYI_SEQU_NUMB
				,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		MAX(B.SALE_PROD_PRIS) AS SALE_PROD_PRIS
				,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
				,		SUM(B.PURC_PROD_AMOU) AS PURC_PROD_AMOU
				,		CONVERT(VARCHAR(7), MAX(A.SALE_CONF_DATE), 120) AS ADJUST_CONF_DATE 
				,		B.ORDE_IDEN_NUMB
				,		B.ORDE_SEQU_NUMB
				,		B.PURC_IDEN_NUMB
				,		B.DELI_IDEN_NUMB
				,		B.RECE_IDEN_NUMB
				,		MAX(B.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS
				FROM 	MSSALM A WITH(NOLOCK)
				,		MRORDTLIST B WITH(NOLOCK)
				WHERE	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				AND 	B.BUYI_SEQU_NUMB IS NULL
				AND		A.CREATE_BORGID = #{create_borgid}
				AND		LTRIM(A.SALE_CONF_DATE) BETWEEN CONVERT(DATETIME, #{srcConfDate} + '-01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfDate} + '-01'))
				GROUP BY A.SALE_SEQU_NUMB, B.SALE_SEQU_NUMB,B.BUYI_SEQU_NUMB, B.ORDE_IDEN_NUMB, B.ORDE_SEQU_NUMB, B.PURC_IDEN_NUMB, B.DELI_IDEN_NUMB, B.RECE_IDEN_NUMB
			)A
		) AA
		WHERE 	ADJUST_CONF_DATE = #{srcConfDate}
	</select>
	
	<select id="adjustBalanceDetail" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustBalanceDetail */
		SELECT	AA.ORDE_TYPE_CLAS
		,		DBO.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',AA.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,		AA.ORDE_NUMB AS ORDER_NUM
		,		AA.SALE_PROD_QUAN AS SALE_PROD_QUAN
		,		AA.SALE_PROD_AMOU
		,		AA.BUYI_PROD_QUAN
		,		AA.BUYI_PROD_AMOU
		,		AA.PURC_IDEN_NUMB
		,		AA.DELI_IDEN_NUMB	
		,		AA.RECE_IDEN_NUMB	
		FROM
		(
			SELECT	A.ADJUST_CONF_DATE
			,		A.ORDE_TYPE_CLAS
			,		A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDE_NUMB
			,		A.SALE_PROD_QUAN
			,		A.SALE_PROD_AMOU
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.PURC_PROD_AMOU END AS BUYI_PROD_AMOU
			,		A.PURC_IDEN_NUMB
			,		A.DELI_IDEN_NUMB	
			,		A.RECE_IDEN_NUMB		
			FROM
			(
				SELECT	A.SALE_SEQU_NUMB
				,		B.BUYI_SEQU_NUMB
				,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		MAX(B.SALE_PROD_PRIS) AS SALE_PROD_PRIS
				,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
				,		SUM(B.PURC_PROD_AMOU) AS PURC_PROD_AMOU
				,		CONVERT(VARCHAR(7), MAX(A.SALE_CONF_DATE), 120) AS ADJUST_CONF_DATE 
				,		B.ORDE_IDEN_NUMB
				,		B.ORDE_SEQU_NUMB
				,		B.PURC_IDEN_NUMB
				,		B.DELI_IDEN_NUMB
				,		B.RECE_IDEN_NUMB
				,		MAX(B.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS
				FROM 	MSSALM A WITH(NOLOCK)
				,		MRORDTLIST B WITH(NOLOCK)
				WHERE	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				AND 	B.BUYI_SEQU_NUMB IS NULL
				AND		A.CREATE_BORGID = #{create_borgid}
				AND		LTRIM(A.SALE_CONF_DATE) BETWEEN CONVERT(DATETIME, #{srcConfDate} + '-01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfDate} + '-01'))
				GROUP BY A.SALE_SEQU_NUMB, B.SALE_SEQU_NUMB,B.BUYI_SEQU_NUMB, B.ORDE_IDEN_NUMB, B.ORDE_SEQU_NUMB, B.PURC_IDEN_NUMB, B.DELI_IDEN_NUMB, B.RECE_IDEN_NUMB
			)A
		) AA
		WHERE 	ADJUST_CONF_DATE = #{srcConfDate}
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>			
	</select>
	
	<select id="adjustSalesTransmissionListCnt" resultType="int">
		/* adjust.adjustSalesTransmissionListCnt */
		SELECT 	COUNT(*)
		  FROM
		       (SELECT 	A.SALE_SEQU_NUMB 	
		        ,		A.SALE_SEQU_NAME
		        ,		CASE 
							WHEN A.BRANCHID = '0' 
								THEN 
									(	SELECT	A1.BORGID 
										FROM	SMPBORGS A1  WITH(NOLOCK)
										,		SMPBRANCHS B1  WITH(NOLOCK)
										WHERE A1.BORGID = B1.BRANCHID 
										AND A1.CLIENTID = A.CLIENTID 
										AND A1.ISKEY = '1'
									) 
							ELSE A.BRANCHID 
						END AS BRANCHID        
				,		C.BORGNM AS CLIENTNM
				,		CONVERT(VARCHAR(10), A.SALE_CONF_DATE, 120) AS SALE_CONF_DATE
				,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
				,		A.SALE_REQU_AMOU
				,       A.SALE_REQU_VTAX
				,		A.SALE_TOTA_AMOU
				,		A.PAYM_COND_CODE
				,		A.SAP_JOUR_NUMB
				,		CASE 
							WHEN ISNULL(A.SALE_TOTA_AMOU, 0) &lt;&gt; ISNULL(PAY_AMOU, 0) THEN '1'
							WHEN ISNULL(A.SALE_TOTA_AMOU, 0) = ISNULL(PAY_AMOU, 0) THEN '0'
						END AS ISCOLLECT
				,		ISNULL(B.RECE_PAY_AMOU, 0) AS PAY_AMOU
				,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU		
				,		CASE
							WHEN A.SAP_JOUR_NUMB IS NULL THEN '매출확정'
							WHEN A.SAP_JOUR_NUMB IS NOT NULL THEN '매출전송'
						END AS TRAN_STATUS_NM
				,		CONVERT(VARCHAR(10), A.TRAN_SAP_JOUR_DATE, 120) AS TRAN_SAP_JOUR_DATE	
				,		A.PAY_AMOU_NUMB	
				,		A.CLIENTID
		     	, 		'' AS LOGINID 
		     	,		A.CREATE_BORGID
				,		(SELECT TOP 1 Z.GOOD_NAME FROM MRORDTLIST Z  WITH(NOLOCK) WHERE Z.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB) AS GOOD_NAME
				,		(SELECT TOP 1 ALRAM_DATE FROM MPTREC  WITH(NOLOCK) WHERE SALE_SEQU_NUMB = A.SALE_SEQU_NUMB ORDER BY SALE_SEQU_NUMB DESC) AS ALRAM_DATE
		        FROM MSSALM A WITH(NOLOCK)
		        LEFT OUTER JOIN
		        (	
		        	SELECT 	SALE_SEQU_NUMB 
		            , 		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU 
		            FROM 	MPTREC  WITH(NOLOCK)
		            GROUP BY SALE_SEQU_NUMB 
		        )B 
		        ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB 
		        LEFT OUTER JOIN SMPBORGS C WITH(NOLOCK)
		        	ON C.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
		        WHERE	1 = 1
				<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '10'">
				AND 	A.SAP_JOUR_NUMB IS NULL
				AND		A.SALE_CONF_DATE IS NOT NULL
				</if>
				<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '20'">
				AND		SAP_JOUR_NUMB IS NOT NULL
				</if>		         
				)A
				, SMPBRANCHS B  WITH(NOLOCK)
		INNER JOIN SMPBORGS C WITH(NOLOCK)
			ON	B.BRANCHID = C.BORGID
		WHERE	A.BRANCHID = B.BRANCHID 
		AND		A.CREATE_BORGID = #{create_borgid}
<!-- 		AND		A.SALE_REQU_AMOU != 0  -->
		<if test="srcSalesName != null and srcSalesName != ''">
		AND		A.SALE_SEQU_NAME LIKE '%' + #{srcSalesName} + '%'
		</if>
		<if test="srcSalesConfStartDate != null and srcSalesConfStartDate != '' and srcSalesConfEndDate != null and srcSalesConfEndDate != ''">
		AND 	SALE_CONF_DATE BETWEEN CONVERT(DATETIME, #{srcSalesConfStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcSalesConfEndDate}))
		</if>
<!-- 		<if test="srcDateCalc != null and srcDateCalc!=''"> -->
<!-- 			<if test="srcDateCalc == 'transDate'"> -->
<!-- 			AND 	CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59') -->
<!-- 			</if> -->
<!-- 			<if test="srcDateCalc == 'payDate'"> -->
<!-- 			AND 	ALRAM_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59') -->
<!-- 			</if> -->
<!-- 		</if> -->
		<if test="(srcSalesTransStartDate != null and srcSalesTransStartDate !='') and (srcSalesTransEndDate != null and srcSalesTransEndDate != '')">
		AND 	CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59')
		</if>
		<if test="srcClientNm != null and srcClientNm != ''">
		AND		A.CLIENTNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		
		<if test="srcGroupId != null and srcGroupId != ''">
		AND		C.GROUPID = #{srcGroupId}
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND		C.CLIENTID = #{srcClientId}
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND		C.BORGID = #{srcBranchId}
		</if>
		
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '10'">
		AND 	ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) &lt;&gt; ISNULL(ROUND(PAY_AMOU,0), 0)
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND		ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(PAY_AMOU,0), 0)
		</if>	
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND		A.SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>	
	</select>
	
	<select id="adjustSalesTransmissionList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustSalesTransmissionList */
		SELECT 	A.*
		, 		'' AS LOGINID 
		, 		B.ACCOUNTMANAGENM AS USERNM 
		, 		B.ACCOUNTTELNUM AS TEL 
		, 		B.E_MAIL AS EMAIL 
		,		dbo.FNS_BorgNameByBorgID(A.CLIENTID) AS BRANCHNM
		,		B.PRESSENTNM
		,		B.ADDRES + ' ' + B.ADDRESDESC AS ADDRES
		,		B.BRANCHBUSICLAS
		,		B.BRANCHBUSITYPE
		,		B.BANKCD
		,		B.BUSINESSNUM
		,		D.USERNM AS accManageUserId
		,		B.AUTORDERLIMITPERIOD
		,		E.WORKNM
		,		F.USERNM AS workInfoUserNm
		,		CASE WHEN A.TRANSFER_STATUS = '1' THEN '아니오'
					 ELSE '예'
				END TRANSFER_STATUS_TYPE
		,		E.WORKNM
		,		B.EBILL_EMAIL AS ebillEmail
		,		CASE	
						WHEN A.RECE_SEQU_CNT > 1 THEN '예'
						ELSE '아니오'
				END RECE_SALE_STATUS
		FROM(
				SELECT 	A.SALE_SEQU_NUMB 	
				,		A.SALE_SEQU_NAME
				,		CASE 
							WHEN A.BRANCHID = '0' 
								THEN 
									(	SELECT	A1.BORGID 
										FROM	SMPBORGS A1  WITH(NOLOCK)
										,		SMPBRANCHS B1  WITH(NOLOCK)
										WHERE A1.BORGID = B1.BRANCHID 
										AND A1.CLIENTID = A.CLIENTID 
										AND A1.ISKEY = '1'
									) 
							ELSE A.BRANCHID 
						END AS BRANCHID        
				,		C.BORGNM AS CLIENTNM
				,		CONVERT(VARCHAR(10), A.SALE_CONF_DATE, 120) AS SALE_CONF_DATE
				,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
				,		A.SALE_REQU_AMOU
				,		A.SALE_REQU_VTAX
				,		A.SALE_TOTA_AMOU
				,		A.PAYM_COND_CODE
				,		A.SAP_JOUR_NUMB
				,		CASE 
							WHEN ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) &lt;&gt; ISNULL(ROUND(PAY_AMOU,0), 0) THEN '1'
							WHEN ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(PAY_AMOU,0), 0) THEN '0'
						END AS ISCOLLECT
				,		ISNULL(B.RECE_PAY_AMOU, 0) AS PAY_AMOU
				,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU		
				,		CASE
							WHEN A.SAP_JOUR_NUMB IS NULL THEN '매출확정'
							WHEN A.SAP_JOUR_NUMB IS NOT NULL THEN '매출전송'
						END AS TRAN_STATUS_NM
				,		CONVERT(VARCHAR(10), A.TRAN_SAP_JOUR_DATE, 120) AS TRAN_SAP_JOUR_DATE	
				,		A.PAY_AMOU_NUMB	
				,		A.CLIENTID
				,		'' AS LOGINID 
				,		A.CREATE_BORGID
				,		(SELECT TOP 1 Z.GOOD_NAME FROM MRORDTLIST Z WITH(NOLOCK) WHERE Z.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB) AS GOOD_NAME
				,		(SELECT TOP 1 ALRAM_DATE FROM MPTREC  WITH(NOLOCK) WHERE SALE_SEQU_NUMB = A.SALE_SEQU_NUMB ORDER BY ALRAM_DATE DESC) AS ALRAM_DATE
				,		A.TRANSFER_STATUS
				,		ISNULL(B.RECE_SEQU_CNT, 0) AS RECE_SEQU_CNT
				FROM MSSALM A WITH(NOLOCK) 
				LEFT OUTER JOIN(
						SELECT	SALE_SEQU_NUMB
						,		COUNT(1) AS RECE_SEQU_CNT 
						,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU 
						FROM MPTREC  WITH(NOLOCK) 
						GROUP BY SALE_SEQU_NUMB
						)B 
						ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				LEFT OUTER JOIN	SMPBORGS C WITH(NOLOCK) 
					ON C.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID END
				WHERE	1 = 1
				<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '10'">
				AND 	A.SAP_JOUR_NUMB IS NULL
				AND		A.SALE_CONF_DATE IS NOT NULL
				</if>
				<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '20'">
				AND		SAP_JOUR_NUMB IS NOT NULL
				</if>		         
		)A, SMPBRANCHS B  WITH(NOLOCK) 
		INNER JOIN SMPBORGS C WITH(NOLOCK) 
			ON	B.BRANCHID = C.BORGID
		LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
			ON	B.ACCMANAGEUSERID = D.USERID
		LEFT OUTER JOIN SMPWORKINFO E WITH(NOLOCK) 
			ON B.WORKID = E.WORKID
		LEFT OUTER JOIN SMPUSERS F WITH(NOLOCK) 
			ON E.USERID = F.USERID
		WHERE	A.BRANCHID = B.BRANCHID 
		AND		A.CREATE_BORGID = #{create_borgid}
<!-- 		AND		A.SALE_REQU_AMOU != 0  -->
		<if test="srcSalesName != null and srcSalesName != ''">
		AND		A.SALE_SEQU_NAME LIKE '%' + #{srcSalesName} + '%'
		</if>
		<if test="srcSalesConfStartDate != null and srcSalesConfStartDate != '' and srcSalesConfEndDate != null and srcSalesConfEndDate != ''">
		AND 	SALE_CONF_DATE BETWEEN CONVERT(DATETIME, #{srcSalesConfStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcSalesConfEndDate}))
		</if>				
<!-- 		<if test="srcDateCalc != null and srcDateCalc!=''"> -->
<!-- 			<if test="srcDateCalc == 'transDate'"> -->
<!-- 			AND 	CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59') -->
<!-- 			</if> -->
<!-- 			<if test="srcDateCalc == 'payDate'"> -->
<!-- 			AND 	ALRAM_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59') -->
<!-- 			</if> -->
<!-- 		</if> -->
		<if test="(srcSalesTransStartDate != null and srcSalesTransStartDate !='') and (srcSalesTransEndDate != null and srcSalesTransEndDate !='')">
		AND 	CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59')
		</if>
		<if test="srcScheDule != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND		ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(PAY_AMOU,0), 0)
		</if>				
		<if test="srcClientNm != null and srcClientNm != ''">
		AND		A.CLIENTNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		
		<if test="srcGroupId != null and srcGroupId != ''">
		AND		C.GROUPID = #{srcGroupId}
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND		C.CLIENTID = #{srcClientId}
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND		C.BORGID = #{srcBranchId}
		</if>
		
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '10'">
		AND 	ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) &lt;&gt; ISNULL(ROUND(PAY_AMOU,0), 0)
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND		ISNULL(ROUND(A.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(PAY_AMOU,0), 0)
		</if>
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND		A.SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
		<if test="srcUserNm != null and srcUserNm != ''">
		AND		F.USERNM LIKE '%' + #{srcUserNm} + '%'
		</if>
		
		<if test="receSaleStatus != null and receSaleStatus != ''">
			<choose>
				<when test="receSaleStatus == '10'.toString()">
					<![CDATA[
					AND A.RECE_SEQU_CNT > 1
					]]>
				</when>
				<otherwise>
					<![CDATA[
					AND A.RECE_SEQU_CNT <= 1
					]]>
				</otherwise>
			</choose>
		</if>
		<if test="orderString != null and orderString != ''"> 
		ORDER BY ${orderString}
		</if>
	</select>
	
	<resultMap id="adjustSalesTransmissionList20Map" type="java.util.Map">
 		<result property="saleSequNumb" column="SALE_SEQU_NUMB" javaType="string"/>
 		<result property="saleSequName" column="SALE_SEQU_NAME" javaType="string"/>
 		<result property="branchNm"     column="BRANCHNM"       javaType="string"/>
 		<result property="saleRequAmou" column="SALE_REQU_AMOU" javaType="string"/>
 		<result property="saleRequVtax" column="SALE_REQU_VTAX" javaType="string"/>
 		<result property="saleTotaAmou" column="SALE_TOTA_AMOU" javaType="string"/>
 		<result property="recePayAmou"  column="RECE_PAY_AMOU"  javaType="string"/>
 		<result property="remainAmou"   column="REMAIN_AMOU"    javaType="string"/>
 		<result property="receSequYn"   column="RECE_SEQU_YN"   javaType="string"/>
 		<result property="sapJourYn"    column="SAP_JOUR_YN"    javaType="string"/>
 		<result property="sapJourNumb"  column="SAP_JOUR_NUMB"  javaType="string"/>
		<result property="payYn"        column="PAY_YN"         javaType="string"/>	
		<result property="payAmouNumb"  column="PAY_AMOU_NUMB"  javaType="string"/>
		<result property="closSaleDate" column="CLOS_SALE_DATE" javaType="string"/>
		<result property="noneCollAmou" column="NONE_COLL_AMOU" javaType="string"/>
		<result property="saleConfDate" column="SALE_CONF_DATE" javaType="string"/>
		<result property="salePayDate"  column="SALE_PAY_DATE"  javaType="string"/>
 	</resultMap>
	
	<sql id="adjustSalesTransmissionList20Sql">
		FROM
			MSSALM AA WITH(NOLOCK) 
		LEFT OUTER JOIN (
			SELECT
				A.SALE_SEQU_NUMB,
				SUM(A.RECE_PAY_AMOU) AS RECE_PAY_AMOU,
				MAX(A.ALRAM_DATE) AS ALRAM_DATE,
				MAX(A.CREAT_DATE) AS PAY_CREATE_DATE,
				COUNT(1) AS RECE_SEQU_CNT
			FROM
				MPTREC A WITH(NOLOCK) 
			INNER JOIN MSSALM B  WITH(NOLOCK) ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
			WHERE B.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59')
			AND A.ALRAM_DATE IS NOT NULL
			GROUP BY
				A.SALE_SEQU_NUMB
		) BB ON	AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB
		LEFT OUTER JOIN SMPBRANCHS  CC  WITH(NOLOCK) ON AA.BRANCHID = CC.BRANCHID
		LEFT OUTER JOIN SMPBORGS    DD WITH(NOLOCK)  ON CC.BRANCHID = DD.BORGID
		LEFT OUTER JOIN SMPWORKINFO EE WITH(NOLOCK) ON CC.WORKID   = EE.WORKID
		LEFT OUTER JOIN SMPUSERS    FF  WITH(NOLOCK) ON EE.USERID   = FF.USERID
		WHERE
			AA.SALE_TOTA_AMOU &lt;&gt; 0
		AND
			AA.CREATE_BORGID = #{createBorgid}
		<if test="srcSalesName != null and srcSalesName != ''">
		AND
			AA.SALE_SEQU_NAME LIKE '%' + #{srcSalesName} + '%'
		</if>
		<if test="srcSalesConfStartDate != null and srcSalesConfStartDate != '' and srcSalesConfEndDate != null and srcSalesConfEndDate != ''">
		AND
			AA.SALE_CONF_DATE BETWEEN CONVERT(DATETIME, #{srcSalesConfStartDate}) AND DATEADD(D, 1, CONVERT(DATETIME, #{srcSalesConfEndDate}))
		</if>
		<if test="(srcSalesTransStartDate != null and srcSalesTransStartDate !='') and (srcSalesTransEndDate != null and srcSalesTransEndDate !='')">
		AND
			AA.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcSalesTransStartDate}) AND CONVERT(DATETIME, #{srcSalesTransEndDate} + ' 23:59')
		</if>
		<if test="srcScheDule != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND
			ISNULL(ROUND(AA.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(AA.PAY_AMOU,0), 0)
		</if>
		<if test="srcGroupId != null and srcGroupId != ''">
		AND
			DD.GROUPID = #{srcGroupId}
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND
			DD.CLIENTID = #{srcClientId}
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND	
			DD.BORGID = #{srcBranchId}
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND
			CC.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '10'">
		AND
			ISNULL(ROUND(AA.SALE_TOTA_AMOU,0), 0) &lt;&gt; ISNULL(ROUND(AA.PAY_AMOU,0), 0)
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND
			ISNULL(ROUND(AA.SALE_TOTA_AMOU,0), 0) = ISNULL(ROUND(AA.PAY_AMOU,0), 0)
		</if>
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND
			AA.SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
		<if test="srcUserNm != null and srcUserNm != ''">
		AND
			FF.USERNM LIKE '%' + #{srcUserNm} + '%'
		</if>
		<if test="receSaleStatus != null and receSaleStatus != ''">
			<choose>
				<when test="receSaleStatus == '10'.toString()">
					<![CDATA[
		AND
			BB.RECE_SEQU_CNT > 1
					]]>
				</when>
				<otherwise>
					<![CDATA[
		AND
			BB.RECE_SEQU_CNT <= 1
					]]>
				</otherwise>
			</choose>
		</if>
	</sql>
	
	<select id="adjustSalesTransmissionList20Count" resultType="int">
		/* adjust.adjustSalesTransmissionList20Count */
		SELECT
			COUNT(1)
		<include refid="adjustSalesTransmissionList20Sql"/>
	</select>
	
	<select id="adjustSalesTransmissionList20" resultMap="adjustSalesTransmissionList20Map">
		/* adjust.adjustSalesTransmissionList20 */
		SELECT
			AA.SALE_SEQU_NUMB,
			AA.SALE_SEQU_NAME,
			CC.BRANCHNM+' ('+CC.BUSINESSNUM+')' AS BRANCHNM,
			CONVERT(INT,ISNULL(BB.RECE_PAY_AMOU,0)) AS RECE_PAY_AMOU,
			AA.SALE_REQU_AMOU,
			AA.SALE_REQU_VTAX,
			CONVERT(INT,ISNULL(AA.SALE_TOTA_AMOU,0)) AS SALE_TOTA_AMOU,
			CONVERT(INT,ISNULL(BB.RECE_PAY_AMOU,0)) AS RECE_PAY_AMOU,
			(CONVERT(INT,ISNULL(AA.SALE_TOTA_AMOU,0)) - CONVERT(INT,ISNULL(BB.RECE_PAY_AMOU,0))) AS REMAIN_AMOU,
			(
				CASE
					WHEN
						ISNULL(BB.RECE_SEQU_CNT,0)>1
					THEN
						'Y'
					ELSE
						''
				END
			) AS RECE_SEQU_YN,
			(
				CASE
					WHEN
						AA.SAP_JOUR_NUMB IS NOT NULL
					THEN
						'Y'
					ELSE
						''
				END
			) AS SAP_JOUR_YN,
			AA.SAP_JOUR_NUMB+' ('+CONVERT(VARCHAR(10),AA.TRAN_SAP_JOUR_DATE,120)+')' AS SAP_JOUR_NUMB,
			(
				CASE
					WHEN
						BB.SALE_SEQU_NUMB IS NOT NULL
					THEN
						'Y'
					ELSE
						''
				END
			) AS PAY_YN,
			(
				CASE
					WHEN
						BB.SALE_SEQU_NUMB IS NOT NULL
					THEN
						(
							CASE
								WHEN
									AA.PAY_AMOU_NUMB=-9
								THEN
									'수기입력'
								ELSE
									AA.PAY_AMOU_NUMB
							END
						)
						+ ' (' + CONVERT(VARCHAR(10),BB.PAY_CREATE_DATE,120) + ')'
					ELSE
						''
				END
			) AS PAY_AMOU_NUMB,
			CONVERT(VARCHAR(10), AA.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE,
			CONVERT(INT, ISNULL(AA.SALE_TOTA_AMOU, 0)) - CONVERT(INT, ISNULL(BB.RECE_PAY_AMOU, 0)) AS NONE_COLL_AMOU,
			CONVERT(VARCHAR(10), AA.SALE_CONF_DATE, 120) AS SALE_CONF_DATE,
			CONVERT(VARCHAR(10), AA.SALE_PAY_DATE, 120) AS SALE_PAY_DATE
		<include refid="adjustSalesTransmissionList20Sql"/>
		<if test="orderString != null and orderString != ''"> 
		ORDER BY ${orderString}
		</if>
	</select>
	
	<select id="adjustSalesTransmissionListForExcel" resultType="java.util.HashMap">
		/* adjust.adjustSalesTransmissionListForExcel */
		SELECT	CONVERT(VARCHAR(200), A.SALE_SEQU_NUMB	) AS SALE_SEQU_NUMB
		,		CONVERT(VARCHAR(200), A.SALE_SEQU_NAME ) AS SALE_SEQU_NAME
		,		CONVERT(VARCHAR(200), A.BRANCHID		) AS BRANCHID
		,		CONVERT(VARCHAR(200), E.WORKNM) AS WORKNM
		,		CONVERT(VARCHAR(200), REPLACE(A.SALE_TOTA_AMOU, '.00', '')) AS SALE_TOTA_AMOU
		,		CONVERT(VARCHAR(200), REPLACE(A.RECE_PAY_AMOU,  '.00', '')) AS RECE_PAY_AMOU
		,		CONVERT(VARCHAR(200), REPLACE(A.NONE_COLL_AMOU, '.00', '')) AS TMP_NONE_COLL_AMOU
		,		CONVERT(VARCHAR(200), REPLACE(A.SALE_REQU_AMOU, '.00', '')) AS SALE_REQU_AMOU
		,		CONVERT(VARCHAR(200), REPLACE(A.PAY_AMOU, '.00', '')) AS PAY_AMOU
		,		CONVERT(VARCHAR(200), A.ID				) AS ID
		,		CONVERT(VARCHAR(200), A.RECE_SEQU_NUM	) AS RECE_SEQU_NUM
		,		CONVERT(VARCHAR(200), A.CLOS_SALE_DATE	) AS CLOS_SALE_DATE
		,		CONVERT(VARCHAR(200), A.ALRAM_DATE		) AS ALRAM_DATE
		,		CONVERT(VARCHAR(200), B.BRANCHNM) AS BRANCHNM
		,		CONVERT(VARCHAR(200), B.BUSINESSNUM) AS BUSINESSNUM
		,		CONVERT(VARCHAR(200), A.SAP_JOUR_NUMB) AS SAP_JOUR_NUMB
		,		D.USERNM AS accManageUserId
		FROM
		(
			SELECT	A.SAP_JOUR_NUMB
			,		A.SALE_SEQU_NUMB
			,		A.SALE_SEQU_NAME
			,		A.BRANCHID
			,		ISNULL(SALE_TOTA_AMOU, 0) AS SALE_TOTA_AMOU 
			,		ISNULL(SALE_REQU_AMOU, 0) AS SALE_REQU_AMOU 
			,		ISNULL(RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
			,		ISNULL(SALE_TOTA_AMOU, 0) - ISNULL(RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU
			,		ROW_NUMBER() OVER (PARTITION BY A.SALE_SEQU_NUMB, A.BRANCHID  ORDER BY B.CREAT_DATE ASC) AS ID
			,		B.RECE_SEQU_NUM
			,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
			,		CONVERT(VARCHAR(10), B.ALRAM_DATE, 120) AS ALRAM_DATE 
			,		A.PAY_AMOU
			,		A.SALE_CONF_DATE
			,		A.CREATE_BORGID
			FROM	MSSALM A WITH(NOLOCK) 
					LEFT OUTER JOIN 
					MPTREC B WITH(NOLOCK) 
					ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
          			LEFT OUTER JOIN SMPBORGS C  WITH(NOLOCK) 
              		ON C.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID ELSE A.BRANCHID 
              END 			  					
			WHERE	A.SAP_JOUR_NUMB IS NOT NULL 	
		)A,
		SMPBRANCHS B	 WITH(NOLOCK) 
		LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
			ON	B.ACCMANAGEUSERID = D.USERID
		LEFT OUTER JOIN SMPWORKINFO E WITH(NOLOCK) 
			ON B.WORKID = E.WORKID
		WHERE	A.BRANCHID = B.BRANCHID
		AND		A.CREATE_BORGID = #{create_borgid}	
		AND		A.SALE_REQU_AMOU != 0
		<if test="srcDateCalc != null and srcDateCalc!=''">
			<if test="srcDateCalc == 'transDate'">
				AND 	A.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcStartDate}) AND CONVERT(DATETIME, #{srcEndDate} + ' 23:59')
			</if>
		</if>
		<if test="srcSalesName != null and srcSalesName != ''">
		AND		A.SALE_SEQU_NAME LIKE '%' + #{srcSalesName} + '%'
		</if>
		<if test="srcClientNm != null and srcClientNm != ''">
		AND		B.BRANCHNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '10'">
		AND		ISNULL(A.SALE_TOTA_AMOU, 0) &gt; ISNULL(A.PAY_AMOU, 0)
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND		(ISNULL(A.SALE_TOTA_AMOU, 0) = ISNULL(A.PAY_AMOU, 0) OR ISNULL(A.SALE_TOTA_AMOU, 0) &lt; ISNULL(A.PAY_AMOU, 0))
		</if>
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND		A.SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>			
		<if test="srcDateCalc != null and srcDateCalc!=''">
			<if test="srcDateCalc == 'transDate'">
			ORDER BY A.SAP_JOUR_NUMB, A.CLOS_SALE_DATE DESC
			</if>
		</if>
	</select>
	
	<update id="updateAdjustSalesTrans">
		/* adjust.updateAdjustSalesTrans */	
		UPDATE MSSALM SET 
			CLOS_SALE_DATE 		= CONVERT(DATETIME, #{closeDate})
		,	SAP_JOUR_NUMB 		= #{seqSapNo}	
		,	TRAN_SAP_JOUR_DATE 	= GETDATE()
		,	TRAN_USER_ID 		= #{userId}
		,	EXPIRATION_DATE		= DATEADD(DAY, CONVERT(INT, #{autOrderLimitPeriod}) ,CONVERT(DATETIME, #{closeDate}))
		<if test="setPayAmouNumb != null and setPayAmouNumb != ''">
		,	PAY_AMOU_NUMB 		= '-1'
		</if>
		WHERE SALE_SEQU_NUMB 	= #{saleSequNumb}	
	</update>

	<update id="updateAdjustSalesTransCancel">
		/* adjust.updateAdjustSalesTransCancel */
		UPDATE MSSALM SET 
			CLOS_SALE_DATE 		= NULL
		,	SAP_JOUR_NUMB 		= NULL	
		,	TRAN_SAP_JOUR_DATE 	= NULL
		,	TRAN_USER_ID 		= NULL
		,	EXPIRATION_DATE		= NULL
		WHERE SALE_SEQU_NUMB 	= #{saleSequNumb}	
	</update>
	
	<select id="adjustPurchaseTransmissionListCnt" resultType="int"> 
		/* adjust.adjustPurchaseTransmissionListCnt */
		SELECT 	COUNT(1)
		FROM 	MSBUYM A
		,		SMPVENDORS B WITH(NOLOCK) 
		WHERE 	A.VENDORID = B.VENDORID
		AND 	A.CREATE_BORGID = #{create_borgid}
		<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '10'">
		AND     A.SAP_JOUR_NUMB IS NULL	
		</if>
		<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '20'">
		AND     A.SAP_JOUR_NUMB IS NOT NULL	
		</if>
		<if test="srcPurchaseConfStartDate != null and srcPurchaseConfStartDate != '' and srcPurchaseConfEndDate != null and srcPurchaseConfEndDate != ''">
		AND 	BUYI_CONF_DATE BETWEEN CONVERT(DATETIME, #{srcPurchaseConfStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcPurchaseConfEndDate}))
		</if>				
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND		B.VENDORNM LIKE '%' + #{srcVendorNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>		
		<if test="srcPurchaseClosStartDate != null and srcPurchaseClosStartDate != '' and srcPurchaseClosEndDate != null and srcPurchaseClosEndDate != ''">
		AND 	CLOS_BUYI_DATE BETWEEN CONVERT(DATETIME, #{srcPurchaseClosStartDate}) AND CONVERT(DATETIME, #{srcPurchaseClosEndDate} + ' 23:59')
		</if>				
		<if test="srcIsPayment != null and srcIsPayment != '' and srcIsPayment == '10'">
		AND     ISNULL(A.BUYI_TOTA_AMOU, 0) &lt;&gt; ISNULL(PAY_AMOU,0)
		</if>
		<if test="srcIsPayment != null and srcIsPayment != '' and srcIsPayment == '20'">
		AND     ISNULL(A.BUYI_TOTA_AMOU,0) = ISNULL(PAY_AMOU,0)	
		</if>			
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND		A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>						
	</select>
	
	<select id="adjustPurchaseTransmissionList" resultType="kr.co.bitcube.adjust.dto.AdjustDto"> 
		/** adjust.adjustPurchaseTransmissionList **/
		SELECT 	A.BUYI_SEQU_NUMB
		,		CONVERT(VARCHAR(10), A.CLOS_BUYI_DATE, 120) AS CLOS_BUYI_DATE
		,		CONVERT(VARCHAR(10), A.BUYI_CONF_DATE, 120) AS BUYI_CONF_DATE  
		,		B.VENDORID
		,		DBO.FNS_BORG_STRING(B.VENDORID) AS VENDORNM
		,		A.BUYI_REQU_AMOU
		,		A.BUYI_REQU_VTAX
		,		A.BUYI_TOTA_AMOU
		,		B.BUSINESSNUM
		,		A.PAYM_COND_CODE
		,		A.SAP_JOUR_NUMB
		,		CASE WHEN (ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(PAY_AMOU,0)) &lt;&gt; 0 THEN '0' 
					 ELSE '1'
				END AS ISPAYMENT	   
		,		A.PAY_AMOU_NUMB		
		,		ISNULL(A.PAY_AMOU,0) AS PAY_AMOU
<!-- 		,		ISNULL(REPLACE(A.PAY_AMOU,'-',''),0) AS PAY_AMOU -->
		,		ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(PAY_AMOU,0) AS NONE_PAYM_AMOU
		,		CASE WHEN A.SAP_JOUR_NUMB IS NULL THEN '매입확정'
					 WHEN A.SAP_JOUR_NUMB IS NOT NULL THEN '매입전송'
				END AS TRAN_STATUS_NM
		,		CONVERT(VARCHAR(10), A.TRAN_SAP_JOUR_DATE, 120) AS TRAN_SAP_JOUR_DATE				
		,	    B.PRESSENTNM
		,		B.ADDRES + ' ' + B.ADDRESDESC AS ADDRES
		,		B.VENDORBUSICLAS
		,		B.VENDORBUSITYPE
		,		B.TRUSTBILLUSERID		AS LOGINID
		,		B.TRUSTBILLUSERNM		AS USERNM
		,		B.TRUSTBILLUSEREMAIL	AS EMAIL
		,		B.TRUSTBILLUSERTEL		AS TEL
		,		(SELECT TOP 1 Z.GOOD_NAME FROM MRORDTLIST Z WHERE Z.BUYI_SEQU_NUMB = A.BUYI_SEQU_NUMB) AS GOOD_NAME
		,		B.BANKCD
		,		CONVERT(VARCHAR(10), A.ETC_EXPIRATION_DATE, 120) AS ETC_EXPIRATION_DATE
		,		A.SUM_UP AS SUM_UP
		FROM 	MSBUYM A WITH(NOLOCK) 
		,		SMPVENDORS B WITH(NOLOCK) 
		WHERE 	A.VENDORID = B.VENDORID
		AND 	A.CREATE_BORGID = #{create_borgid}
		<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '10'">
		AND     A.SAP_JOUR_NUMB IS NULL	
		</if>
		<if test="srcTransStatus != null and srcTransStatus != '' and srcTransStatus == '20'">
		AND     A.SAP_JOUR_NUMB IS NOT NULL	
		</if>
		<if test="srcPurchaseConfStartDate != null and srcPurchaseConfStartDate != '' and srcPurchaseConfEndDate != null and srcPurchaseConfEndDate != ''">
		AND 	BUYI_CONF_DATE BETWEEN CONVERT(DATETIME, #{srcPurchaseConfStartDate}) AND DATEADD(D,1,CONVERT(DATETIME, #{srcPurchaseConfEndDate}))
		</if>				
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND		B.VENDORNM LIKE '%' + #{srcVendorNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>		
		<if test="srcPurchaseClosStartDate != null and srcPurchaseClosStartDate != '' and srcPurchaseClosEndDate != null and srcPurchaseClosEndDate != ''">
		AND 	CLOS_BUYI_DATE BETWEEN CONVERT(DATETIME, #{srcPurchaseClosStartDate}) AND CONVERT(DATETIME, #{srcPurchaseClosEndDate} + ' 23:59')
		</if>				
		<if test="srcIsPayment != null and srcIsPayment != '' and srcIsPayment == '10'">
		AND     ISNULL(A.BUYI_TOTA_AMOU, 0) &lt;&gt; ISNULL(PAY_AMOU,0)
		</if>
		<if test="srcIsPayment != null and srcIsPayment != '' and srcIsPayment == '20'">
		AND     ISNULL(A.BUYI_TOTA_AMOU,0) = ISNULL(PAY_AMOU,0)	
		</if>			
		<if test="buyi_sequ_numb != null and buyi_sequ_numb != ''">
		AND		A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>		
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>							
	</select>
	
	<update id="updateAdjustPurchaseTrans">
		/* adjust.updateAdjustPurchaseTrans */
		UPDATE msbuym SET 
			CLOS_BUYI_DATE 		= CONVERT(DATETIME, #{closeDate})
		,	SAP_JOUR_NUMB 		= #{seqSapNo}	
		,	TRAN_SAP_JOUR_DATE 	= GETDATE()
		,	TRAN_USER_ID 		= #{userId}
		,	EXPIRATION_DATE		= DATEADD(DAY, CONVERT(INT, #{payBillDay}) ,CONVERT(DATETIME, #{closeDate}))
		WHERE BUYI_SEQU_NUMB 	= #{buyiSequNumb}	
	</update>

	<update id="updateAdjustPurchaseTransCancel">
		/* adjust.updateAdjustPurchaseTransCancel */	
		UPDATE msbuym SET 
			CLOS_BUYI_DATE 		= NULL
		,	SAP_JOUR_NUMB 		= NULL	
		,	TRAN_SAP_JOUR_DATE 	= NULL
		,	TRAN_USER_ID 		= NULL
		,	EXPIRATION_DATE		= NULL
		WHERE BUYI_SEQU_NUMB 	= #{buyiSequNumb}	
	</update>
	
	<insert id="insertMptrec">
		/* adjust.insertMptrec */
		INSERT INTO MPTREC(
			RECE_SEQU_NUM
		,	SALE_SEQU_NUMB
		,	CREAT_DATE
		<if test="payDate != null and payDate != ''">
		,	ALRAM_DATE
		</if>
		,	CONTEXT
		<if test="rece_pay_amou != null and rece_pay_amou != ''">
		,	RECE_PAY_AMOU
		</if>
		,	RECE_USER_ID
		<if test="schedule_date != null and schedule_date != ''">
		,	SCHEDULE_DATE
		</if>
		<if test="schedule_amou != null and schedule_amou != ''">
        ,	SCHEDULE_AMOU
		</if>
		<if test="tel_user_nm != null and tel_user_nm != ''">
        ,	TEL_USER_NM
		</if>
		)VALUES(
			#{rece_sequ_num}
		,	#{sale_sequ_numb}
		,	GETDATE()
		<if test="payDate != null and payDate != ''">
		,	#{payDate}
		</if>
		,	#{context}
		<if test="rece_pay_amou != null and rece_pay_amou != ''">
		,	#{rece_pay_amou}		
		</if>
		,	#{rece_user_id}		
		<if test="schedule_date != null and schedule_date != ''">
		,	#{schedule_date}		
		</if>
		<if test="schedule_amou != null and schedule_amou != ''">
		,	#{schedule_amou}		
		</if>
		<if test="tel_user_nm != null and tel_user_nm != ''">
		,	#{tel_user_nm}
		</if>
		)	
	</insert>

	<update id="updateSalesDeposit">
		/* adjust.updateSalesDeposit */	
		UPDATE MSSALM SET
			SALE_OVER_DAY	 = DATEDIFF(DAY	  ,EXPIRATION_DATE ,#{payDate})
		,	SALE_OVER_MONTH	 = DATEDIFF(MONTH ,EXPIRATION_DATE ,#{payDate})
		<if test="operFlag != null and operFlag != '' and operFlag == '10'">
		,	PAY_AMOU 		 = ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}
		,	TRAN_STAT_FLAG 	 = (CASE 
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &lt;= 0 
								THEN '0'
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &gt; 0 
								THEN   	(CASE
											WHEN DATEDIFF(DAY,EXPIRATION_DATE ,#{payDate}) &gt; 0  THEN '1'
											WHEN DATEDIFF(DAY,EXPIRATION_DATE ,#{payDate}) &lt;= 0 THEN '0'
										END)
								END	)			
		,	SALE_PAY_DATE	 = (CASE 
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &lt;= 0 
								THEN 	#{payDate}
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &gt; 0 
								THEN   	NULL
								END	)
		</if>
		<if test="operFlag != null and operFlag != '' and operFlag == '20'">
		,	PAY_AMOU 		 = ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}
		
		,	TRAN_STAT_FLAG 	 = (CASE 
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &lt;= 0 
								THEN 	'0'
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &gt; 0 
								THEN   	(CASE
										WHEN DATEDIFF(DAY,EXPIRATION_DATE ,#{payDate}) &gt; 0  THEN '1'
										WHEN DATEDIFF(DAY,EXPIRATION_DATE ,#{payDate}) &lt;= 0 THEN '0'
										END)
								END	)		
		,	SALE_PAY_DATE	 = (CASE 
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &lt;= 0 
								THEN 	#{payDate}
								WHEN SALE_TOTA_AMOU - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &gt; 0 
								THEN	NULL
								END	)																
		</if>		
		<if test="pay_amou_numb != null and pay_amou_numb != ''">
		,	PAY_AMOU_NUMB 	 = #{pay_amou_numb}
		</if>
		WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}
	</update>
	
	<select id="adjustSalesDepositDescList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustSalesDepositDescList */
		SELECT 	A.RECE_SEQU_NUM
		,		A.SALE_SEQU_NUMB
		,		CONVERT(VARCHAR(10), A.CREAT_DATE, 120) AS CREAT_DATE
		,		CONVERT(VARCHAR(10), A.ALRAM_DATE , 120) AS PAY_DATE
		,		A.CONTEXT
		,		A.RECE_USER_ID
		,		B.USERNM AS RECE_USER_NM
		,		A.RECE_PAY_AMOU
		,		CONVERT(VARCHAR(10), A.SCHEDULE_DATE, 120) AS SCHEDULE_DATE
		, 		A.SCHEDULE_AMOU
		, 		A.TEL_USER_NM		
		<if test="sap_jour_numb != null and sap_jour_numb != ''">
		,		#{sap_jour_numb} AS SAP_JOUR_NUMB
		</if>
		,		A.RECE_SALE_STATUS
		FROM  	MPTREC A WITH(NOLOCK) 
		LEFT OUTER JOIN
				SMPUSERS B WITH(NOLOCK) 
		ON		A.RECE_USER_ID = B.USERID
		WHERE   A.SALE_SEQU_NUMB = #{sale_sequ_numb}
		<if test="isBonds == null or isBonds == ''">
		--AND 	A.ALRAM_DATE IS NOT NULL
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>		
	</select>
	
	<insert id="insertMptpay">
		/* adjust.insertMptpay */
		INSERT INTO MPTPAY(
			RECE_SEQU_NUM
		,	BUYI_SEQU_NUMB
		,	CREAT_DATE
		<if test="payDate != null and payDate!= ''">
		,	ALRAM_DATE
		</if>
		,	RECEP_ALRAM_ID
		,	CONTEXT
		<if test="rece_pay_amou != null and rece_pay_amou != ''">
		,	RECE_PAY_AMOU
		,	RECE_USER_ID
		<if test="schedule_date != null and schedule_date != ''">
		,	SCHEDULE_DATE
		</if>
		<if test="schedule_amou != null and schedule_amou != ''">
		,	SCHEDULE_AMOU
		</if>
		<if test="tel_user_nm != null and tel_user_nm != ''">
		,	TEL_USER_NM
		
		</if>
		</if>
		<if test="sumupContent != null and sumupContent != ''">
		,	SUM_UP
		</if>
		)VALUES(
			#{rece_sequ_num}
		,	#{buyi_sequ_numb}
		,	GETDATE()
		<if test="payDate != null and payDate != ''">
		,	#{payDate}
		</if>
		,	#{recep_alram_id}
		,	#{context}
		<if test="rece_pay_amou != null and rece_pay_amou != ''">
		,	#{rece_pay_amou}		
		</if>
		,	#{rece_user_id}		
		<if test="schedule_date != null and schedule_date != ''">
		,	#{schedule_date}		
		</if>
		<if test="schedule_amou != null and schedule_amou != ''">
		,	#{schedule_amou}		
		</if>
		<if test="tel_user_nm != null and tel_user_nm != ''">
		,	#{tel_user_nm}
		</if>
				<if test="sumupContent != null and sumupContent != ''">
		,	#{sumupContent}
		</if>
		)	
	</insert>
	
	<update id="updatePurchasePayment">
		/* adjust.updatePurchasePayment */
		UPDATE MSBUYM SET
			BUYI_OVER_DAY	 = DATEDIFF(DAY	  ,EXPIRATION_DATE ,GETDATE())
		,	BUYI_OVER_MONTH	 = DATEDIFF(MONTH ,EXPIRATION_DATE ,GETDATE())
		<if test="operFlag != null and operFlag != '' and operFlag == '10'">
		,	PAY_AMOU 		 = ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}
		,	TRAN_STAT_FLAG 	 = (CASE 
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &lt;= 0 
								THEN '0'
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &gt; 0 
								THEN   	(CASE
											WHEN DATEDIFF(DAY,EXPIRATION_DATE ,GETDATE()) &gt; 0  THEN '1'
											WHEN DATEDIFF(DAY,EXPIRATION_DATE ,GETDATE()) &lt;= 0 THEN '0'
										END)
								END	)			
		,	buyi_pay_date	 = (CASE 
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &lt;= 0 
								THEN 	GETDATE()
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) + #{rece_pay_amou}) &gt; 0 
								THEN   	NULL
								END	)																													
		</if>
		<if test="operFlag != null and operFlag != '' and operFlag == '20'">
		,	PAY_AMOU 		 = ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}
		
		,	TRAN_STAT_FLAG 	 = (CASE 
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &lt;= 0 
								THEN 	'0'
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &gt; 0 
								THEN   	(CASE
										WHEN DATEDIFF(DAY,EXPIRATION_DATE ,GETDATE()) &gt; 0  THEN '1'
										WHEN DATEDIFF(DAY,EXPIRATION_DATE ,GETDATE()) &lt;= 0 THEN '0'
										END)
								END	)		
		,	buyi_pay_date	 = (CASE 
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &lt;= 0 
								THEN 	GETDATE()
								WHEN buyi_tota_amou - (ISNULL(PAY_AMOU, 0) - #{rece_pay_amou}) &gt; 0 
								THEN	NULL
								END	)																
		</if>		
		
		
		<if test="pay_amou_numb != null and pay_amou_numb != ''">
		,	PAY_AMOU_NUMB 	 = #{pay_amou_numb}
		</if>
		<if test="ele_etc_date != null and ele_etc_date != ''">
		,	ELE_ETC_DATE = #{ele_etc_date}
		</if>
		WHERE buyi_sequ_numb = #{buyi_sequ_numb}
	</update>
	
	<select id="adjustPurchasePaymentDescList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustPurchasePaymentDescList */
		SELECT 	A.RECE_SEQU_NUM
		,		A.BUYI_SEQU_NUMB
		,		CONVERT(VARCHAR(10), A.CREAT_DATE, 120) AS CREAT_DATE
		,		CONVERT(VARCHAR(10), A.ALRAM_DATE , 120) AS PAY_DATE
		,		A.RECEP_ALRAM_ID
		,		(SELECT USERNM FROM SMPUSERS WITH(NOLOCK)  WHERE USERID = A.RECEP_ALRAM_ID) AS RECEP_ALRAM_NM
		,		A.CONTEXT
		,		A.RECE_USER_ID
		,		B.USERNM AS RECE_USER_NM
		,		A.RECE_PAY_AMOU
        ,		CONVERT(VARCHAR(10), A.SCHEDULE_DATE, 120) AS SCHEDULE_DATE
        , 		A.SCHEDULE_AMOU
        , 		A.TEL_USER_NM		
		<if test="sap_jour_numb != null and sap_jour_numb != ''">
		,		#{sap_jour_numb} AS SAP_JOUR_NUMB
		</if>		
		FROM  	MPTPAY A WITH(NOLOCK) 
		LEFT OUTER JOIN
				SMPUSERS B WITH(NOLOCK) 
		ON		A.RECE_USER_ID = B.USERID
		WHERE   A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		<if test="isDebt == null or isDebt == ''">
		--AND 	A.ALRAM_DATE IS NOT NULL
		</if>		
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>		
	</select>
	
	<sql id="adjustBondsTotalListSql">
		SELECT	CLIENTID
		,		dbo.FNS_BorgNameByBorgID(CLIENTID) AS CLIENTNM
		,		SALE_REQU_AMOU
		,		SALE_TOTA_AMOU
		,		RECE_PAY_AMOU
		,		BALANCE_AMOU
		,		BUSINESSNUM
		,		ADDRES
		,		BANKCD
		,		DBO.FNS_CODENM1BYCODEVAL1('BANKCD',BANKCD) AS BANKNM
		,		PRESSENTNM
		,		PHONENUM
		,		CLOS_SALE_DATE
		<if test="selectType != null and selectType != ''">
		,		ISNULL((SELECT ISLIMIT FROM SMPBORGS  WITH(NOLOCK) WHERE BORGID = XX.CLIENTID), '') AS ISLIMIT
		</if>
		<![CDATA[
		,		CASE	WHEN XX.TRAN_SAP_JOUR_DATE < XX.CREAT_DATE THEN CONVERT(VARCHAR(10),XX.CREAT_DATE, 120)
						WHEN XX.TRAN_SAP_JOUR_DATE > XX.CREAT_DATE THEN CONVERT(VARCHAR(10),XX.TRAN_SAP_JOUR_DATE, 120)
						WHEN XX.TRAN_SAP_JOUR_DATE = XX.CREAT_DATE THEN CONVERT(VARCHAR(10),XX.TRAN_SAP_JOUR_DATE, 120)
						WHEN XX.CREAT_DATE IS NULL THEN CONVERT(VARCHAR(10),XX.TRAN_SAP_JOUR_DATE, 120)
						WHEN XX.TRAN_SAP_JOUR_DATE IS NULL THEN CONVERT(VARCHAR(10),XX.CREAT_DATE, 120)
				END	CREAT_DATE
		]]>
		,		USERNM
		,		TRANSFER_STATUS
		,		XX.SALE_OVER_DAY
		,		AVG_REV_AMOU_DATE AS AVG_DAY
		,		AVG_REV_AMOU_DATE2 AS AVG_DAY2
		FROM
		(
			SELECT	AA.CLIENTID
			,		SUM(AA.SALE_REQU_AMOU) AS SALE_REQU_AMOU 
			,		SUM(AA.SALE_TOTA_AMOU) AS SALE_TOTA_AMOU 
			,		SUM(AA.RECE_PAY_AMOU) AS RECE_PAY_AMOU 
			,		SUM(AA.BALANCE_AMOU) AS BALANCE_AMOU 
			,		BB.BUSINESSNUM
			,		MAX(BB.PRESSENTNM) AS PRESSENTNM 
			,		MAX(BB.ADDRES) + ' ' + MAX(BB.ADDRESDESC) AS ADDRES
			,		MAX(BB.PHONENUM) AS PHONENUM 
			,		MAX(BB.BANKCD) AS BANKCD
			,		MAX(AA.CLOS_SALE_DATE) AS CLOS_SALE_DATE
			,		MAX(AA.TRAN_SAP_JOUR_DATE) AS TRAN_SAP_JOUR_DATE
			,		MAX(AA.CREAT_DATE) AS CREAT_DATE
			,		SUM(AA.DATE_CALC * RECE_PAY_AMOU) AS DATE_CALC
			,		SUM(AA.BALANS_DATE * AA.BALANCE_AMOU) AS BALANS_DATE
			,		MAX(USERS.USERNM) AS USERNM
			,		MIN(AA.TRANSFER_STATUS) AS TRANSFER_STATUS
			,		SUM(AA.SALE_OVER_DAY) AS SALE_OVER_DAY
			,		CONVERT(VARCHAR,CONVERT(numeric(18,1), (CASE	WHEN SUM(ISNULL(AA.SALE_TOTA_AMOU2,0)) = 0 THEN 0
									ELSE CONVERT(FLOAT,ROUND(SUM(AA.AVG_REV_AMOU)/SUM(AA.SALE_TOTA_AMOU2),1))
					END))) AVG_REV_AMOU_DATE
			,		CONVERT(VARCHAR,CONVERT(numeric(18,1), (CASE	WHEN SUM(ISNULL(AA.SALE_YEAR_TOTA_AMOU2,0)) = 0 THEN 0
									ELSE CONVERT(FLOAT,ROUND(SUM(AA.AVG_YEAR_REV_AMOU)/SUM(AA.SALE_YEAR_TOTA_AMOU2),1))
					END))) AVG_REV_AMOU_DATE2
					
			FROM(	SELECT	A.SALE_SEQU_NUMB
					,		A.CLIENTID
					,		CASE 
								WHEN A.BRANCHID = '0' THEN (SELECT	A1.BORGID
															FROM	SMPBORGS A1
															,		SMPBRANCHS B1 
															WHERE	A1.BORGID = B1.BRANCHID 
															AND		A1.CLIENTID = A.CLIENTID
															AND A1.ISKEY = '1') 
								ELSE A.BRANCHID							
							END AS BRANCHID
					,		ISNULL(A.SALE_REQU_AMOU, 0) AS SALE_REQU_AMOU
					,		ISNULL(A.SALE_TOTA_AMOU, 0) AS SALE_TOTA_AMOU
					,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
					,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS BALANCE_AMOU
					,		A.CREATE_BORGID		
					,		A.CLOS_SALE_DATE
					,		A.TRAN_SAP_JOUR_DATE AS TRAN_SAP_JOUR_DATE
					,		B.CREAT_DATE AS CREAT_DATE
					,		DATEDIFF ( day ,A.CLOS_SALE_DATE, B.ALRAM_DATE) as DATE_CALC
					,		DATEDIFF ( day ,A.CLOS_SALE_DATE, getdate()) as BALANS_DATE
					,		A.TRANSFER_STATUS
					<![CDATA[
					,		CASE WHEN A.SALE_OVER_DAY > 0 THEN 1 ELSE 0 END SALE_OVER_DAY
					,		(CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0))<=0 
										THEN (DATEDIFF ( day ,A.CLOS_SALE_DATE, B.ALRAM_DATE) * ISNULL(B.RECE_PAY_AMOU, 0))
									ELSE 0
							END) AS AVG_REV_AMOU
					,		(CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) <= 0 THEN ISNULL(A.SALE_TOTA_AMOU, 0)
								END) AS SALE_TOTA_AMOU2
					,		(CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(C.RECE_PAY_AMOU, 0))<=0 
										THEN (DATEDIFF ( day ,A.CLOS_SALE_DATE, C.ALRAM_DATE) * ISNULL(C.RECE_PAY_AMOU, 0))
									ELSE 0
							END) AS AVG_YEAR_REV_AMOU
					,		(CASE	WHEN FLOOR(ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(C.RECE_PAY_AMOU, 0)) <= 0 THEN ISNULL(A.SALE_TOTA_AMOU, 0)
							END) AS SALE_YEAR_TOTA_AMOU2
					]]>
					FROM	MSSALM A WITH(NOLOCK) 
							LEFT OUTER JOIN(
									SELECT 	SALE_SEQU_NUMB
									,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
									,		MAX(CREAT_DATE) AS CREAT_DATE
									,		MAX(ALRAM_DATE) AS ALRAM_DATE
									FROM 	MPTREC  WITH(NOLOCK)
									<if test="(srcEndDate != null and srcEndDate != '')">
									<![CDATA[
									WHERE	ALRAM_DATE <= DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcEndDate} + '01 23:59:59')))
									]]>
									</if>
									GROUP BY SALE_SEQU_NUMB  
							) B 
								ON	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							LEFT OUTER JOIN (
									SELECT 	SALE_SEQU_NUMB
									,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
									,		MAX(CREAT_DATE) AS CREAT_DATE
									,		MAX(ALRAM_DATE) AS ALRAM_DATE
									FROM 	MPTREC  WITH(NOLOCK)
									WHERE	ALRAM_DATE BETWEEN DATEADD(YEAR, -1, GETDATE()) AND GETDATE()
									GROUP BY SALE_SEQU_NUMB
							) C
								ON	A.SALE_SEQU_NUMB = C.SALE_SEQU_NUMB
					WHERE	A.SAP_JOUR_NUMB IS NOT NULL
					<if test="(srcStartDate != null and srcStartDate != '') and (srcEndDate != null and srcEndDate != '')">
					AND		A.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcStartDate} + '01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcEndDate} + '01 23:59')))
					</if>
			)AA
			INNER JOIN SMPBRANCHS BB WITH(NOLOCK) 
				ON AA.BRANCHID = BB.BRANCHID
			LEFT OUTER JOIN	SMPUSERS USERS WITH(NOLOCK) 
				ON	BB.ACCMANAGEUSERID = USERS.USERID
			WHERE	1=1
			AND		AA.CREATE_BORGID = #{create_borgid}
			<![CDATA[
			AND (AA.RECE_PAY_AMOU > 0 OR AA.RECE_PAY_AMOU = 0)
			]]>
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		BB.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>				
			GROUP BY BB.BUSINESSNUM, AA.CLIENTID
		)XX
	</sql>
	<select id="adjustBondsTotalListCnt" resultType="java.util.HashMap">
		/** adjust.adjustBondsTotalListCnt **/	
		SELECT	COUNT(1) AS CNT
		,		SUM(SALE_TOTA_AMOU) AS SALESUM
		,		SUM(BALANCE_AMOU) AS REMAINSUM
		FROM
		(
			<include refid="adjustBondsTotalListSql"/>
		)AA
		LEFT OUTER JOIN SMPBORGS BORGS WITH(NOLOCK) 
			ON	AA.CLIENTID = BORGS.BORGID
		WHERE	AA.SALE_REQU_AMOU != 0
		<if test="clientId != null and clientId != ''">
		AND  	AA.CLIENTID = #{clientId}
		</if>
		<if test="srcClientNm != null and srcClientNm != ''">
		AND  	AA.CLIENTNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		AA.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsUse != null and srcIsUse != ''">
		AND		BORGS.ISUSE = #{srcIsUse}
		</if>
		<if test="srcIsLimit != null and srcIsLimit != ''">
			<choose>
				<when test="srcIsLimit eq '0'">
					AND		BORGS.ISLIMIT IS NULL OR #{srcIsLimit}
				</when>
				<otherwise>
					AND		BORGS.ISLIMIT = #{srcIsLimit}
				</otherwise>
			</choose>
		</if>
		<if test="srcTransferStatus != null and srcTransferStatus !=''">
		AND		AA.TRANSFER_STATUS = #{srcTransferStatus}
		</if>
	</select>
	<select id="adjustBondsTotalList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustBondsTotalList **/	
		SELECT	AA.*
		,		CASE WHEN BORGS.ISUSE = '0' THEN '종료'
					 WHEN BORGS.ISUSE = '1' THEN '정상'
				END	 AS ISUSE
		,		CASE WHEN BORGS.ISLIMIT IS NULL THEN ''
					 WHEN BORGS.ISLIMIT = '0' THEN '' 
					 WHEN BORGS.ISLIMIT = '1' THEN 'Y' 
				END AS ISLIMITSTR
		,		CASE WHEN AA.TRANSFER_STATUS = '1' THEN ''
					 ELSE 'Y'
				END transfer_status
		,		CASE WHEN BORGS.ISPREPAY = '1' THEN 'Y' ELSE 'N' END AS ISPREPAY						
		,		(SELECT TOP 1 CONVERT(VARCHAR(10), CLOS_SALE_DATE,120) FROM mssalm A  WITH(NOLOCK) WHERE AA.clientid = A.clientid ORDER BY CLOS_SALE_DATE ASC) AS FIRST_CREAT_DATE
		FROM
		(
			<include refid="adjustBondsTotalListSql"/>
		)AA
		LEFT OUTER JOIN SMPBORGS BORGS WITH(NOLOCK) 
			ON	AA.CLIENTID = BORGS.BORGID
		WHERE	AA.SALE_REQU_AMOU != 0
		<if test="clientId != null and clientId != ''">
		AND  	AA.CLIENTID = #{clientId}
		</if>
		<if test="srcClientNm != null and srcClientNm != ''">
		AND  	AA.CLIENTNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		AA.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsUse != null and srcIsUse != ''">
		AND		BORGS.ISUSE = #{srcIsUse}
		</if>
		<if test="srcIsLimit != null and srcIsLimit != ''">
			<choose>
				<when test="srcIsLimit eq '0'">
					AND		BORGS.ISLIMIT IS NULL OR #{srcIsLimit}
				</when>
				<otherwise>
					AND		BORGS.ISLIMIT = #{srcIsLimit}
				</otherwise>
			</choose>
		</if>
		<if test="srcTransferStatus != null and srcTransferStatus !=''">
		AND		AA.TRANSFER_STATUS = #{srcTransferStatus}
		</if>
		<if test="srcPrePay != null and srcPrePay !=''">
		AND		ISNULL(BORGS.ISPREPAY, '0') = #{srcPrePay}
		</if>		
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>			
	</select>
	
	<select id="adjustBondsCompanyList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustBondsCompanyList **/
		SELECT	A.*
		,		A.SALE_SEQU_NUMB AS SALE_DETAIL 
		,		B.ACCMANAGEUSERID
		,		B.BRANCHNM
		,		B.BUSINESSNUM
		,		RECE_USER_NM
		FROM(	SELECT	A.CLIENTID
				,		CASE 
							WHEN A.BRANCHID = '0' THEN (SELECT	A1.BORGID
														FROM	SMPBORGS A1
														,		SMPBRANCHS B1 
														WHERE	A1.BORGID = B1.BRANCHID 
														AND		A1.CLIENTID = A.CLIENTID
														AND A1.ISKEY = '1') 
							ELSE A.BRANCHID							
						END AS BRANCHID
				,		A.SALE_SEQU_NUMB
				,		A.SAP_JOUR_NUMB
				,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
				,		A.SALE_TOTA_AMOU
				,		CONVERT(VARCHAR(10), A.SALE_PAY_DATE, 120) AS SALE_PAY_DATE
				,		TRAN_STAT_FLAG
				,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
				,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU
				,		CASE
							WHEN ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) &lt;= 0 THEN '-'
							ELSE
								CASE 	 
									WHEN A.TRAN_STAT_FLAG = '0' THEN '정상'
									ELSE '관리'
								END	
						END AS 	TRAN_STATUS_NM
				,		CONVERT(VARCHAR(10), A.EXPIRATION_DATE, 120) AS end_sale_date
				,		(CASE WHEN ISNULL(C.AUTORDERLIMITPERIOD,0)=60 THEN CONVERT(VARCHAR(10), A.EXPIRATION_DATE+30, 120) ELSE CONVERT(VARCHAR(10), A.EXPIRATION_DATE+10, 120) END) AS EXPIRATION_DATE
				<![CDATA[
				,		(CASE WHEN SALE_OVER_DAY<0 THEN 0 ELSE SALE_OVER_DAY END) AS SALE_OVER_DAY
				,		(CASE WHEN SALE_OVER_MONTH<0 THEN 0 ELSE SALE_OVER_MONTH END) AS SALE_OVER_MONTH
				]]>
				,		CREATE_BORGID
				,		ISNULL(SALE_REQU_AMOU, 0) as SALE_REQU_AMOU
				,		CONVERT(VARCHAR(10), B.ALRAM_DATE, 120) AS ALRAM_DATE
				,		A.TRANSFER_STATUS  AS TRANSFER_STATUS
				<![CDATA[
				,		CASE WHEN A.TRANSFER_STATUS = 0 THEN '예'
							 ELSE '아니오'
						END AS TRANSFER_STATUS_TYPE
				]]>
				,		RECE_USER_NM
				FROM	MSSALM A WITH(NOLOCK) 
				LEFT OUTER JOIN(SELECT 	SALE_SEQU_NUMB
								,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
								,		MAX(ALRAM_DATE) AS ALRAM_DATE
								,		(SELECT USERNM FROM SMPUSERS WITH(NOLOCK)  WHERE USERID = (MAX(RECE_USER_ID))) AS RECE_USER_NM
								FROM 	MPTREC 
								GROUP BY SALE_SEQU_NUMB  )B 
					ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				LEFT OUTER JOIN SMPBRANCHS C WITH(NOLOCK)
					ON	A.BRANCHID = C.BRANCHID
				WHERE	A.SAP_JOUR_NUMB IS NOT NULL)A
		,		SMPBRANCHS B WITH(NOLOCK) 
		WHERE	A.CLIENTID = '${clientId}' 
		and		A.BRANCHID = B.BRANCHID
		AND		A.CREATE_BORGID = '${create_borgid}'
		AND 	A.SALE_REQU_AMOU != 0
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '10'">
		AND (ISNULL(FLOOR(A.SALE_TOTA_AMOU), 0) - ISNULL(FLOOR(A.RECE_PAY_AMOU), 0)) != 0
		</if>
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '20'">
		AND     (ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(A.RECE_PAY_AMOU, 0)) &lt;=  0
		</if>
		<if test="srcTranStat != null and srcTranStat != ''">
		AND 	ISNULL(A.TRAN_STAT_FLAG, '1') = '${srcTranStat}'
		</if>
		<if test="srcClosStartDate != null and srcClosStartDate != '' and srcClosEndDate != null and srcClosEndDate != ''">
		AND     REPLACE(CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120), '-', '') BETWEEN '${srcClosStartDate}' AND '${srcClosEndDate}'
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND     B.BRANCHID = '${srcBranchId}'
		</if>
		<if test="srcTransferStatus != null and srcTransferStatus != ''">
		AND     A.TRANSFER_STATUS = #{srcTransferStatus}
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>		
	</select>
	
	<select id="adjustBondsCompanyPriceInfo" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustBondsCompanyPriceInfo **/
		SELECT 	ISNULL(SUM(AA.REQUEST_PRIC), 0) AS NONE_CLOS_REQU_PRIC 
		,		ISNULL(SUM(AA.PURC_PRIC), 0) AS NONE_CLOS_PURC_PRIC 
		,		ISNULL(SUM(AA.DELI_PRIC), 0) AS NONE_CLOS_DELI_PRIC
		,		ISNULL(SUM(AA.SALE_PROD_AMOU), 0) AS NONE_SALE_PROD_AMOU
		,		ISNULL(MAX(AA.ISLIMIT), '0') AS ISLIMIT 
		FROM 
				(
				SELECT 
						(
						SELECT 	SUM(Z.ORDE_REQU_PRIC*Z.ORDE_REQU_QUAN) 
						FROM 	MRORDT Z  WITH(NOLOCK) 
						WHERE 	Z.ORDE_IDEN_NUMB = A.ORDE_IDEN_NUMB 
						AND 	Z.ORDE_REQU_QUAN &lt;> Z.PURC_REQU_QUAN 
						AND 	ORDE_STAT_FLAG = '10' 
						) AS REQUEST_PRIC 
				, 
						(
						SELECT 	SUM(Z.ORDE_REQU_PRIC*Z.PURC_REQU_QUAN) 
						FROM 	MRPURT Z  WITH(NOLOCK) 
						WHERE 	Z.ORDE_IDEN_NUMB = A.ORDE_IDEN_NUMB 
						AND 	Z.PURC_REQU_QUAN &lt;> Z.DELI_PROD_QUAN 
						AND 	PURC_STAT_FLAG = '40' 
						) AS PURC_PRIC 
				, 
						(
						SELECT 	SUM(Z.ORDE_REQU_PRIC*X.DELI_PROD_QUAN) 
						FROM 	MRACPT X  WITH(NOLOCK) 
						, 		MRPURT Z  WITH(NOLOCK) 
						WHERE 	X.ORDE_IDEN_NUMB = A.ORDE_IDEN_NUMB 
						AND 	X.ORDE_IDEN_NUMB = Z.ORDE_IDEN_NUMB 
						AND 	X.ORDE_SEQU_NUMB = Z.ORDE_SEQU_NUMB 
						AND	 	X.PURC_IDEN_NUMB = Z.PURC_IDEN_NUMB 
						AND 	X.DELI_STAT_FLAG = '60' 
						) AS DELI_PRIC
				,		(
						SELECT 	SUM(X.SALE_PROD_AMOU) AS NONE_SALE_PROD_AMOU 
						FROM 	MRORDTLIST X WITH(NOLOCK) 
						WHERE	X.ORDE_IDEN_NUMB = A.ORDE_IDEN_NUMB
						AND		EXISTS(	SELECT 	1 
										FROM 	MSSALM Z  WITH(NOLOCK) 
										WHERE 	(X.SALE_SEQU_NUMB = Z.SALE_SEQU_NUMB OR X.SALE_SEQU_NUMB IS NULL) 
										AND 	Z.SAP_JOUR_NUMB IS NULL   
									   ) 
						AND 	X.CLIENTID = B.BORGID
						) AS SALE_PROD_AMOU						 
				, 		B.ISLIMIT 
				FROM 	MRORDM A  WITH(NOLOCK) 
				, 		SMPBORGS B  WITH(NOLOCK) 
				WHERE 	A.CLIENTID = #{clientId} 
				AND 	A.CLIENTID = B.BORGID 
		)AA
	</select>
	
	<update id="updateSmpBorgsIsLimit">
		/** adjust.updateSmpBorgsIsLimit **/
		UPDATE SMPBORGS SET 
			ISLIMIT = #{isLimit}
		WHERE BORGID = #{clientId}			
	</update>
	
	<select id="getAdjustAlramUserList" resultType="kr.co.bitcube.common.dto.UserDto">
		/** adjust.getAdjustAlramUserList **/
		SELECT	A.USERID
		,		A.USERNM
		FROM	SMPUSERS A WITH(NOLOCK) 
		,		SMPBORGS_USERS B WITH(NOLOCK) 
		,		SMPBORGS C WITH(NOLOCK) 
		WHERE	A.USERID = B.USERID
		AND		B.BORGID = C.BORGID
		AND		A.ISUSE = '1'
		AND		C.ISUSE = '1'
		AND		C.SVCTYPECD = 'ADM'	
	</select>
	
	<delete id="deleteMptrec">
		/** adjust.deleteMptrec **/
		DELETE FROM MPTREC WHERE RECE_SEQU_NUM = #{rece_sequ_num}
	</delete>

	<delete id="deleteMptpay">
		/** adjust.deleteMptpay **/
		DELETE FROM MPTPAY WHERE RECE_SEQU_NUM = #{rece_sequ_num}
	</delete>
	
	<select id="adjustDebtTotalListCnt" resultType="int">
		/** adjust.adjustDebtTotalListCnt **/
		SELECT 	COUNT(1)
		FROM	MSBUYM A WITH(NOLOCK) 
		,		SMPVENDORS C WITH(NOLOCK) 
		WHERE	A.VENDORID = C.VENDORID		
		AND		A.CREATE_BORGID = #{create_borgid}   
		AND		A.SAP_JOUR_NUMB IS NOT NULL
		<if test="vendorId != null and vendorId != '' and vendorId neq '0'.toString()">
		AND  	A.VENDORID = #{vendorId}
		</if>
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND  	C.VENDORNM LIKE '%' + #{srcVendorNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		C.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
	</select>	

	<select id="adjustDebtTotalList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustDebtTotalList **/
		SELECT AA.*
		,		AA.VENDORID
		,		AA.VENDORNM
		,		AA.BUSINESSNUM
		<![CDATA[
		,		CASE WHEN AA.TRAN_SAP_JOUR_DATE < AA.CREATE_DATE THEN CONVERT(VARCHAR(10), AA.CREATE_DATE, 120)
					 WHEN AA.TRAN_SAP_JOUR_DATE > AA.CREATE_DATE THEN CONVERT(VARCHAR(10), AA.TRAN_SAP_JOUR_DATE, 120)
					 WHEN AA.TRAN_SAP_JOUR_DATE = AA.CREATE_DATE THEN CONVERT(VARCHAR(10), AA.CREATE_DATE, 120)
					 WHEN AA.CREATE_DATE IS NULL THEN CONVERT(VARCHAR(10), AA.TRAN_SAP_JOUR_DATE, 120)
					 WHEN AA.TRAN_SAP_JOUR_DATE IS NULL THEN CONVERT(VARCHAR(10), AA.CREATE_DATE, 120)
				END CREAT_DATE
		]]>
		FROM
		(SELECT A.VENDORID AS VENDORID
		,		C.VENDORNM AS VENDORNM
		,		C.BUSINESSNUM AS BUSINESSNUM
		,		MAX(C.PRESSENTNM) AS PRESSENTNM 
		,		MAX(C.PHONENUM) AS PHONENUM 
		,		MAX(C.ADDRES)  + ' ' + MAX(C.ADDRESDESC) AS ADDRES
		,		MAX(C.BANKCD) AS BANKCD
		,       DBO.FNS_CODENM1BYCODEVAL1('BANKCD',MAX(C.BANKCD)) AS BANKNM
		,		SUM(ISNULL(A.BUYI_REQU_AMOU, 0)) AS BUYI_REQU_AMOU
		,		SUM(ISNULL(A.BUYI_TOTA_AMOU, 0)) AS BUYI_TOTA_AMOU
		,		SUM(ISNULL(B.RECE_PAY_AMOU, 0)) AS RECE_PAY_AMOU
		,		SUM(ISNULL(A.BUYI_TOTA_AMOU, 0)) - SUM(ISNULL(B.RECE_PAY_AMOU, 0)) AS BALANCE_AMOU
		,		MAX(A.CLOS_BUYI_DATE) AS CLOS_BUYI_DATE	
		,		MAX(A.TRAN_SAP_JOUR_DATE)	AS TRAN_SAP_JOUR_DATE
		,		MAX(B.CREAT_DATE) AS CREATE_DATE
		FROM	MSBUYM A WITH(NOLOCK) 
				LEFT OUTER JOIN 
				(
				SELECT 	BUYI_SEQU_NUMB
				,		MAX(CREAT_DATE)	AS CREAT_DATE			
				,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
				FROM 	MPTPAY WITH(NOLOCK) 
				GROUP BY	BUYI_SEQU_NUMB
				)B ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
		,		SMPVENDORS C WITH(NOLOCK) 
		WHERE	A.VENDORID = C.VENDORID		
		AND		A.CREATE_BORGID = 13
		AND		A.SAP_JOUR_NUMB IS NOT NULL		
		GROUP BY C.BUSINESSNUM, A.VENDORID, C.VENDORNM) AA
		WHERE 1=1
		<if test="vendorId != null and vendorId != '' and vendorId neq '0'.toString() ">
		AND  	AA.VENDORID = #{vendorId}
		</if>
		<if test="srcVendorNm != null and srcVendorNm != ''">
		AND  	AA.VENDORNM LIKE '%' + #{srcVendorNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		AA.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>
	</select>
	
	<select id="adjustDebtCompanyList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustDebtCompanyList **/
		SELECT 	A.VENDORID
		,		A.BUYI_SEQU_NUMB
		,		A.SAP_JOUR_NUMB
		,		CONVERT(VARCHAR(10), A.CLOS_BUYI_DATE, 120) AS CLOS_BUYI_DATE
		,		A.BUYI_TOTA_AMOU
		,		CONVERT(VARCHAR(10), A.BUYI_PAY_DATE, 120) AS BUYI_PAY_DATE
		,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
		,		ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_PAYM_AMOU
		,		CASE 
					WHEN A.TRAN_STAT_FLAG = '0' THEN '정상'
					ELSE '관리'
				END AS 	TRAN_STATUS_NM
		,		CONVERT(VARCHAR(10), A.EXPIRATION_DATE, 120) AS EXPIRATION_DATE
		,		BUYI_OVER_DAY	
		,		BUYI_OVER_MONTH
		,		A.ELE_ETC_DATE AS ELE_ETC_DATE
		FROM	MSBUYM A WITH(NOLOCK) 
		LEFT OUTER JOIN
				(
				SELECT 	BUYI_SEQU_NUMB
				,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
				,		MAX(CREAT_DATE) AS CREAT_DATE
				FROM 	MPTPAY  WITH(NOLOCK) 
				GROUP BY BUYI_SEQU_NUMB  
				)B ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
		WHERE   A.VENDORID = #{vendorId}
		AND		A.CREATE_BORGID = #{create_borgid}
		AND     A.SAP_JOUR_NUMB IS NOT NULL 	
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '10'">
		AND     (ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) > 0
		</if>
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '20'">
		AND     (ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) &lt;=  0
		</if>
		<if test="srcTranStat != null and srcTranStat != ''">
		AND 	ISNULL(A.TRAN_STAT_FLAG, '1') = #{srcTranStat}
		</if>
		<if test="srcClosStartDate != null and srcClosStartDate != '' and srcClosEndDate != null and srcClosEndDate != ''">
		AND     REPLACE(CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120), '-', '') BETWEEN #{srcClosStartDate} AND #{srcClosEndDate}
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>			
	</select>
	
	<insert id="insertSaleEBill">
		/** adjust.insertSaleEBill **/
		INSERT 	INTO	SALEEBILL
			(	
				RESSEQ,			DOCCODE,		EBILLKIND, 
				CUSTOMS,		TAXSNUM,		DOCATTR,			
				PUBDATE,		SYSTEMCODE,		PUBTYPE,
				PUBFORM,        REMARKS,		MEMID,
				MEMNAME,		EMAIL,			TEL,
				COREGNO,		CONAME,			COCEO,
				COADDR,			COBIZTYPE,		COBIZSUB,
				RECMEMID,		RECMEMNAME,		RECEMAIL,
				RECTEL,			RECCOREGNOTYPE,	RECCOREGNO,		RECCONAME,
				RECCOCEO,		RECCOADDR,		RECCOBIZTYPE,
				RECCOBIZSUB,	SUPPRICE,		TAX,
				PUBKIND,		LOADSTATUS,		SMS					
			)
		values
			(	
				#{resSeq},		#{docCode},			#{eBillKind},
				#{customs},		#{taxSNum},			#{docAttr},
				#{pubDate},		#{systemCode},		#{pubType},
				#{pubForm},		#{remarks},			#{memID},
				#{memName},		#{email},			#{tel},
				#{coRegNo},		#{coName},			#{coCeo},
				#{coAddr},		#{coBizType},		#{coBizSub},
				#{recMemID},	#{recMemName},		#{recEMail},
				#{recTel},		#{recCoRegNoType},	#{recCoRegNo},	#{recCoName},
				#{recCoCeo},	#{recCoAddr},		#{recCoBizType},
				#{recCoBizSub},	#{supPrice},		#{tax},
				#{pubKind},		#{loadStatus},		#{sms}
			)	
	</insert>
	
	<insert id="insertItemList">
		/** adjust.insertItemList **/	
		insert 	into	ITEMLIST
			(	
				SEQID,			DETAILSEQID,	ITEMDATE, 
				ITEMNAME,		ITEMSUPPRICE,	ITEMTAX													
			)
		values
			(	
				#{resSeq},		#{resSeq},		#{pubDate},
				#{itemName},	#{supPrice},	#{tax}					
			)		
	</insert>
	
	<update id="updateSaleEBill">
		/** adjust.updateSaleEBill **/	
		UPDATE	SALEEBILL SET	
			DOCATTR 	= 'D',
		    LOADSTATUS 	= 0						    						     		
		WHERE	RESSEQ = #{resSeq}	
	</update>
	
	<select id="getMptrecCnt" resultType="int">
		SELECT 	COUNT(1) 
		FROM 	MPTREC  WITH(NOLOCK) 
		WHERE 	SALE_SEQU_NUMB = #{saleSequNumb}
	</select>
	
	<select id="getMptpayCnt" resultType="int">
		SELECT 	COUNT(1) 
		FROM 	MPTPAY  WITH(NOLOCK) 
		WHERE 	BUYI_SEQU_NUMB = #{buyiSequNumb}
	</select>
	
	<select id="selectBranchsByClientId" resultType="java.util.HashMap">
		SELECT	A.BORGNM
		,		B.BRANCHID
		FROM 	SMPBORGS A WITH(NOLOCK) 
		,		SMPBRANCHS B WITH(NOLOCK) 
		WHERE 	A.BORGID = B.BRANCHID
		AND		A.CLIENTID = #{clientId}
		AND 	A.ISUSE = '1'	
	</select>
	
	<select id="adjustBondsTotalStdMonthExcel5Month" resultType="java.util.HashMap">
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID,  M0, M1, M2, M3, M4, M5
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	CONVERT(VARCHAR, B.BRANCHCD) AS BRANCHID 
			,		dbo.FNS_BorgNameByBorgID(A.BRANCHID) AS BRANCHNM
			,		B.BUSINESSNUM 
			,		C.WORKNM
			,		D.USERNM
			,       CONVERT(VARCHAR, dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(B.PAYBILLTYPE))) AS PAYBILLTYPE 
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
					ON	B.WORKID = C.WORKID
			LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
					ON	B.ACCMANAGEUSERID = D.USERID
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY A.BRANCHID, B.BRANCHCD, B.BUSINESSNUM, C.WORKNM, D.USERNM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS BRANCHID 
		,		'' AS BRANCHNM
		,		'' AS BUSINESSNUM
		,		'' AS WORKNM
		,		'' AS USERNM
		,       '' AS PAYBILLTYPE 
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
				AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
				</if>
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.BRANCHID
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, BRANCHNM
	</select>

	<select id="adjustBondsTotalStdMonthExcel30Month" resultType="java.util.HashMap">
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID,  M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24, M25, M26, M27, M28, M29, M30, M31
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M31' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M30' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -29, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -29, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M29' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -28, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -28, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M28' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -27, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -27, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M27' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -26, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -26, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M26' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -25, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -25, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M25' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -24, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -24, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M24' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -23, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -23, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M23' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -22, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -22, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M22' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -21, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -21, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M21' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -20, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -20, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M20' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -19, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -19, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M19' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -18, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -18, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M18' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -17, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -17, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M17' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -16, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -16, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M16' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -15, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -15, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M15' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -14, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -14, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M14' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -13, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -13, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M13' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M12' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M11' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M10' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M9' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M8' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M7' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M6' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M5' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE					
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0		
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24, M25, M26, M27, M28, M29, M30, M31)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	CONVERT(VARCHAR, B.BRANCHCD) AS BRANCHID 
			,		dbo.FNS_BorgNameByBorgID(A.BRANCHID) AS BRANCHNM
			,		B.BUSINESSNUM 
			,		C.WORKNM
			,		D.USERNM
			,       CONVERT(VARCHAR, dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(B.PAYBILLTYPE))) AS PAYBILLTYPE 
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
			, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
			, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
			, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0))) AS M10
			, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0))) AS M11
			, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0))) AS M12
			, 		CONVERT(VARCHAR, SUM(ISNULL(M13, 0))) AS M13
			, 		CONVERT(VARCHAR, SUM(ISNULL(M14, 0))) AS M14
			, 		CONVERT(VARCHAR, SUM(ISNULL(M15, 0))) AS M15
			, 		CONVERT(VARCHAR, SUM(ISNULL(M16, 0))) AS M16
			, 		CONVERT(VARCHAR, SUM(ISNULL(M17, 0))) AS M17
			, 		CONVERT(VARCHAR, SUM(ISNULL(M18, 0))) AS M18
			, 		CONVERT(VARCHAR, SUM(ISNULL(M19, 0))) AS M19
			, 		CONVERT(VARCHAR, SUM(ISNULL(M20, 0))) AS M20
			, 		CONVERT(VARCHAR, SUM(ISNULL(M21, 0))) AS M21
			, 		CONVERT(VARCHAR, SUM(ISNULL(M22, 0))) AS M22
			, 		CONVERT(VARCHAR, SUM(ISNULL(M23, 0))) AS M23
			, 		CONVERT(VARCHAR, SUM(ISNULL(M24, 0))) AS M24
			, 		CONVERT(VARCHAR, SUM(ISNULL(M25, 0))) AS M25
			, 		CONVERT(VARCHAR, SUM(ISNULL(M26, 0))) AS M26
			, 		CONVERT(VARCHAR, SUM(ISNULL(M27, 0))) AS M27
			, 		CONVERT(VARCHAR, SUM(ISNULL(M28, 0))) AS M28
			, 		CONVERT(VARCHAR, SUM(ISNULL(M29, 0))) AS M29
			, 		CONVERT(VARCHAR, SUM(ISNULL(M30, 0))) AS M30
			, 		CONVERT(VARCHAR, SUM(ISNULL(M31, 0))) AS M31
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))
				+ SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0))
				+ SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0)) + SUM(ISNULL(M14, 0)) + SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0)) + SUM(ISNULL(M17, 0))
				+ SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0)) + SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0)) + SUM(ISNULL(M23, 0))			    			    
				+ SUM(ISNULL(M24, 0)) + SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0)) + SUM(ISNULL(M28, 0)) + SUM(ISNULL(M29, 0))
				+ SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
					ON	B.WORKID = C.WORKID
			LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
					ON	B.ACCMANAGEUSERID = D.USERID
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY A.BRANCHID, B.BRANCHCD, B.BUSINESSNUM, C.WORKNM, D.USERNM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS BRANCHID 
		,		'' AS BRANCHNM
		,		'' AS BUSINESSNUM
		,		'' AS WORKNM
		,		'' AS USERNM
		,       '' AS PAYBILLTYPE 
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
		, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
		, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
		, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0))) AS M10
		, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0))) AS M11
		, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0))) AS M12
		, 		CONVERT(VARCHAR, SUM(ISNULL(M13, 0))) AS M13
		, 		CONVERT(VARCHAR, SUM(ISNULL(M14, 0))) AS M14
		, 		CONVERT(VARCHAR, SUM(ISNULL(M15, 0))) AS M15
		, 		CONVERT(VARCHAR, SUM(ISNULL(M16, 0))) AS M16
		, 		CONVERT(VARCHAR, SUM(ISNULL(M17, 0))) AS M17
		, 		CONVERT(VARCHAR, SUM(ISNULL(M18, 0))) AS M18
		, 		CONVERT(VARCHAR, SUM(ISNULL(M19, 0))) AS M19
		, 		CONVERT(VARCHAR, SUM(ISNULL(M20, 0))) AS M20
		, 		CONVERT(VARCHAR, SUM(ISNULL(M21, 0))) AS M21
		, 		CONVERT(VARCHAR, SUM(ISNULL(M22, 0))) AS M22
		, 		CONVERT(VARCHAR, SUM(ISNULL(M23, 0))) AS M23
		, 		CONVERT(VARCHAR, SUM(ISNULL(M24, 0))) AS M24
		, 		CONVERT(VARCHAR, SUM(ISNULL(M25, 0))) AS M25
		, 		CONVERT(VARCHAR, SUM(ISNULL(M26, 0))) AS M26
		, 		CONVERT(VARCHAR, SUM(ISNULL(M27, 0))) AS M27
		, 		CONVERT(VARCHAR, SUM(ISNULL(M28, 0))) AS M28
		, 		CONVERT(VARCHAR, SUM(ISNULL(M29, 0))) AS M29
		, 		CONVERT(VARCHAR, SUM(ISNULL(M30, 0))) AS M30
		, 		CONVERT(VARCHAR, SUM(ISNULL(M31, 0))) AS M31		
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))
			+ SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0))
			+ SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0)) + SUM(ISNULL(M14, 0)) + SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0)) + SUM(ISNULL(M17, 0))
			+ SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0)) + SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0)) + SUM(ISNULL(M23, 0))			    			    
			+ SUM(ISNULL(M24, 0)) + SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0)) + SUM(ISNULL(M28, 0)) + SUM(ISNULL(M29, 0))
			+ SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M7, 0))  AS M7
				, 		SUM(ISNULL(M8, 0))  AS M8
				, 		SUM(ISNULL(M9, 0))  AS M9
				, 		SUM(ISNULL(M10, 0)) AS M10
				, 		SUM(ISNULL(M11, 0)) AS M11
				, 		SUM(ISNULL(M12, 0)) AS M12
				, 		SUM(ISNULL(M13, 0)) AS M13
				, 		SUM(ISNULL(M14, 0)) AS M14
				, 		SUM(ISNULL(M15, 0)) AS M15
				, 		SUM(ISNULL(M16, 0)) AS M16
				, 		SUM(ISNULL(M17, 0)) AS M17
				, 		SUM(ISNULL(M18, 0)) AS M18
				, 		SUM(ISNULL(M19, 0)) AS M19
				, 		SUM(ISNULL(M20, 0)) AS M20
				, 		SUM(ISNULL(M21, 0)) AS M21
				, 		SUM(ISNULL(M22, 0)) AS M22
				, 		SUM(ISNULL(M23, 0)) AS M23
				, 		SUM(ISNULL(M24, 0)) AS M24
				, 		SUM(ISNULL(M25, 0)) AS M25
				, 		SUM(ISNULL(M26, 0)) AS M26
				, 		SUM(ISNULL(M27, 0)) AS M27
				, 		SUM(ISNULL(M28, 0)) AS M28
				, 		SUM(ISNULL(M29, 0)) AS M29
				, 		SUM(ISNULL(M30, 0)) AS M30
				, 		SUM(ISNULL(M31, 0)) AS M31
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))
					+ SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0))
					+ SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0)) + SUM(ISNULL(M14, 0)) + SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0)) + SUM(ISNULL(M17, 0))
					+ SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0)) + SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0)) + SUM(ISNULL(M23, 0))			    			    
					+ SUM(ISNULL(M24, 0)) + SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0)) + SUM(ISNULL(M28, 0)) + SUM(ISNULL(M29, 0))
					+ SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
				AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
				</if>
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.BRANCHID
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, BRANCHNM
	</select>
	
	<select id="selectPayBillTypeCd" resultType="java.util.HashMap">
		SELECT	CODEVAL1
		,		CODENM1
		,		CODEVAL2
		FROM	SMPCODES WITH(NOLOCK) 
		WHERE	CODETYPECD = 'PAYMCONDCODE' 
		AND		ISUSE = '1'
		AND		CODEVAL1 = #{paymCondCode}
		ORDER BY DISORDER
	</select>
	
	<update id="modSalesConfirmPartCancel">
	/** adjust.modSalesConfirmPartCancel **/
		<if test="orde_iden_numb != null and orde_iden_numb != ''">
			UPDATE	MRORDTLIST SET	
				SALE_SEQU_NUMB = null
			WHERE	ORDE_IDEN_NUMB = #{orde_iden_numb}
			AND		ORDE_SEQU_NUMB = #{orde_sequ_numb}
			AND		PURC_IDEN_NUMB = #{purc_iden_numb}
			AND		DELI_IDEN_NUMB = #{deli_iden_numb}
			AND 	BUYI_SEQU_NUMB IS NULL
		</if>
	</update>
	<select id="selectSaleCashCalcCnt" resultType="int">
	SELECT	COUNT(1)
	FROM	MRORDTLIST WITH(NOLOCK) 
	WHERE	SALE_SEQU_NUMB = #{sale_sequ_numb}
	</select>
	<update id="modSaleCashCalc">
	/** adjust.modSaleCashCalc **/
	UPDATE	MSSALM	SET		
			SALE_REQU_AMOU = A.SALE_PROD_AMOU
	,		SALE_REQU_VTAX = A.SALE_REQU_VTAX
	,		SALE_TOTA_AMOU = A.SALE_PROD_AMOU + A.SALE_REQU_VTAX
	FROM	(SELECT	BUYI_SEQU_NUMB
			,		SUM(SALE_PROD_AMOU) AS SALE_PROD_AMOU
			,		SUM(SALE_PROD_AMOU * 0.1) AS SALE_REQU_VTAX 
			FROM	MRORDTLIST
			WHERE	SALE_SEQU_NUMB = #{sale_sequ_numb}
			GROUP BY BUYI_SEQU_NUMB) A
	WHERE	SALE_SEQU_NUMB = #{sale_sequ_numb}
	</update>
	<select id="selectAdjustBorgDialogCnt" resultType="int">
		SELECT COUNT(1)
		FROM	SMPBORGS A WITH(NOLOCK)
		LEFT OUTER JOIN	SMPBRANCHS B WITH(NOLOCK)
			ON		A.BORGID = B.BRANCHID
		LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
			ON	B.WORKID = C.WORKID
		WHERE	A.ISUSE = 1
		AND		A.SVCTYPECD = 'BUY'
		AND		C.IS_SKTS_MANAGE = 1
		<if test="srcBorgTypeCd != null and srcBorgTypeCd != ''">
		AND		A.BORGTYPECD = #{srcBorgTypeCd}
		</if>
		<if test="srcBorgNm != null and srcBorgNm != ''">
		AND		A.BORGNM LIKE '%${srcBorgNm}%'
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND		A.CLIENTID = #{srcClientId}
		</if>
		<if  test="multiSelYN != null and multiSelYN != '' ">
		AND    A.BORGTYPECD != 'GRP'
		</if>
		<if  test="isWork != null and isWork != '' ">
		AND    B.WORKID IS NULL
		</if>
		<if  test="isAcc != null and isAcc != '' ">
		AND    B.ACCMANAGEUSERID IS NULL
		</if>
		<if  test="srcWork != null and srcWork != '' ">
		AND    B.WORKID = #{srcWork}
		</if>
		<if  test="userId != null and userId != '' ">
		AND   C.USERID = #{userId}
		</if>
	</select>
	<select id="selectAdjustBorgDialog" resultType="kr.co.bitcube.common.dto.BorgDto">
		SELECT	dbo.FNS_CODENM1BYCODEVAL1('BORGTYPECD', A.BORGTYPECD) AS BORGTYPENM
		,		dbo.FNS_BORG_STRING(A.BORGID) AS BORGNMS
		,		A.BORGID
		,		(CASE	WHEN BORGTYPECD = 'GRP' THEN A.BORGID
						ELSE A.GROUPID
				END) AS GROUPID
		,		(CASE	WHEN BORGTYPECD = 'GRP' THEN ''
						WHEN BORGTYPECD = 'CLT' THEN A.BORGID
						ELSE A.CLIENTID
				END) AS CLIENTID
		,		(CASE	WHEN BORGTYPECD = 'GRP' THEN ''
						WHEN BORGTYPECD = 'CLT' THEN ''
						WHEN BORGTYPECD = 'BCH' THEN A.BORGID
						ELSE A.BRANCHID
				END) AS BRANCHID
		,		A.BORGCD
		,		dbo.FNS_CODENM1BYCODEVAL1('DELI_AREA_CODE', B.AREATYPE) AS AREANM
		,		B.AREATYPE
		FROM	SMPBORGS A WITH(NOLOCK)
		LEFT OUTER JOIN	SMPBRANCHS B WITH(NOLOCK)
			ON		A.BORGID = B.BRANCHID
		LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
			ON	B.WORKID = C.WORKID
		WHERE	A.ISUSE = 1
		AND		A.SVCTYPECD = 'BUY'
		AND		C.IS_SKTS_MANAGE = 1
		<if test="srcBorgTypeCd != null and srcBorgTypeCd != ''">
		AND		A.BORGTYPECD = #{srcBorgTypeCd}
		</if>
		<if test="srcBorgNm != null and srcBorgNm != ''">
		AND		A.BORGNM LIKE '%${srcBorgNm}%'
		</if>
		<if test="srcClientId != null and srcClientId != ''">
		AND		A.CLIENTID = #{srcClientId}
		</if>
		<if  test="multiSelYN != null and multiSelYN != '' ">
		AND    A.BORGTYPECD != 'GRP'
		</if>
		<if  test="isWork != null and isWork != '' ">
		AND    B.WORKID IS NULL
		</if>
		<if  test="isAcc != null and isAcc != '' ">
		AND    B.ACCMANAGEUSERID IS NULL
		</if>
		<if  test="srcWork != null and srcWork != '' ">
		AND    B.WORKID = #{srcWork}
		</if>
		<if  test="userId != null and userId != '' ">
		AND   C.USERID = #{userId}
		</if>
	</select>
	
	<update id="modExpirationDate">
		<if test="expiration_date != null and expiration_date !='' and expiration_date != 'undefined' and sale_sequ_numb != 'undefined'">
		UPDATE MSSALM SET
			EXPIRATION_DATE = CONVERT(DATETIME,#{expiration_date})
		WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
	</update>
	
	<update id="modAdjustSalesConfirm">
		UPDATE MSSALM SET
			SALE_CONF_DATE = NULL
		,	SALE_CONF_USERID = NULL
		WHERE SALE_SEQU_NUMB = #{sale_sequ_numb}
		AND 	NOT EXISTS (	SELECT 1 
								FROM MRORDTLIST A1  WITH(NOLOCK) 
								WHERE A1.BUYI_SEQU_NUMB IS NOT NULL
								AND A1.SALE_SEQU_NUMB = #{sale_sequ_numb}
							)
	</update>
	
	<select id="selectAdjustUpdatePayAmouCnt" resultType="int">
		/** adjust.selectAdjustUpdatePayAmouCnt **/
		SELECT	count(1)
		FROM	MSSALM A WITH(NOLOCK) 
		INNER JOIN (SELECT	SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
					,		SALE_SEQU_NUMB
					FROM MPTREC WITH(NOLOCK) 
					GROUP BY SALE_SEQU_NUMB) B
			ON	B.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
		<![CDATA[	
		WHERE A.SALE_TOTA_AMOU <= B.RECE_PAY_AMOU
		]]>
		AND PAY_AMOU_NUMB IS NULL
		AND A.SALE_SEQU_NUMB = #{saleSequNumb}
	</select>
	
	<update id="updateAdjustUpdateTempPayAmouNumb">
		/** adjust.updateAdjustUpdateTempPayAmouNumb**/
		UPDATE MSSALM SET
			PAY_AMOU_NUMB = '-9'
		WHERE SALE_SEQU_NUMB = #{saleSequNumb}
	</update>
	
	<select id="selectMssalmInfo" resultType="java.util.HashMap">
        /** adjust.selectMssalmInfo**/
        select   CONVERT(VARCHAR(10), clos_sale_date, 121) as clos_sale_date
        ,        sale_sequ_numb
        ,        sale_sequ_name
        ,        sap_jour_numb
        ,        sale_requ_amou
        from     MSSALM WITH(NOLOCK) 
        where    sale_sequ_numb = #{saleSequNumb}
        and      sap_jour_numb is not null
	</select>
	
	<insert id="insertMssalmCancelHist">
	    /** adjust.insertMssalmCancelHist**/
	    insert into mssalm_cancel_hist (
                sale_sequ_numb
        ,       clientid
        ,       branchid
        ,       sale_sequ_name
        ,       crea_sale_userid
        ,       crea_sale_date
        ,       sale_conf_userid
        ,       sale_conf_date
        ,       clos_sale_date
        ,       sale_requ_amou
        ,       sale_requ_vtax
        ,       sale_tota_amou
        ,       sap_jour_numb
        ,       expiration_date
        ,       tran_sap_jour_date
        ,       tran_user_id
        ,       pay_amou_numb
        ,       pay_amou
        ,       tran_stat_flag
        ,       paym_cond_code
        ,       sale_over_month
        ,       sale_over_day
        ,       sale_pay_date
        ,       create_borgid
        ,       cancel_user_id
        ,       cancel_date
        )
        select  sale_sequ_numb
        ,       clientid
        ,       branchid
        ,       sale_sequ_name
        ,       crea_sale_userid
        ,       crea_sale_date
        ,       sale_conf_userid
        ,       sale_conf_date
        ,       clos_sale_date
        ,       sale_requ_amou
        ,       sale_requ_vtax
        ,       sale_tota_amou
        ,       sap_jour_numb
        ,       expiration_date
        ,       tran_sap_jour_date
        ,       tran_user_id
        ,       pay_amou_numb
        ,       pay_amou
        ,       tran_stat_flag
        ,       paym_cond_code
        ,       sale_over_month
        ,       sale_over_day
        ,       sale_pay_date
        ,       create_borgid
        ,       #{userId}
        ,       getdate()
        from    MSSALM WITH(NOLOCK) 
        where    sale_sequ_numb = #{saleSequNumb}
	</insert>
	
	<select id="selectAdjustSapNumCount" resultType="int">
		/** adjust.selectAdjustSapNumCount**/
		SELECT	COUNT(1)
		FROM	MSSALM WITH(NOLOCK) 
		WHERE	SALE_SEQU_NUMB = #{saleSequNumb}
		AND		SAP_JOUR_NUMB IS NOT NULL
	</select>
	
	
	<select id="selectAdjustInfoBySaleSequNumb" resultType="java.util.HashMap">
        /** adjust.selectAdjustInfoBySaleSequNumb**/
        SELECT  sale_sequ_name
        ,       sale_requ_amou
        ,       sale_requ_vtax
        ,       paym_cond_code
        FROM    MSSALM WITH(NOLOCK) 
        WHERE   SALE_SEQU_NUMB = #{saleSequNumb}
        AND     SAP_JOUR_NUMB IS NULL
        AND     SALE_CONF_DATE IS NOT NULL
	</select>
	
    <select id="selectAdjustInfoByBuyiSequNumb" resultType="java.util.HashMap">
        /** adjust.selectAdjustInfoByBuyiSequNumb**/
        SELECT  buyi_requ_amou
        ,       buyi_requ_vtax
        ,       paym_cond_code
        FROM    msbuym WITH(NOLOCK) 
        WHERE   buyi_sequ_numb = #{buyiSequNumb}
        AND     SAP_JOUR_NUMB IS NULL
    </select>
    
	<select id="selectMsbuymInfo" resultType="java.util.HashMap">
		/** adjust.selectMsbuymInfo**/
		select	CONVERT(VARCHAR(10), a.clos_buyi_date, 121) as clos_buyi_date
		,		a.buyi_sequ_numb
		,		b.vendorNm
		,		a.sap_jour_numb
		,		a.buyi_requ_amou
		,		a.vendorid
		from	msbuym a WITH(NOLOCK) 
		inner join smpVendors b WITH(NOLOCK) 
			on a.vendorId = b.vendorId
		where a.buyi_sequ_numb = #{buyiSequNumb}
		and a.sap_jour_numb is not null
	</select>
    
    <select id="selectEbillCheckByBranchId" resultType="int">
        /** adjust.selectEbillCheckByBranchId**/
       select   COUNT(1)
        from    SMPCODES A WITH(NOLOCK)
        INNER JOIN SMPBRANCHS B WITH(NOLOCK)
            ON  A.CODEVAL1 = B.BRANCHCD
        WHERE   A.CODETYPECD = 'NOTSEND_SALEBILL'
        AND     A.ISUSE = '1'
        AND     B.BRANCHID = #{buyBranchId}
    </select>
    
    <select id="selectAdjustCancelValidationCnt" resultType="int">
        /** adjust.selectAdjustCancelValidationCnt**/
        select  count(1)
        ${whereString}
    </select>
    
    <update id="updateSalesConfirmPartCancel">
        /** adjust.updateSalesConfirmPartCancel**/
       update   mrordtlist
       set      sale_sequ_numb = null
       ${whereString}
    </update>
    
    <select id="getIsAdjustCreateStatus" resultType="int">
        /** adjust.getIsAdjustCreateStatus**/
        select  count(1)
        from    mssalm WITH(NOLOCK) 
        where   sale_sequ_numb = #{sale_sequ_numb}
        and     sale_conf_date is null
    </select>
    
    <update id="updateTransferStatus">
    	/** adjust.updateTransferStatus**/
    	UPDATE MSSALM SET
    		TRANSFER_STATUS = #{transferStatus}
    	,	TRANSFER_DATE	= GETDATE()	
    	WHERE SALE_SEQU_NUMB = #{saleSequNumb}
    </update>
    
    <select id="adjustBondsTotalStdMonthExcel3Month" resultType="java.util.HashMap">
    	/** adjust.adjustBondsTotalStdMonthExcel3Month**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID,  M0, M1, M2, M3
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	CONVERT(VARCHAR, B.BRANCHCD) AS BRANCHID 
			,		dbo.FNS_BorgNameByBorgID(A.BRANCHID) AS BRANCHNM
			,		B.BUSINESSNUM 
			,		C.WORKNM
			,		D.USERNM
			,		CONVERT(VARCHAR, dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(B.PAYBILLTYPE))) AS PAYBILLTYPE 
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
					ON	B.WORKID = C.WORKID
			LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
					ON	B.ACCMANAGEUSERID = D.USERID
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY A.BRANCHID, B.BRANCHCD, B.BUSINESSNUM, C.WORKNM, D.USERNM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS BRANCHID 
		,		'' AS BRANCHNM
		,		'' AS BUSINESSNUM
		,		'' AS WORKNM
		,		'' AS USERNM
		,		'' AS PAYBILLTYPE 
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
				AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
				</if>
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.BRANCHID
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, BRANCHNM
	</select>
	
	<select id="adjustBondsTotalStdMonthExcel6Month" resultType="java.util.HashMap">
		/** adjust.adjustBondsTotalStdMonthExcel6Month**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID,  M0, M1, M2, M3, M4, M5, M6
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M6' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5,M6)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	CONVERT(VARCHAR, B.BRANCHCD) AS BRANCHID 
			,		dbo.FNS_BorgNameByBorgID(A.BRANCHID) AS BRANCHNM
			,		B.BUSINESSNUM 
			,		C.WORKNM
			,		D.USERNM
			,		CONVERT(VARCHAR, dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(B.PAYBILLTYPE))) AS PAYBILLTYPE 
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
					ON	B.WORKID = C.WORKID
			LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
					ON	B.ACCMANAGEUSERID = D.USERID
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY A.BRANCHID, B.BRANCHCD, B.BUSINESSNUM, C.WORKNM, D.USERNM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS BRANCHID 
		,		'' AS BRANCHNM
		,		'' AS BUSINESSNUM
		,		'' AS WORKNM
		,		'' AS USERNM
		,		'' AS PAYBILLTYPE 
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))+ SUM(ISNULL(M6, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
				AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
				</if>
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.BRANCHID
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, BRANCHNM
	</select>

	<select id="adjustBondsTotalStdMonthExcel12Month" resultType="java.util.HashMap">
		/** adjust.adjustBondsTotalStdMonthExcel12Month**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID,  M0, M1, M2, M3, M4, M5, M6, M7, M8, M9, M10, M11, M12
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				FROM
				(	
					SELECT 	MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M12' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M11' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M10' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M9' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M8' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M7' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M6' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
							AND		C.ACCMANAGEUSERID = #{srcAccManageUserId}
							</if>
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	CONVERT(VARCHAR, B.BRANCHCD) AS BRANCHID 
			,		dbo.FNS_BorgNameByBorgID(A.BRANCHID) AS BRANCHNM
			,		B.BUSINESSNUM 
			,		C.WORKNM
			,		D.USERNM
			,		CONVERT(VARCHAR, dbo.FNS_CODENM1BYCODEVAL1('PAYMCONDCODE',MAX(B.PAYBILLTYPE))) AS PAYBILLTYPE 
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
			, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
			, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
			, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
			, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
			, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + 
					SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))+
					SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0))+
					SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B
			LEFT OUTER JOIN SMPWORKINFO C WITH(NOLOCK) 
					ON	B.WORKID = C.WORKID
			LEFT OUTER JOIN SMPUSERS D WITH(NOLOCK) 
					ON	B.ACCMANAGEUSERID = D.USERID
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
			AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
			</if>
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY A.BRANCHID, B.BRANCHCD, B.BUSINESSNUM, C.WORKNM, D.USERNM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS BRANCHID 
		,		'' AS BRANCHNM
		,		'' AS BUSINESSNUM
		,		'' AS WORKNM
		,		'' AS USERNM
		,		'' AS PAYBILLTYPE 
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
		, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
		, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
		, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
		, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
		, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + 
				SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))+
				SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0))+
				SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M7, 0))  AS M7
				, 		SUM(ISNULL(M8, 0))  AS M8
				, 		SUM(ISNULL(M9, 0))  AS M9
				, 		SUM(ISNULL(M10, 0))  AS M10
				, 		SUM(ISNULL(M11, 0))  AS M11
				, 		SUM(ISNULL(M12, 0))  AS M12
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + 
						SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0))+ SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) +
						SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0))+ SUM(ISNULL(M10, 0)) + SUM(ISNULL(M11, 0))  + SUM(ISNULL(M12, 0))AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcAccManageUserId != null and srcAccManageUserId != ''">
				AND		B.ACCMANAGEUSERID = #{srcAccManageUserId}
				</if>
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.BRANCHID
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, BRANCHNM
	</select>
	
	<select id="adjustBondsTotalStdMonthExcel3MonthClient" resultType="java.util.HashMap">
		/**asjust.adjustBondsTotalStdMonthExcel3MonthClient**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID, CLIENTID,  M0, M1, M2, M3
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				,		SALE_VAL.CLIENTID
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					,		CLIENTID
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	A.CLIENTID
			,		B.BUSINESSNUM
			,		dbo.FNS_BorgNameByBorgID(A.CLIENTID) AS CLIENTNM
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY	A.CLIENTID, B.BUSINESSNUM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS CLIENTID 
		,		'' AS CLIENTNM
		,		'' AS BUSINESSNUM
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.CLIENTID, B.BUSINESSNUM
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, CLIENTNM
	</select>
	<select id="adjustBondsTotalStdMonthExcel6MonthClient" resultType="java.util.HashMap">
		/**asjust.adjustBondsTotalStdMonthExcel6MonthClient**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID, CLIENTID,  M0, M1, M2, M3, M4, M5, M6
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				,		SALE_VAL.CLIENTID
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M6' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL	
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					,		CLIENTID
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5,M6)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	A.CLIENTID
			,		B.BUSINESSNUM
			,		dbo.FNS_BorgNameByBorgID(A.CLIENTID) AS CLIENTNM
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY	A.CLIENTID, B.BUSINESSNUM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS CLIENTID 
		,		'' AS CLIENTNM
		,		'' AS BUSINESSNUM
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0))) AS TOTAL		
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) + SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.CLIENTID, B.BUSINESSNUM
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, CLIENTNM
	</select>
	
	<select id="adjustBondsTotalStdMonthExcel12MonthClient" resultType="java.util.HashMap">
		/**asjust.adjustBondsTotalStdMonthExcel6MonthClient**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID, CLIENTID,  M0, M1, M2, M3, M4, M5, M6,M7, M8, M9, M10, M11, M12
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				,		SALE_VAL.CLIENTID
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M12' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M11' AS COL_NM UNION ALL	
					SELECT 	MONTH(DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M10' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M9' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M8' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M7' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M6' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL	
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					,		CLIENTID
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	A.CLIENTID
			,		B.BUSINESSNUM
			,		dbo.FNS_BorgNameByBorgID(A.CLIENTID) AS CLIENTNM
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
			, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
			, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
			, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
			, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
			, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
					+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0))+ SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0))
					+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0))) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY	A.CLIENTID, B.BUSINESSNUM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS CLIENTID 
		,		'' AS CLIENTNM
		,		'' AS BUSINESSNUM
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
		, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
		, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
		, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
		, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
		, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
				+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0))
				+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0))) AS TOTAL
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M7, 0))  AS M7
				, 		SUM(ISNULL(M8, 0))  AS M8
				, 		SUM(ISNULL(M9, 0))  AS M9
				, 		SUM(ISNULL(M10, 0))  AS M10
				, 		SUM(ISNULL(M11, 0))  AS M11
				, 		SUM(ISNULL(M12, 0))  AS M12
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
						+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0))
						+ SUM(ISNULL(M10, 0))+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.CLIENTID, B.BUSINESSNUM
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, CLIENTNM
	</select>
	
	<select id="adjustBondsTotalStdMonthExcel30MonthClient" resultType="java.util.HashMap">
		/**asjust.adjustBondsTotalStdMonthExcel6MonthClient**/
		WITH TMP_TABLE(
			CREAT_MONTH, CREAT_DATE, BRANCHID, CLIENTID,  M0, M1, M2, M3, M4, M5, M6,M7, M8, M9, M10, M11, M12, M13, M14, M15, M16, M17, M18, M19, M20, M21, M22, M23, M24, M25, M26, M27, M28, M29, M30, M31
		) AS (
			SELECT	*
			FROM
			(
				SELECT
						STD_MONTH.CREAT_MONTH
				,		STD_MONTH.CREAT_DATE
				,		STD_MONTH.COL_NM
				,		SALE_VAL.BRANCHID
				,		BALANCE_AMOU
				,		SALE_VAL.CLIENTID
				FROM
				(
					SELECT 	MONTH(DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M31' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M30' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -29, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -29, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M29' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -28, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -28, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M28' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -27, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -27, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M27' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -26, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -26, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M26' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -25, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -25, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M25' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -24, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -24, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M24' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -23, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -23, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M23' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -22, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -22, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M22' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -21, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -21, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M21' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -20, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -20, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M20' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -19, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -19, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M19' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -18, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -18, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M18' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -17, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -17, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M17' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -16, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -16, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M16' AS COL_NM UNION ALL				
					SELECT 	MONTH(DATEADD(MONTH, -15, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -15, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M15' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -14, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -14, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M14' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -13, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -13, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M13' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -12, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M12' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -11, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M11' AS COL_NM UNION ALL	
					SELECT 	MONTH(DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -10, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M10' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -9, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M9' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -8, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M8' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -7, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M7' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -6, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M6' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -5, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M5' AS COL_NM UNION ALL	
					SELECT 	MONTH(DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -4, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M4' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -3, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M3' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -2, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M2' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, -1, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M1' AS COL_NM UNION ALL
					SELECT 	MONTH(DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
					,		CONVERT(VARCHAR(6), DATEADD(MONTH, 0, CONVERT(DATETIME, #{stdDate} + '01')),112) AS CREAT_DATE
					,		'M0' AS COL_NM
				)STD_MONTH
				LEFT OUTER JOIN
				(
					SELECT	BRANCHID
					,		CREAT_MONTH
					,		CREAT_DATE
					,		SALE_TOTA_AMOU
					,		RECE_PAY_AMOU
					,		SALE_TOTA_AMOU - RECE_PAY_AMOU AS BALANCE_AMOU
					,		CLIENTID
					FROM
					(
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(MAX(CLOS_SALE_DATE)) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), MAX(CLOS_SALE_DATE), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE BETWEEN DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01')) AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdDate} + '01 23:59')))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA1
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
						UNION ALL
						SELECT	BRANCHID
						,		SALE_TOTA_AMOU
						,		SALE_SEQU_NUMB
						,		RECE_PAY_AMOU
						,		CREAT_MONTH
						,		CREAT_DATE
						,		CLIENTID
						FROM
						(
							SELECT	A.BRANCHID
							,		ISNULL(MAX(A.SALE_TOTA_AMOU), 0) AS SALE_TOTA_AMOU
							,		A.SALE_SEQU_NUMB
							,		ISNULL(SUM(B.RECE_PAY_AMOU), 0) AS RECE_PAY_AMOU
							,		MONTH(DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))) AS CREAT_MONTH
							,		CONVERT(VARCHAR(6), DATEADD(MONTH, -31, CONVERT(DATETIME, #{stdDate} + '01')), 112) AS CREAT_DATE
							,		A.CLIENTID
							FROM 	MSSALM A WITH(NOLOCK) 
									LEFT OUTER JOIN
									(
										SELECT 	B.SALE_SEQU_NUMB
										,		B.RECE_PAY_AMOU
										,		MONTH(B.CREAT_DATE) AS CREAT_MONTH
										,		CONVERT(VARCHAR(6), B.CREAT_DATE, 112) AS CREAT_DATE
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.ALRAM_DATE &lt; DATEADD(D,-1,DATEADD(MONTH,1,CONVERT(DATETIME,#{stdDate}+'01 23:23:59')))
									)B
									ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
							,		SMPBRANCHS C WITH(NOLOCK) 
							WHERE	A.SAP_JOUR_NUMB IS NOT NULL
							AND		A.BRANCHID = C.BRANCHID
							AND		A.CLOS_SALE_DATE &lt; DATEADD(MONTH, -30, CONVERT(DATETIME, #{stdDate} + '01'))
							AND		A.TRANSFER_STATUS = '1'
							<if test="srcBusinessNum != null and srcBusinessNum != ''">
							AND		C.BUSINESSNUM = #{srcBusinessNum}
							</if>
							GROUP BY A.BRANCHID, A.SALE_SEQU_NUMB, A.CLIENTID
						)AA2
						WHERE SALE_TOTA_AMOU - RECE_PAY_AMOU != 0
					)AA
				)SALE_VAL
				ON  STD_MONTH.CREAT_DATE = SALE_VAL.CREAT_DATE
			)XX
			PIVOT(SUM(BALANCE_AMOU) FOR COL_NM IN( M0,M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11,M12,M13,M14,M15,M16,M17,M18,M19,M20,M21,M22,M23,M24,M25,M26,M27,M28,M29,M30,M31)) AS PVT
		)
		SELECT	*
		FROM
		(
			SELECT 	A.CLIENTID
			,		B.BUSINESSNUM
			,		dbo.FNS_BorgNameByBorgID(A.CLIENTID) AS CLIENTNM
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
			, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
			, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
			, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
			, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
			, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
			, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
			, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
			, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
			, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
			, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
			, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
			, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
			, 		CONVERT(VARCHAR, SUM(ISNULL(M13, 0)))  AS M13
			, 		CONVERT(VARCHAR, SUM(ISNULL(M14, 0)))  AS M14
			, 		CONVERT(VARCHAR, SUM(ISNULL(M15, 0)))  AS M15
			, 		CONVERT(VARCHAR, SUM(ISNULL(M16, 0)))  AS M16
			, 		CONVERT(VARCHAR, SUM(ISNULL(M17, 0)))  AS M17
			, 		CONVERT(VARCHAR, SUM(ISNULL(M18, 0)))  AS M18
			, 		CONVERT(VARCHAR, SUM(ISNULL(M19, 0)))  AS M19
			, 		CONVERT(VARCHAR, SUM(ISNULL(M20, 0)))  AS M20
			, 		CONVERT(VARCHAR, SUM(ISNULL(M21, 0)))  AS M21
			, 		CONVERT(VARCHAR, SUM(ISNULL(M22, 0)))  AS M22
			, 		CONVERT(VARCHAR, SUM(ISNULL(M23, 0)))  AS M23
			, 		CONVERT(VARCHAR, SUM(ISNULL(M24, 0)))  AS M24
			, 		CONVERT(VARCHAR, SUM(ISNULL(M25, 0)))  AS M25
			, 		CONVERT(VARCHAR, SUM(ISNULL(M26, 0)))  AS M26
			, 		CONVERT(VARCHAR, SUM(ISNULL(M27, 0)))  AS M27
			, 		CONVERT(VARCHAR, SUM(ISNULL(M28, 0)))  AS M28
			, 		CONVERT(VARCHAR, SUM(ISNULL(M29, 0)))  AS M29
			, 		CONVERT(VARCHAR, SUM(ISNULL(M30, 0)))  AS M30
			, 		CONVERT(VARCHAR, SUM(ISNULL(M31, 0)))  AS M31
			, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
					+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0))+ SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0))
					+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0)) + SUM(ISNULL(M14, 0)) + SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0))
					+ SUM(ISNULL(M17, 0)) + SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0)) + SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0))
					+ SUM(ISNULL(M23, 0)) + SUM(ISNULL(M24, 0)) + SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0)) + SUM(ISNULL(M28, 0))
					+ SUM(ISNULL(M29, 0)) + SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0)) ) AS TOTAL
			,		1 AS ORDER_COL
			FROM	TMP_TABLE A
			,		SMPBRANCHS B WITH(NOLOCK) 
			WHERE	A.BRANCHID = B.BRANCHID
			<if test="srcBusinessNum != null and srcBusinessNum != ''">
			AND		B.BUSINESSNUM = #{srcBusinessNum}
			</if>
			GROUP BY	A.CLIENTID, B.BUSINESSNUM
		)RST
		WHERE	CONVERT(DECIMAL, TOTAL) != 0
		UNION ALL
		SELECT 	'합계' AS CLIENTID 
		,		'' AS CLIENTNM
		,		'' AS BUSINESSNUM
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)))  AS M0
		, 		CONVERT(VARCHAR, SUM(ISNULL(M1, 0)))  AS M1
		, 		CONVERT(VARCHAR, SUM(ISNULL(M2, 0)))  AS M2
		, 		CONVERT(VARCHAR, SUM(ISNULL(M3, 0)))  AS M3
		, 		CONVERT(VARCHAR, SUM(ISNULL(M4, 0)))  AS M4
		, 		CONVERT(VARCHAR, SUM(ISNULL(M5, 0)))  AS M5
		, 		CONVERT(VARCHAR, SUM(ISNULL(M6, 0)))  AS M6
		, 		CONVERT(VARCHAR, SUM(ISNULL(M7, 0)))  AS M7
		, 		CONVERT(VARCHAR, SUM(ISNULL(M8, 0)))  AS M8
		, 		CONVERT(VARCHAR, SUM(ISNULL(M9, 0)))  AS M9
		, 		CONVERT(VARCHAR, SUM(ISNULL(M10, 0)))  AS M10
		, 		CONVERT(VARCHAR, SUM(ISNULL(M11, 0)))  AS M11
		, 		CONVERT(VARCHAR, SUM(ISNULL(M12, 0)))  AS M12
		, 		CONVERT(VARCHAR, SUM(ISNULL(M13, 0)))  AS M13
		, 		CONVERT(VARCHAR, SUM(ISNULL(M14, 0)))  AS M14
		, 		CONVERT(VARCHAR, SUM(ISNULL(M15, 0)))  AS M15
		, 		CONVERT(VARCHAR, SUM(ISNULL(M16, 0)))  AS M16
		, 		CONVERT(VARCHAR, SUM(ISNULL(M17, 0)))  AS M17
		, 		CONVERT(VARCHAR, SUM(ISNULL(M18, 0)))  AS M18
		, 		CONVERT(VARCHAR, SUM(ISNULL(M19, 0)))  AS M19
		, 		CONVERT(VARCHAR, SUM(ISNULL(M20, 0)))  AS M20
		, 		CONVERT(VARCHAR, SUM(ISNULL(M21, 0)))  AS M21
		, 		CONVERT(VARCHAR, SUM(ISNULL(M22, 0)))  AS M22
		, 		CONVERT(VARCHAR, SUM(ISNULL(M23, 0)))  AS M23
		, 		CONVERT(VARCHAR, SUM(ISNULL(M24, 0)))  AS M24
		, 		CONVERT(VARCHAR, SUM(ISNULL(M25, 0)))  AS M25
		, 		CONVERT(VARCHAR, SUM(ISNULL(M26, 0)))  AS M26
		, 		CONVERT(VARCHAR, SUM(ISNULL(M27, 0)))  AS M27
		, 		CONVERT(VARCHAR, SUM(ISNULL(M28, 0)))  AS M28
		, 		CONVERT(VARCHAR, SUM(ISNULL(M29, 0)))  AS M29
		, 		CONVERT(VARCHAR, SUM(ISNULL(M30, 0)))  AS M30
		, 		CONVERT(VARCHAR, SUM(ISNULL(M31, 0)))  AS M31
		, 		CONVERT(VARCHAR, SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
				+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0)) + SUM(ISNULL(M10, 0))
				+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0)) + SUM(ISNULL(M14, 0)) + SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0))
				+ SUM(ISNULL(M17, 0)) + SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0)) + SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0))
				+ SUM(ISNULL(M23, 0)) + SUM(ISNULL(M24, 0)) + SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0)) + SUM(ISNULL(M28, 0))
				+ SUM(ISNULL(M29, 0)) + SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0)) ) AS TOTAL
		,		2 AS ORDER_COL
		FROM
		(
			SELECT	*
			FROM
			(
				SELECT 	SUM(ISNULL(M0, 0))  AS M0
				, 		SUM(ISNULL(M1, 0))  AS M1
				, 		SUM(ISNULL(M2, 0))  AS M2
				, 		SUM(ISNULL(M3, 0))  AS M3
				, 		SUM(ISNULL(M4, 0))  AS M4
				, 		SUM(ISNULL(M5, 0))  AS M5
				, 		SUM(ISNULL(M6, 0))  AS M6
				, 		SUM(ISNULL(M7, 0))  AS M7
				, 		SUM(ISNULL(M8, 0))  AS M8
				, 		SUM(ISNULL(M9, 0))  AS M9
				, 		SUM(ISNULL(M10, 0))  AS M10
				, 		SUM(ISNULL(M11, 0))  AS M11
				, 		SUM(ISNULL(M12, 0))  AS M12
				, 		SUM(ISNULL(M13, 0))  AS M13
				, 		SUM(ISNULL(M14, 0))  AS M14
				, 		SUM(ISNULL(M15, 0))  AS M15
				, 		SUM(ISNULL(M16, 0))  AS M16
				, 		SUM(ISNULL(M17, 0))  AS M17
				, 		SUM(ISNULL(M18, 0))  AS M18
				, 		SUM(ISNULL(M19, 0))  AS M19
				, 		SUM(ISNULL(M20, 0))  AS M20
				, 		SUM(ISNULL(M21, 0))  AS M21
				, 		SUM(ISNULL(M22, 0))  AS M22
				, 		SUM(ISNULL(M23, 0))  AS M23
				, 		SUM(ISNULL(M24, 0))  AS M24
				, 		SUM(ISNULL(M25, 0))  AS M25
				, 		SUM(ISNULL(M26, 0))  AS M26
				, 		SUM(ISNULL(M27, 0))  AS M27
				, 		SUM(ISNULL(M28, 0))  AS M28
				, 		SUM(ISNULL(M29, 0))  AS M29
				, 		SUM(ISNULL(M30, 0))  AS M30
				, 		SUM(ISNULL(M31, 0))  AS M31
				, 		SUM(ISNULL(M0, 0)) + SUM(ISNULL(M1, 0)) + SUM(ISNULL(M2, 0)) + SUM(ISNULL(M3, 0)) + SUM(ISNULL(M4, 0)) 
						+ SUM(ISNULL(M5, 0)) + SUM(ISNULL(M6, 0)) + SUM(ISNULL(M7, 0)) + SUM(ISNULL(M8, 0)) + SUM(ISNULL(M9, 0))
						+ SUM(ISNULL(M10, 0))+ SUM(ISNULL(M11, 0)) + SUM(ISNULL(M12, 0)) + SUM(ISNULL(M13, 0))+ SUM(ISNULL(M14, 0))
						+ SUM(ISNULL(M15, 0)) + SUM(ISNULL(M16, 0))+ SUM(ISNULL(M17, 0)) + SUM(ISNULL(M18, 0)) + SUM(ISNULL(M19, 0))
						+ SUM(ISNULL(M20, 0)) + SUM(ISNULL(M21, 0)) + SUM(ISNULL(M22, 0)) + SUM(ISNULL(M23, 0)) + SUM(ISNULL(M24, 0))
						+ SUM(ISNULL(M25, 0)) + SUM(ISNULL(M26, 0)) + SUM(ISNULL(M27, 0))  + SUM(ISNULL(M28, 0)) + SUM(ISNULL(M29, 0))
						+ SUM(ISNULL(M30, 0)) + SUM(ISNULL(M31, 0)) AS TOTAL
				FROM	TMP_TABLE A
				,		SMPBRANCHS B WITH(NOLOCK) 
				WHERE	A.BRANCHID = B.BRANCHID
				<if test="srcBusinessNum != null and srcBusinessNum != ''">
				AND		B.BUSINESSNUM = #{srcBusinessNum}
				</if>
				GROUP BY A.CLIENTID, B.BUSINESSNUM
			)RST
			WHERE	CONVERT(DECIMAL, TOTAL) != 0				
		)RST2
		ORDER BY ORDER_COL, CLIENTNM
	</select>
	
	<select id="adjustBranchBondsCompanyList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustBranchBondsCompanyList **/
		SELECT	A.*
		,		B.ACCMANAGEUSERID 
		,		B.BRANCHNM 
		,		B.BUSINESSNUM
<!-- 		,		CONVERT(VARCHAR(10),DATEADD(DAY, CONVERT(INT, B.AUTORDERLIMITPERIOD), A.CLOS_SALE_DATE),120) AS EXPIRATION_DATE -->
		<![CDATA[
		,		SALE_OVER_DAY
		,		SALE_OVER_MONTH
		,		TRAN_STATUS_NM
		,		REPLACE(CONVERT(VARCHAR(30),CAST(ISNULL(A.RECE_PAY_AMOU, 0) AS MONEY),1),'.00','')
					 + '<BR/>('
					 + ISNULL(CONVERT(VARCHAR(10), A.ALRAM_DATE, 120),'-')+')' 
				AS  PAYANDDATE
		]]>
		FROM( 
				SELECT	A.CLIENTID 
				,		CASE WHEN A.BRANCHID = '0' THEN (
															SELECT A1.BORGID 
															FROM SMPBORGS A1 , SMPBRANCHS B1 
															WHERE A1.BORGID = B1.BRANCHID
															AND A1.CLIENTID = A.CLIENTID 
															AND A1.ISKEY = '1') 
							 ELSE A.BRANCHID 
						END AS BRANCHID 
				,		A.SALE_SEQU_NUMB 
				,		A.SAP_JOUR_NUMB 
				,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE 
				,		A.SALE_TOTA_AMOU 
				,		CONVERT(VARCHAR(10), A.SALE_PAY_DATE, 120) AS SALE_PAY_DATE 
				,		TRAN_STAT_FLAG 
				,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU 
				,		ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU 
				,		CREATE_BORGID 
				,		ISNULL(SALE_REQU_AMOU, 0) as SALE_REQU_AMOU 
				,		CONVERT(VARCHAR(10), B.ALRAM_DATE, 120) AS ALRAM_DATE
				,		ISNULL(CONVERT(VARCHAR(10), B.ALRAM_DATE, 120),CONVERT(VARCHAR(10),GETDATE(),120)) AS ALRAM_DATE2
				,		A.TRANSFER_STATUS AS TRANSFER_STATUS 
				,		CASE WHEN A.TRANSFER_STATUS = 0 THEN '예' ELSE '아니오' END AS TRANSFER_STATUS_TYPE
				,		C.PUBCODE
				,		CONVERT(VARCHAR(10), A.EXPIRATION_DATE, 120) AS EXPIRATION_DATE
		<![CDATA[
				,		(CASE WHEN A.SALE_OVER_DAY < 0 THEN 0 ELSE A.SALE_OVER_DAY END) AS SALE_OVER_DAY
				,		(CASE WHEN A.SALE_OVER_MONTH<0 THEN 0 ELSE A.SALE_OVER_MONTH END) AS SALE_OVER_MONTH
				,		CASE
							WHEN ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) <= 0 THEN '-'
							ELSE
								CASE 	 
									WHEN A.TRAN_STAT_FLAG = '0' THEN '정상'
									ELSE '관리'
								END	
						END AS 	TRAN_STATUS_NM
		]]>
				FROM MSSALM A  WITH(NOLOCK) 
				LEFT OUTER JOIN(
									SELECT	SALE_SEQU_NUMB 
									,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU 
									,		MAX(ALRAM_DATE) AS ALRAM_DATE 
									FROM MPTREC  WITH(NOLOCK) 
									GROUP BY SALE_SEQU_NUMB 
				)B 
					ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB 
				LEFT OUTER JOIN(
								SELECT 	A.RESSEQ
								,		MAX(A.PUBDATE) AS PUBDATE  
								,		MAX(A.PUBCODE) AS PUBCODE 
								FROM 	SALEEBILL A WITH(NOLOCK) 
								, 		EB_HISTORY B WITH(NOLOCK) 
								WHERE 	A.PUBCODE = B.PUBCODE
								AND		A.RESSEQ LIKE '3700%'
								AND		A.LOADSTATUS = '1'
								AND 	B.STATUS != '14'
								GROUP BY A.RESSEQ
				) C
					ON A.SAP_JOUR_NUMB = C.RESSEQ
				WHERE A.SAP_JOUR_NUMB IS NOT NULL
		)A
		INNER JOIN SMPBRANCHS B WITH(NOLOCK) 
			ON A.BRANCHID = B.BRANCHID
		INNER JOIN SMPCODES C WITH(NOLOCK) 
			ON B.CONTRACTSPECIAL = C.CODEVAL1
			AND C.CODETYPECD = 'BRANCH_EXPIRATION'
		WHERE	
		A.CLIENTID = '${clientId}' 
		AND	A.SALE_REQU_AMOU != 0
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '10'">
		AND     (ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(A.RECE_PAY_AMOU, 0)) > 0
		</if>
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '20'">
		AND     (ISNULL(A.SALE_TOTA_AMOU, 0) - ISNULL(A.RECE_PAY_AMOU, 0)) &lt;=  0
		</if>
		<if test="srcTranStat != null and srcTranStat != ''">
		AND 	ISNULL(A.TRAN_STAT_FLAG, '1') = '${srcTranStat}'
		</if>
		<if test="srcClosStartDate != null and srcClosStartDate != '' and srcClosEndDate != null and srcClosEndDate != ''">
		AND     REPLACE(CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120), '-', '') BETWEEN '${srcClosStartDate}' AND '${srcClosEndDate}'
		</if>
		<if test="srcBranchId != null and srcBranchId != ''">
		AND     B.BRANCHID = '${srcBranchId}'
		</if>
		<if test="srcTransferStatus != null and srcTransferStatus != ''">
		AND     A.TRANSFER_STATUS = #{srcTransferStatus}
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>		
	</select>
	
	<select id="adjustVenDebtCompanyList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/** adjust.adjustVenDebtCompanyList **/
		SELECT 	A.VENDORID
		,		A.BUYI_SEQU_NUMB
		,		A.SAP_JOUR_NUMB
		,		CONVERT(VARCHAR(10), A.CLOS_BUYI_DATE, 120) AS CLOS_BUYI_DATE
		,		A.BUYI_TOTA_AMOU
		,		CONVERT(VARCHAR(10), A.BUYI_PAY_DATE, 120) AS BUYI_PAY_DATE
		,		ISNULL(B.RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU
		,		ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0) AS NONE_PAYM_AMOU
		,		CASE 
					WHEN A.TRAN_STAT_FLAG = '0' THEN '정상'
					ELSE '관리'
				END AS 	TRAN_STATUS_NM
		,		CONVERT(VARCHAR(10), A.EXPIRATION_DATE, 120) AS EXPIRATION_DATE
		,		BUYI_OVER_DAY	
		,		BUYI_OVER_MONTH
		,		A.ELE_ETC_DATE AS ELE_ETC_DATE
		,		A.BUYI_SEQU_NUMB
		FROM	MSBUYM A WITH(NOLOCK) 
		LEFT OUTER JOIN
				(
				SELECT 	BUYI_SEQU_NUMB
				,		SUM(RECE_PAY_AMOU) AS RECE_PAY_AMOU
				,		MAX(CREAT_DATE) AS CREAT_DATE
				FROM 	MPTPAY  WITH(NOLOCK) 
				GROUP BY BUYI_SEQU_NUMB  
				)B ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
		WHERE	A.VENDORID = #{vendorId}
		AND     A.SAP_JOUR_NUMB IS NOT NULL 	
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '10'">
		AND     (ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) > 0
		</if>
		<if test="srcPayStat != null and srcPayStat != '' and srcPayStat == '20'">
		AND     (ISNULL(A.BUYI_TOTA_AMOU, 0) - ISNULL(B.RECE_PAY_AMOU, 0)) &lt;=  0
		</if>
		<if test="srcTranStat != null and srcTranStat != ''">
		AND 	ISNULL(A.TRAN_STAT_FLAG, '1') = #{srcTranStat}
		</if>
		<if test="srcClosStartDate != null and srcClosStartDate != '' and srcClosEndDate != null and srcClosEndDate != ''">
		AND     REPLACE(CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120), '-', '') BETWEEN #{srcClosStartDate} AND #{srcClosEndDate}
		</if>
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>			
	</select>
	
	<select id="adjustVenPurcConfirmDetailList" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.adjustVenPurcConfirmDetailList */
		SELECT  A.ORDE_IDEN_NUMB
		,       A.ORDE_SEQU_NUMB
		,       A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDER_NUM 
		,       A.PURC_IDEN_NUMB
		,       A.DELI_IDEN_NUMB
		,       A.RECE_IDEN_NUMB
		,       A.ORDE_TYPE_CLAS
		,       dbo.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',A.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
		,       A.GROUPID
		,       A.CLIENTID
		,       A.BRANCHID
		,		CONVERT(VARCHAR, A.ORDE_REGI_DATE, 23) AS ORDE_REGI_DATE
		,		CONVERT(VARCHAR, A.DELI_REGI_DATE, 23) AS DELI_REGI_DATE
		,		CONVERT(VARCHAR, A.RECE_REGI_DATE, 23) AS RECE_REGI_DATE
		,       A.DELI_AREA_CODE
		,       A.VENDORID
		,       A.CONS_IDEN_NAME
		,       A.DISP_GOOD_ID
		,       A.VTAX_CLAS_CODE
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN A.SALE_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS SALE_PROD_TAX
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN A.PURC_PROD_AMOU * 0.1
		          	ELSE 0 
			    END AS PURC_PROD_TAX	    	
		,       CASE 
			    	WHEN A.VTAX_CLAS_CODE = '10' THEN (A.PURC_PROD_AMOU * 0.1) + A.PURC_PROD_AMOU
		          	ELSE A.PURC_PROD_AMOU 
			    END AS BUYI_TOTA_AMOU
		,       A.SALE_PROD_QUAN
		,       A.SALE_PROD_PRIS
		,       A.SALE_PROD_AMOU
		,       A.PURC_PROD_PRIS
		,       A.PURC_PROD_AMOU
		,       A.GOOD_IDEN_NUMB
		,       A.GOOD_NAME
		,       A.ORDE_USER_ID
		,       A.REAL_RECE_NUMB
		,       A.SALE_SEQU_NUMB
		,       A.BUYI_SEQU_NUMB
		,		E.GOOD_SPEC_DESC
		,		E.GOOD_ST_SPEC_DESC
		FROM 	(
                    SELECT * FROM mrordtlist B WITH(NOLOCK) 
                    WHERE NOT EXISTS
                    (
                    SELECT 1 FROM mrordtlist D WITH(NOLOCK) 
                    WHERE
                        B.orde_iden_numb = D.orde_iden_numb AND B.orde_sequ_numb = D.orde_sequ_numb
                    AND
                        ((orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '1')
                    OR    (orde_iden_numb = 'GEN1311010095' AND orde_sequ_numb = '3'))
                    )
		) A
		LEFT OUTER JOIN MCGOODVENDOR E WITH(NOLOCK) 
			ON	A.good_iden_numb = E.good_iden_numb
			AND	A.vendorid = E.vendorid
		, 		MSSALM B WITH(NOLOCK) 
		WHERE	1 = 1
		AND		A.VENDORID = #{vendorId}
		AND		A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		AND     B.SALE_CONF_DATE IS NOT NULL
		<if test="srcPurcStatus != null and srcPurcStatus != '' and srcPurcStatus == '10'">
		AND 	A.BUYI_SEQU_NUMB IS NULL
		</if>
		<if test="srcPurcStatus != null and srcPurcStatus != '' and srcPurcStatus == '20'">
		AND 	A.BUYI_SEQU_NUMB = #{buyi_sequ_numb}
		</if>
		<if test="srcOrdeNumb != null and srcOrdeNumb != ''">
		AND 	A.ORDE_IDEN_NUMB LIKE '%' + #{srcOrdeNumb} + '%'
		</if>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>
	</select>

	<select id="adjustSalesTransmissionPayDateListForExcel" resultType="java.util.HashMap">
		/* adjust.adjustSalesTransmissionPayDateListForExcel */
				
		SELECT	CONVERT(VARCHAR(200), A.SALE_SEQU_NUMB ) AS SALE_SEQU_NUMB 
		,		CONVERT(VARCHAR(200), A.SALE_SEQU_NAME ) AS SALE_SEQU_NAME 
		,		CONVERT(VARCHAR(200), A.BRANCHID ) AS BRANCHID 
		,		CONVERT(VARCHAR(200), REPLACE(A.SALE_TOTA_AMOU, '.00', '')) AS SALE_TOTA_AMOU 
		,		CONVERT(VARCHAR(200), REPLACE(A.RECE_PAY_AMOU, '.00', '')) AS RECE_PAY_AMOU 
		,		CONVERT(VARCHAR(200), REPLACE(A.NONE_COLL_AMOU, '.00', '')) AS TMP_NONE_COLL_AMOU 
		,		CONVERT(VARCHAR(200), REPLACE(A.SALE_REQU_AMOU, '.00', '')) AS SALE_REQU_AMOU 
		,		CONVERT(VARCHAR(200), REPLACE(A.PAY_AMOU, '.00', '')) AS PAY_AMOU 
		,		CONVERT(VARCHAR(200), A.ID ) AS ID 
		,		CONVERT(VARCHAR(200), A.RECE_SEQU_NUM ) AS RECE_SEQU_NUM 
		,		CONVERT(VARCHAR(200), A.CLOS_SALE_DATE ) AS CLOS_SALE_DATE 
		,		CONVERT(VARCHAR(200), A.ALRAM_DATE ) AS ALRAM_DATE 
		,		CONVERT(VARCHAR(200), B.BRANCHNM) AS BRANCHNM 
		,		CONVERT(VARCHAR(200), B.BUSINESSNUM) AS BUSINESSNUM 
		,		CONVERT(VARCHAR(200), A.SAP_JOUR_NUMB) AS SAP_JOUR_NUMB 
		,		D.USERNM AS accManageUserId 
		,		CONVERT(VARCHAR(200), E.WORKNM) AS WORKNM
		FROM ( 
				SELECT	A.SAP_JOUR_NUMB 
				,		A.SALE_SEQU_NUMB 
				,		A.SALE_SEQU_NAME 
				,		A.BRANCHID 
				,		ISNULL(SALE_TOTA_AMOU, 0) AS SALE_TOTA_AMOU 
				,		ISNULL(SALE_REQU_AMOU, 0) AS SALE_REQU_AMOU 
				,		ISNULL(RECE_PAY_AMOU, 0) AS RECE_PAY_AMOU 
				,		ISNULL(SALE_TOTA_AMOU, 0) - ISNULL(RECE_PAY_AMOU, 0) AS NONE_COLL_AMOU 
				,		ROW_NUMBER() OVER (PARTITION BY A.SALE_SEQU_NUMB, A.BRANCHID ORDER BY B.CREAT_DATE ASC) AS ID 
				,		B.RECE_SEQU_NUM 
				,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE 
				,		CONVERT(VARCHAR(10), B.ALRAM_DATE, 120) AS ALRAM_DATE 
				, A.PAY_AMOU 
				, A.SALE_CONF_DATE 
				, A.CREATE_BORGID 
				FROM MSSALM A  WITH(NOLOCK) 
				LEFT OUTER JOIN MPTREC B  WITH(NOLOCK) 
					ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB 
				LEFT OUTER JOIN SMPBORGS C  WITH(NOLOCK) 
					ON C.BORGID = CASE WHEN A.BRANCHID = '0' THEN A.CLIENTID 
								ELSE A.BRANCHID 
							END 
				WHERE A.SAP_JOUR_NUMB IS NOT NULL
				<if test="srcDateCalc != null and srcDateCalc != '' ">
					<if test="srcDateCalc == 'payDate' ">
						AND 	ALRAM_DATE BETWEEN CONVERT(DATETIME, #{srcStartDate} ) AND CONVERT(DATETIME, #{srcEndDate} + ' 23:59')
					</if>
				</if>
<!-- 				<if test="(srcPayStartDate != null and srcPayStartDate != '') and (srcPayEndDate != null and srcPayEndDate != '')"> -->
<!-- 				AND ALRAM_DATE BETWEEN CONVERT(DATETIME, #{srcPayStartDate} ) AND CONVERT(DATETIME, #{srcPayEndDate} + ' 23:59') -->
<!-- 				</if> -->
			)A, SMPBRANCHS B  WITH(NOLOCK) 
		LEFT OUTER JOIN SMPUSERS D  WITH(NOLOCK) 
			ON B.ACCMANAGEUSERID = D.USERID
		LEFT OUTER JOIN SMPWORKINFO E WITH(NOLOCK) 
			ON B.WORKID = E.WORKID
		WHERE	A.BRANCHID = B.BRANCHID
		AND		A.CREATE_BORGID = #{create_borgid}	
		AND		A.SALE_REQU_AMOU != 0
		<if test="srcSalesName != null and srcSalesName != ''">
		AND		A.SALE_SEQU_NAME LIKE '%' + #{srcSalesName} + '%'
		</if>
		<if test="srcClientNm != null and srcClientNm != ''">
		AND		B.BRANCHNM LIKE '%' + #{srcClientNm} + '%'
		</if>
		<if test="srcBusinessNum != null and srcBusinessNum != ''">
		AND		B.BUSINESSNUM LIKE '%' + #{srcBusinessNum} + '%'
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '10'">
		AND		ISNULL(A.SALE_TOTA_AMOU, 0) &gt; ISNULL(A.PAY_AMOU, 0)
		</if>
		<if test="srcIsCollect != null and srcIsCollect != '' and srcIsCollect == '20'">
		AND		(ISNULL(A.SALE_TOTA_AMOU, 0) = ISNULL(A.PAY_AMOU, 0) OR ISNULL(A.SALE_TOTA_AMOU, 0) &lt; ISNULL(A.PAY_AMOU, 0))
		</if>
		<if test="sale_sequ_numb != null and sale_sequ_numb != ''">
		AND		A.SALE_SEQU_NUMB = #{sale_sequ_numb}
		</if>
<!-- 		<if test="srcDateCalc == 'payDate'"> -->
			ORDER BY A.SAP_JOUR_NUMB, A.ALRAM_DATE DESC
<!-- 		</if> -->
	</select>
	
	<select id="adjustBalanceListCnt2" resultType="int">
		/* adjust.adjustBalanceListCnt2 */
		SELECT COUNT(1)
		FROM (
				SELECT	CLOS_SALE_DATE
				,		SUM(SALE_PROD_AMOU) AS SALE_PROD_AMOU
				,		SUM(SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		SUM(BUYI_PROD_AMOU) AS BUYI_PROD_AMOU
				,		SUM(BUYI_PROD_QUAN) AS BUYI_PROD_QUAN
				,		CASE WHEN SUM(AA.SALE_PROD_QUAN) - SUM(AA.BUYI_PROD_QUAN) = 0 THEN 'N'
							 ELSE 'Y'
						END DESCYN
				FROM(
						SELECT	CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
						,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
						,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
						,		0 AS BUYI_PROD_AMOU
						,		0 AS BUYI_PROD_QUAN
						FROM MSSALM A WITH(NOLOCK) 
						INNER JOIN MRORDTLIST B WITH(NOLOCK) 
							ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
						WHERE 1=1
						AND A.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcConfStartDate}+'01') AND DATEADD(DAY,-1,DATEADD(MONTH,1,CONVERT(DATETIME, #{srcConfEndDate}+'01')))
						AND CREATE_BORGID = #{create_borgid}
						AND (A.CLOS_SALE_DATE IS NOT NULL OR A.CLOS_SALE_DATE !='')
						GROUP BY CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120)
						UNION ALL
						SELECT	CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120) AS CLOS_SALE_DATE
						,		0 AS SALE_PROD_AMOU
						,		0 AS SALE_PROD_QUAN
						,		SUM(B.SALE_PROD_AMOU) AS BUYI_PROD_AMOU
						,		SUM(B.SALE_PROD_QUAN) AS BUYI_PROD_QUAN
						FROM MSBUYM A WITH(NOLOCK) 
						INNER JOIN MRORDTLIST B WITH(NOLOCK) 
							ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
						WHERE 1=1
						AND A.CLOS_BUYI_DATE BETWEEN CONVERT(DATETIME, #{srcConfStartDate}+'01') AND DATEADD(DAY,-1,DATEADD(MONTH,1,CONVERT(DATETIME, #{srcConfEndDate}+'01')))
						AND CREATE_BORGID = #{create_borgid}
						AND (A.CLOS_BUYI_DATE IS NOT NULL OR A.CLOS_BUYI_DATE !='')
						GROUP BY CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120)
					)AA
				GROUP BY CLOS_SALE_DATE
			)A	
	</select>
	
	
	<select id="adjustBalanceList2" resultType="java.util.HashMap"> 
		/* adjust.adjustBalanceList2 */
		SELECT	CLOS_SALE_DATE AS clos_sale_date
		,		SUM(SALE_PROD_AMOU) AS sale_prod_amou
		,		SUM(SALE_PROD_QUAN) AS sale_prod_quan
		,		SUM(BUYI_PROD_AMOU) AS buyi_prod_amou
		,		SUM(BUYI_PROD_QUAN) AS buyi_prod_quan
		,		CASE WHEN SUM(AA.SALE_PROD_QUAN) - SUM(AA.BUYI_PROD_QUAN) = 0 THEN 'N'
					 ELSE 'Y'
				END descYn
		FROM(
				SELECT	CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
				,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
				,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		0 AS BUYI_PROD_AMOU
				,		0 AS BUYI_PROD_QUAN
				FROM MSSALM A WITH(NOLOCK) 
				INNER JOIN MRORDTLIST B WITH(NOLOCK) 
					ON A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				WHERE 1=1
				AND A.CLOS_SALE_DATE BETWEEN CONVERT(DATETIME, #{srcConfStartDate}+'01') AND DATEADD(DAY,-1,DATEADD(MONTH,1,CONVERT(DATETIME, #{srcConfEndDate}+'01')))
				AND CREATE_BORGID = #{create_borgid}
				AND (A.CLOS_SALE_DATE IS NOT NULL OR A.CLOS_SALE_DATE !='')
				GROUP BY CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120)
				UNION ALL
				SELECT	CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120) AS CLOS_SALE_DATE
				,		0 AS SALE_PROD_AMOU
				,		0 AS SALE_PROD_QUAN
				,		SUM(B.SALE_PROD_AMOU) AS BUYI_PROD_AMOU
				,		SUM(B.SALE_PROD_QUAN) AS BUYI_PROD_QUAN
				FROM MSBUYM A WITH(NOLOCK) 
				INNER JOIN MRORDTLIST B WITH(NOLOCK) 
					ON A.BUYI_SEQU_NUMB = B.BUYI_SEQU_NUMB
				WHERE 1=1
				AND A.CLOS_BUYI_DATE BETWEEN CONVERT(DATETIME, #{srcConfStartDate}+'01') AND DATEADD(DAY,-1,DATEADD(MONTH,1,CONVERT(DATETIME, #{srcConfEndDate}+'01')))
				AND CREATE_BORGID = #{create_borgid}
				AND (A.CLOS_BUYI_DATE IS NOT NULL OR A.CLOS_BUYI_DATE !='')
				GROUP BY CONVERT(VARCHAR(7), A.CLOS_BUYI_DATE, 120)
			)AA
		GROUP BY CLOS_SALE_DATE
		ORDER BY ${orderString}
	</select>
	
	<select id="adjustBalanceDetailCnt2" resultType="int">
		/*adjust.adjustBalanceDetailCnt2*/
		SELECT COUNT(1)
		FROM(
			SELECT	AA.ORDE_TYPE_CLAS
			,       DBO.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',AA.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS_NM
			,		AA.ORDE_NUMB AS ORDER_NUM
			,		AA.SALE_PROD_QUAN AS SALE_PROD_QUAN
			,		AA.SALE_PROD_AMOU
			,		AA.BUYI_PROD_QUAN
			,		AA.BUYI_PROD_AMOU
			,		AA.PURC_IDEN_NUMB
			,		AA.DELI_IDEN_NUMB	
			,		AA.RECE_IDEN_NUMB	
			FROM
			(	
				SELECT	A.ADJUST_CONF_DATE
				,		A.ORDE_TYPE_CLAS
				,		A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDE_NUMB
				,		A.SALE_PROD_QUAN
				,		A.SALE_PROD_AMOU
				,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
				,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.PURC_PROD_AMOU END AS BUYI_PROD_AMOU
				,		A.PURC_IDEN_NUMB
				,		A.DELI_IDEN_NUMB	
				,		A.RECE_IDEN_NUMB		
				FROM
				(
					SELECT	A.SALE_SEQU_NUMB
					,		B.BUYI_SEQU_NUMB
					,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
					,		MAX(B.SALE_PROD_PRIS) AS SALE_PROD_PRIS
					,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
					,		SUM(B.PURC_PROD_AMOU) AS PURC_PROD_AMOU
					,		CONVERT(VARCHAR(7), MAX(A.CLOS_SALE_DATE), 120) AS ADJUST_CONF_DATE 
					,		B.ORDE_IDEN_NUMB
					,		B.ORDE_SEQU_NUMB
					,		B.PURC_IDEN_NUMB
					,		B.DELI_IDEN_NUMB
					,		B.RECE_IDEN_NUMB
					,		MAX(B.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS
					FROM 	MSSALM A WITH(NOLOCK) 
					,		MRORDTLIST B WITH(NOLOCK) 
					WHERE	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
					AND 	B.BUYI_SEQU_NUMB IS NULL
					AND		A.CREATE_BORGID = '13'
					AND		LTRIM(A.CLOS_SALE_DATE) BETWEEN CONVERT(DATETIME, #{srcConfDate} + '-01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfDate} + '-01'))
					GROUP BY A.SALE_SEQU_NUMB, B.SALE_SEQU_NUMB,B.BUYI_SEQU_NUMB, B.ORDE_IDEN_NUMB, B.ORDE_SEQU_NUMB, B.PURC_IDEN_NUMB, B.DELI_IDEN_NUMB, B.RECE_IDEN_NUMB
				)A
			)AA
			WHERE 	ADJUST_CONF_DATE = #{srcConfDate}
		)AAA
	</select>
	
	<select id="adjustBalanceDetail2" resultType="java.util.HashMap">
		/*adjust.adjustBalanceDetail2*/
		SELECT	AA.ORDE_TYPE_CLAS AS orde_type_clas
		,       DBO.FNS_CODENM1BYCODEVAL1('ORDERTYPECODE',AA.ORDE_TYPE_CLAS) AS orde_type_clas_nm
		,		AA.ORDE_NUMB AS order_num
		,		AA.SALE_PROD_QUAN AS sale_prod_quan
		,		AA.SALE_PROD_AMOU AS sale_prod_amou
		,		AA.BUYI_PROD_QUAN AS buyi_prod_quan
		,		AA.BUYI_PROD_AMOU AS buyi_prod_amou
		,		AA.PURC_IDEN_NUMB AS purc_iden_numb
		,		AA.DELI_IDEN_NUMB AS deli_iden_numb
		,		AA.RECE_IDEN_NUMB AS rece_iden_numb
		FROM
		(	
			SELECT	A.ADJUST_CONF_DATE
			,		A.ORDE_TYPE_CLAS
			,		A.ORDE_IDEN_NUMB + '-' + A.ORDE_SEQU_NUMB AS ORDE_NUMB
			,		A.SALE_PROD_QUAN
			,		A.SALE_PROD_AMOU
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
			,		CASE WHEN A.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE A.PURC_PROD_AMOU END AS BUYI_PROD_AMOU
			,		A.PURC_IDEN_NUMB
			,		A.DELI_IDEN_NUMB	
			,		A.RECE_IDEN_NUMB		
			FROM
			(
				SELECT	A.SALE_SEQU_NUMB
				,		B.BUYI_SEQU_NUMB
				,		SUM(B.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		MAX(B.SALE_PROD_PRIS) AS SALE_PROD_PRIS
				,		SUM(B.SALE_PROD_AMOU) AS SALE_PROD_AMOU
				,		SUM(B.PURC_PROD_AMOU) AS PURC_PROD_AMOU
				,		CONVERT(VARCHAR(7), MAX(A.CLOS_SALE_DATE), 120) AS ADJUST_CONF_DATE 
				,		B.ORDE_IDEN_NUMB
				,		B.ORDE_SEQU_NUMB
				,		B.PURC_IDEN_NUMB
				,		B.DELI_IDEN_NUMB
				,		B.RECE_IDEN_NUMB
				,		MAX(B.ORDE_TYPE_CLAS) AS ORDE_TYPE_CLAS
				FROM 	MSSALM A WITH(NOLOCK) 
				,		MRORDTLIST B WITH(NOLOCK) 
				WHERE	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
				AND 	B.BUYI_SEQU_NUMB IS NULL
				AND		A.CREATE_BORGID = '13'
				AND		LTRIM(A.CLOS_SALE_DATE) BETWEEN CONVERT(DATETIME, #{srcConfDate} + '-01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfDate} + '-01'))
				GROUP BY A.SALE_SEQU_NUMB, B.SALE_SEQU_NUMB,B.BUYI_SEQU_NUMB, B.ORDE_IDEN_NUMB, B.ORDE_SEQU_NUMB, B.PURC_IDEN_NUMB, B.DELI_IDEN_NUMB, B.RECE_IDEN_NUMB
			)A
		)AA
		WHERE 	ADJUST_CONF_DATE = #{srcConfDate}
	</select>
	
	<select id="adjustBalanceList3" resultType="java.util.HashMap">
		/** adjust.adjustBalanceList3 **/
		SELECT	AA.SALE_CONF_DATE AS sale_conf_date
		,		AA.SALE_PROD_AMOU AS sale_prod_amou
		,		AA.SALE_PROD_QUAN AS sale_prod_quan
		,		AA.BUYI_PROD_AMOU AS buyi_prod_amou
		,		AA.BUYI_PROD_QUAN AS buyi_prod_quan
		,		AA.DESCYN AS descYn
		FROM
		(
			SELECT	XX.SALE_CONF_DATE
			,		SUM(SALE_PROD_AMOU) AS SALE_PROD_AMOU
			,		SUM(SALE_PROD_QUAN) AS SALE_PROD_QUAN
			,		SUM(BUYI_PROD_AMOU) AS BUYI_PROD_AMOU
			,		SUM(BUYI_PROD_QUAN) AS BUYI_PROD_QUAN
			,		CASE
						WHEN CONVERT(INT, SUM(SALE_PROD_QUAN)) - CONVERT(INT, SUM(BUYI_PROD_QUAN)) = 0 THEN 'N'
						ELSE 'Y'
					END AS DESCYN
			FROM
			(
				SELECT	SALE_SEQU_NUMB
				,		AA.ADJUST_CONF_DATE AS SALE_CONF_DATE
				,		MAX(AA.SALE_TOTA_AMOU) AS SALE_PROD_AMOU
				,		SUM(AA.SALE_PROD_QUAN) AS SALE_PROD_QUAN
				,		SUM(AA.BUYI_PROD_AMOU) AS BUYI_PROD_AMOU
				,		SUM(AA.BUYI_PROD_QUAN) AS BUYI_PROD_QUAN
				FROM
				(
					SELECT	B.SALE_SEQU_NUMB
					,		B.BUYI_SEQU_NUMB
					,		CONVERT(VARCHAR(7), A.CLOS_SALE_DATE, 120) AS ADJUST_CONF_DATE
					,		A.SALE_REQU_AMOU AS SALE_TOTA_AMOU
					,		B.PURC_PROD_AMOU AS BUYI_PROD_AMOU
					,		B.SALE_PROD_QUAN
					,		CASE WHEN B.BUYI_SEQU_NUMB IS NULL THEN 0 ELSE B.SALE_PROD_QUAN END AS BUYI_PROD_QUAN
					FROM	MSSALM A WITH(NOLOCK) 
					,		MRORDTLIST B WITH(NOLOCK) 
					WHERE 	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
					AND		A.CREATE_BORGID = #{create_borgid}
					AND 	LTRIM(A.CLOS_SALE_DATE) BETWEEN CONVERT(DATETIME, #{srcConfStartDate} + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcConfEndDate} + '01'))
				)AA
				GROUP BY AA.ADJUST_CONF_DATE, SALE_SEQU_NUMB
			) XX
			GROUP BY SALE_CONF_DATE
		)AA
		<if test="orderString != null and orderString != ''">
		ORDER BY ${orderString}
		</if>
	</select>
	
	<update id="etcExpirationDateSave">
		/** adjust.etcExpirationDateSave **/
		UPDATE MSBUYM SET
			ETC_EXPIRATION_DATE = CONVERT(DATETIME, #{etcExpirationDate})
		WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
	</update>
	
	<update id="updateEtcExpirationDate">
		/** adjust.updateEtcExpirationDate **/
		UPDATE MSBUYM SET
			ETC_EXPIRATION_DATE = CONVERT(DATETIME,(
														SELECT	CONVERT(VARCHAR(10),DATEADD(DAY, CONVERT(INT, BB.ETC_EXPIRATION_DATE), AA.CLOS_BUYI_DATE),121) AS ETC_EXPIRATION_DATE
														FROM MSBUYM AA WITH(NOLOCK) 
														INNER JOIN (
														<![CDATA[
															SELECT	CASE WHEN (A.BUYI_TOTA_AMOU >= (SELECT CODEVAL2 FROM SMPCODES WHERE CODETYPECD = 'PURCHASE_EXPIRATION' AND CODEVAL1 = '90') 
																				AND A.BUYI_TOTA_AMOU < (SELECT CODEVAL2 FROM SMPCODES WHERE CODETYPECD = 'PURCHASE_EXPIRATION' AND CODEVAL1 = '150'))
																		 THEN '90'
																		 
																		 WHEN A.BUYI_TOTA_AMOU >= (SELECT CODEVAL2 FROM SMPCODES WHERE CODETYPECD = 'PURCHASE_EXPIRATION' AND CODEVAL1 = '150') THEN '150'
														]]>
																	END ETC_EXPIRATION_DATE
															,		A.BUYI_SEQU_NUMB
															FROM MSBUYM A WITH(NOLOCK) 
															WHERE A.BUYI_SEQU_NUMB = #{buyiSequNumb}
														)BB
															ON AA.BUYI_SEQU_NUMB = BB.BUYI_SEQU_NUMB
													))
		WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
	</update>

	<select id="selectEbillCheckByVendorId" resultType="int">
		/*adjust.selectEbillCheckByVendorId*/
		SELECT	COUNT(1) AS CNT
		FROM SMPVENDORS A WITH(NOLOCK) 
		INNER JOIN SMPCODES B WITH(NOLOCK) 
			ON A.VENDORID = B.CODEVAL1
			AND B.CODETYPECD = 'SAP_NOT_TRANS'
		WHERE A.VENDORID = #{vendorId}
	</select>
	
	<select id="selectMssalmTranStatFlag" resultType="kr.co.bitcube.adjust.dto.AdjustDto">
		/* adjust.selectMssalmTranStatFlag */
		SELECT	TRAN_STAT_FLAG AS tranStatFlag
		,		BRANCHID
		FROM MSSALM  WITH(NOLOCK) 
		WHERE SALE_SEQU_NUMB = #{saleSequNumb}
	</select>
	
	<select id="selectTranStatFlagBranchInfo" resultType="java.util.HashMap">
		/* adjust.selectTranStatFlagBranchInfo*/
		SELECT	(SELECT COUNT(1) FROM MSSALM WHERE TRAN_STAT_FLAG = '1' AND BRANCHID = #{branchId}) AS CNT
		,		A.BRANCHID AS BRANCHID
		,		B.BRANCHNM AS BRANCHNM
		FROM MSSALM A WITH(NOLOCK) 
		INNER JOIN SMPBRANCHS B WITH(NOLOCK) 
			ON A.BRANCHID = B.BRANCHID
		WHERE A.BRANCHID = #{branchId}
		GROUP BY A.BRANCHID, B.BRANCHNM
	</select>
	
	<select id="selectBondsManagerInfo" resultType="java.util.HashMap">
		/* adjust.selectBondsManagerInfo */
		SELECT	A.USERID
		,		A.ISEMAIL
		,		A.ISSMS
		,		A.EMAILBYPURCHASE
		,		A.EMAILBYDELIVERY
		,		A.EMAILBYREGISTERGOOD
		,		A.SMSBYPURCHASE
		,		A.SMSBYDELIVERY
		,		A.SMSBYREGISTERGOOD
		,		A.EMAILBYPURCHASEORDER
		,		A.EMAILBYORDRTRECEIVE
		,		A.EMAILBYNOTIAUCTION
		,		A.EMAILBYNOTISUCCESSBID
		,		A.SMSBYPURCHASEORDER
		,		A.SMSBYORDRTRECEIVE
		,		A.SMSBYNOTIAUCTION
		,		A.SMSBYNOTISUCCESSBID
		,		B.EMAIL AS email
		,		B.MOBILE AS mobile
		FROM	SMPRECEIVEINFO A WITH(NOLOCK) 
		,		SMPUSERS B WITH(NOLOCK) 
		WHERE	A.USERID = B.USERID
		AND		B.LOGINID IN (SELECT CODEVAL1 FROM SMPCODES where CODETYPECD = #{codeTypeCd})
	</select>
	
	<select id="selectMsbuymInfoCheck" resultType="int">
		/*adjust.selectMsbuymInfoCheck*/
		SELECT	COUNT(1) AS CNT
		FROM MSBUYM A WITH(NOLOCK) 
		WHERE A.BUYI_SEQU_NUMB = #{buyiSequNumb}
		AND (A.SAP_JOUR_NUMB IS NULL OR A.SAP_JOUR_NUMB = '')
	</select>
	
	<select id="updatePurchaseConfirmPartCancel">
		/*adjust.updatePurchaseConfirmPartCancel*/
		UPDATE MRORDTLIST SET 
			BUYI_SEQU_NUMB = NULL
		WHERE ORDE_IDEN_NUMB = #{ordeIdenNumb}
		AND ORDE_SEQU_NUMB = #{ordeSequNumb}
		AND PURC_IDEN_NUMB = #{purcIdenNumb}
		AND DELI_IDEN_NUMB = #{deliIdenNumb}
		AND RECE_IDEN_NUMB = #{receIdenNumb}
	</select>
	
	<select id="selecMrordtListBuyiSequNumbCheck" resultType="int">
		/*adjust.selecMrordtListBuyiSequNumbCheck*/
		SELECT COUNT(1) FROM MRORDTLIST  WITH(NOLOCK) WHERE BUYI_SEQU_NUMB = #{buyiSequNumb} 
	</select>
	
	<delete id="deleteMsbuymInfo">
		/*adjust.deleteMsbuymInfo*/
		DELETE FROM MSBUYM WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
	</delete>
	
	<update id="updateMsbuymInfo">
		UPDATE MSBUYM SET	
			BUYI_REQU_AMOU = A.PURC_PROD_AMOU				--매입액
		,	BUYI_REQU_VTAX = A.PURC_PROD_TAX				--매입부가세
		,	BUYI_TOTA_AMOU = A.PURC_PROD_AMOU+PURC_PROD_TAX	--매입합계
		FROM(
				SELECT	SUM(SALE_PROD_QUAN) AS SALE_PROD_QUAN	--매입수량
				,		SUM(PURC_PROD_PRIS) AS PURC_PROD_PRIS	--매입단가
				,		SUM(PURC_PROD_AMOU)	AS PURC_PROD_AMOU	--매입액
				,		FLOOR(SUM(PURC_PROD_AMOU) * 0.1) AS PURC_PROD_TAX	--매입부가세
				FROM MRORDTLIST  WITH(NOLOCK) 
				WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
				GROUP BY BUYI_SEQU_NUMB
		)A
		WHERE MSBUYM.BUYI_SEQU_NUMB = #{buyiSequNumb}
	</update>
	<update id="updateSumupContent">
		/*adjust.updateSumupContent*/
		UPDATE MSBUYM SET
			SUM_UP = #{sumupContent}
		WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
	</update>
	
	<select id="selectSumupContent" resultType="java.util.HashMap">
		/* adjust.selectSumupContent */
		SELECT	SUMUP
		FROM MSBUYM WITH(NOLOCK) 
		WHERE BUYI_SEQU_NUMB = #{buyiSequNumb}
	</select>
	
	<select id="updateReceSaleStatus">
		/* adjust.updateReceSaleStatus */
		UPDATE MPTREC SET
			RECE_SALE_STATUS = #{receSaleStatus}
		WHERE RECE_SEQU_NUM = #{receSequNum}
	</select>
	
	<sql id="adjustBondsPlanListSql1">
		<![CDATA[
		WITH TMP_MSSALM AS (
				SELECT	AA.*
				,		BB.ALRAM_DATE
				,		ISNULL(BB.RECE_PAY_AMOU,0) AS RECE_PAY_AMOU
				,		(CASE WHEN ROUND(AA.SALE_TOTA_AMOU,-1) = ROUND(ISNULL(BB.RECE_PAY_AMOU,0),-1) THEN CONVERT(INT,(BB.ALRAM_DATE - AA.CLOS_SALE_DATE)) ELSE 0 END) AS REV_AMOU_DATE
				,		CASE WHEN AA.EXPIRATION_DATE >= CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() 
															ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcDate} + '01 23:59:59')))
														END
									THEN '0'
							WHEN AA.EXPIRATION_DATE+120 >= CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																	THEN GETDATE() 
																ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcDate} + '01 23:59:59')))
															END
									THEN '1'
							ELSE '2'
						END AS BONDS_TYPE_CD
				FROM	MSSALM AA WITH(NOLOCK) 
				LEFT OUTER JOIN (
						SELECT	B.SALE_SEQU_NUMB
						,		MAX(B.ALRAM_DATE) AS ALRAM_DATE
						,		SUM(B.RECE_PAY_AMOU) AS RECE_PAY_AMOU
						FROM	MPTREC B WITH(NOLOCK) 
						WHERE	B.ALRAM_DATE < CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() 
													ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcDate} + '01 23:59:59')))
												END
						AND		B.ALRAM_DATE IS NOT NULL
						GROUP BY B.SALE_SEQU_NUMB
				) BB
					ON	AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB
				WHERE	AA.TRANSFER_STATUS = CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN '1' ELSE AA.TRANSFER_STATUS END
				AND		AA.CLOS_SALE_DATE < CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() 
												ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{srcDate} + '01 23:59:59')))
											END
				AND		AA.SALE_TOTA_AMOU <> 0
		)
		]]>
	</sql>
	<sql id="adjustBondsPlanListSql2">
		FROM	TMP_MSSALM A
		LEFT OUTER JOIN SMPBRANCHS B WITH(NOLOCK) 
			ON	A.BRANCHID = B.BRANCHID
		<if test="srcDateType != null and srcDateType != '' and srcDateType == 'now'">
		LEFT OUTER JOIN BOND_PLAN C WITH(NOLOCK) 
			ON	A.SALE_SEQU_NUMB = C.SALE_SEQU_NUMB
<!-- 			AND	C.PLAN_YYYYMM = #{srcDate} -->
		</if>
		<if test="srcDateType != null and srcDateType != '' and srcDateType == 'prev'">
		INNER JOIN BOND_PLAN C WITH(NOLOCK) 
			ON	A.SALE_SEQU_NUMB = C.SALE_SEQU_NUMB
			AND	C.PLAN_YYYYMM = #{srcDate}
		</if>
		WHERE	1 = 1
		<if test="srcDateType != null and srcDateType != '' and srcDateType == 'now'">
		<![CDATA[
		AND		ROUND(A.SALE_TOTA_AMOU,-1) <> ROUND(A.RECE_PAY_AMOU,-1)
		]]>
		</if>
		<if test="srcBondType != null and srcBondType != ''">
		AND 	A.BONDS_TYPE_CD = #{srcBondType}
		</if>
		<if test="srcContractSpecial != null and srcContractSpecial != ''">
		AND 	B.CONTRACTSPECIAL = #{srcContractSpecial}
		</if>
		<if test="srcBranchNm != null and srcBranchNm != ''">
		AND 	B.BRANCHNM LIKE '%' +  #{srcBranchNm} + '%'
		</if>
	</sql>
	<select id="adjustBondsPlanListMap" resultType="java.util.HashMap">
		/* adjust.adjustBondsPlanListMap */
		<include refid="adjustBondsPlanListSql1"/>
		SELECT	COUNT(1) AS RECORDS
		,		CONVERT(DECIMAL(14,0),ISNULL(SUM(A.SALE_TOTA_AMOU),0)) AS SUM_SALE_TOTA_AMOU
		,		CONVERT(DECIMAL(14,0),ISNULL(SUM(A.SALE_TOTA_AMOU)-SUM(A.RECE_PAY_AMOU),0)) AS SUM_REMAIN_AMOU
		,		CONVERT(DECIMAL(14,0),ISNULL(SUM(
							CASE	WHEN (C.BOND_PLAN_DATE1 
											BETWEEN (CASE	WHEN (#{srcDate})>= CONVERT(VARCHAR(6),GETDATE(),112) THEN CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01')
															ELSE CONVERT(DATETIME,#{srcDate}+'01')
													END)
											AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,1,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
														ELSE DATEADD(MONTH,1,CONVERT(DATETIME,#{srcDate}+'01'))-1
												END)
									) THEN C.BOND_PLAN_AMOU1
									WHEN (C.BOND_PLAN_DATE2
												BETWEEN (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01')
																ELSE CONVERT(DATETIME,#{srcDate}+'01')
														END)
												AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,1,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
															ELSE DATEADD(MONTH,1,CONVERT(DATETIME,#{srcDate}+'01'))-1
													END)
									) THEN C.BOND_PLAN_AMOU2 ELSE 0 END
						)
					,0)
				) AS SUM_PLAN_AMOU_1MONTH
		,		CONVERT(DECIMAL(14,0),ISNULL(SUM(
							CASE	WHEN (C.BOND_PLAN_DATE1 
											BETWEEN (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,1,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))
															ELSE DATEADD(MONTH,1,CONVERT(DATETIME,#{srcDate}+'01'))
													END)
											AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,2,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
														ELSE DATEADD(MONTH,2,CONVERT(DATETIME,#{srcDate}+'01'))-1
												END)
									) THEN C.BOND_PLAN_AMOU1
									WHEN (C.BOND_PLAN_DATE2
												BETWEEN (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,1,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))
																ELSE DATEADD(MONTH,1,CONVERT(DATETIME,#{srcDate}+'01'))
														END)
												AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,2,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
															ELSE DATEADD(MONTH,2,CONVERT(DATETIME,#{srcDate}+'01'))-1
													END)
									) THEN C.BOND_PLAN_AMOU2 ELSE 0 END
						)
					,0)
				) AS SUM_PLAN_AMOU_2MONTH
		,		CONVERT(DECIMAL(14,0),ISNULL(SUM(
							CASE	WHEN (C.BOND_PLAN_DATE1 
											BETWEEN (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,2,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))
															ELSE DATEADD(MONTH,2,CONVERT(DATETIME,#{srcDate}+'01'))
													END)
											AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,3,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
														ELSE DATEADD(MONTH,3,CONVERT(DATETIME,#{srcDate}+'01'))-1
												END)
									) THEN C.BOND_PLAN_AMOU1
									WHEN (C.BOND_PLAN_DATE2
												BETWEEN (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,2,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))
																ELSE DATEADD(MONTH,2,CONVERT(DATETIME,#{srcDate}+'01'))
														END)
												AND (CASE	WHEN (#{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(MONTH,3,CONVERT(DATETIME,CONVERT(VARCHAR(6),GETDATE(),112)+'01'))-1
															ELSE DATEADD(MONTH,3,CONVERT(DATETIME,#{srcDate}+'01'))-1
													END)
									) THEN C.BOND_PLAN_AMOU2 ELSE 0 END
						)
					,0)
				) AS SUM_PLAN_AMOU_3MONTH
		<include refid="adjustBondsPlanListSql2"/>
	</select>
	<select id="adjustBondsPlanList" resultType="java.util.HashMap">
		/* adjust.adjustBondsPlanList */
		<include refid="adjustBondsPlanListSql1"/>
		<![CDATA[
		SELECT	(CASE WHEN ( #{srcDate}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN 'N' ELSE 'Y' END) AS WITHDRAW_YN
		,		A.SALE_SEQU_NUMB
		,		B.BUSINESSNUM
		,		B.BRANCHNM
		,		B.CONTRACTSPECIAL AS CONTRACT_SPECIAL_CD
		,		(SELECT Z.CODENM1 FROM SMPCODES Z  WITH(NOLOCK) WHERE Z.CODETYPECD = 'CONTRACT_SPECIAL' AND Z.CODEVAL1=B.CONTRACTSPECIAL) AS CONTRACT_SPECIAL_NM
		,		CONVERT(VARCHAR(10),A.CLOS_SALE_DATE,120) AS CLOS_SALE_DATE
		,		A.SALE_TOTA_AMOU
		]]>
		<choose>
            <when test="@MybatisUtils@isNotEmpty(isExcel) and isExcel == 1">
		,		A.RECE_PAY_AMOU AS PAY_AMOU
		,		CONVERT(VARCHAR(10),A.ALRAM_DATE,120) AS PAY_AMOU_DATE
            </when>
            <otherwise>
				<![CDATA[
		,		REPLACE(CONVERT(VARCHAR,CONVERT(MONEY,A.RECE_PAY_AMOU),1),'.00','')+'<BR/>('+CONVERT(VARCHAR(10),A.ALRAM_DATE,120)+')' AS PAY_AMOU
				]]>
			</otherwise>
		</choose>
		<![CDATA[
		,		A.RECE_PAY_AMOU AS PAY_AMOU_TMP
		,		(ISNULL(A.SALE_TOTA_AMOU,0)-ISNULL(A.RECE_PAY_AMOU,0)) AS REMAIN_AMOU
		,		CONVERT(VARCHAR(10),A.ALRAM_DATE,120) AS SALE_PAY_DATE
		,		CONVERT(VARCHAR(10),A.EXPIRATION_DATE,120) AS EXPIRATION_DATE
		,		CASE 	WHEN A.BONDS_TYPE_CD = '0' THEN '정상'
						WHEN A.BONDS_TYPE_CD = '1' THEN '관리'
						ELSE '장기'
				END AS BONDS_TYPE
		,		C.BOND_PLAN_AMOU1
		,		CONVERT(VARCHAR(10),C.BOND_PLAN_DATE1,120) AS BOND_PLAN_DATE1
		,		C.BOND_PLAN_AMOU2
		,		CONVERT(VARCHAR(10),C.BOND_PLAN_DATE2,120) AS BOND_PLAN_DATE2
		,		(
					SELECT	AVG(Z.REV_AMOU_DATE)
					FROM	TMP_MSSALM Z
					WHERE	Z.BRANCHID = A.BRANCHID
					AND		Z.REV_AMOU_DATE > 0
					AND		Z.CLOS_SALE_DATE BETWEEN 
												(CASE	WHEN #{srcDate} >= CONVERT(VARCHAR(6),GETDATE(),112) THEN DATEADD(YEAR,-1,CONVERT(VARCHAR(10),GETDATE(),120))
														ELSE DATEADD(YEAR,-1,CONVERT(VARCHAR(10),#{srcDate}+'01',120))
												END) AND
												(CASE	WHEN #{srcDate} >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE()
														ELSE DATEADD(MONTH,1,CONVERT(VARCHAR(10),#{srcDate}+'01',120))-1
												END)
				) AS AVG_REV_AMOU_DATE
		,		(ISNULL(C.BOND_PLAN_AMOU1,0)+ISNULL(C.BOND_PLAN_AMOU2,0)) AS SUM_AMOU
		,		C.PLAN_YYYYMM
		]]>
		<include refid="adjustBondsPlanListSql2"/>
		ORDER BY B.BRANCHNM
	</select>
	
	<select id="getMonthBondsList" resultType="java.util.HashMap">
		/* adjust.getMonthBondsList */
		<![CDATA[
		SELECT	TYPE
		,		CASE WHEN #{stdYear}+'01' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 1   AND A.MONTH = 1   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M1_AMOU 
		,		CASE WHEN #{stdYear}+'02' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 2   AND A.MONTH = 2   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M2_AMOU
		,		CASE WHEN #{stdYear}+'03' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 3   AND A.MONTH = 3   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M3_AMOU
		,		CASE WHEN #{stdYear}+'04' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 4   AND A.MONTH = 4   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M4_AMOU
		,		CASE WHEN #{stdYear}+'05' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 5   AND A.MONTH = 5   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M5_AMOU
		,		CASE WHEN #{stdYear}+'06' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 6   AND A.MONTH = 6   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M6_AMOU
		,		CASE WHEN #{stdYear}+'07' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 7   AND A.MONTH = 7   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M7_AMOU
		,		CASE WHEN #{stdYear}+'08' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 8   AND A.MONTH = 8   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M8_AMOU
		,		CASE WHEN #{stdYear}+'09' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 9   AND A.MONTH = 9   THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M9_AMOU
		,		CASE WHEN #{stdYear}+'10' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 10  AND A.MONTH = 10  THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M10_AMOU
		,		CASE WHEN #{stdYear}+'11' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 11  AND A.MONTH = 11  THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M11_AMOU
		,		CASE WHEN #{stdYear}+'12' <= CONVERT(VARCHAR(6), GETDATE(), 112) THEN ISNULL(SUM(CASE WHEN B.MONTH = 12  AND A.MONTH = 12  THEN ISNULL(AMOU ,0)	END ), 0) ELSE 0 END AS M12_AMOU
		FROM	
		(
			SELECT	TYPE
			,		YEAR
			,		MONTH
			,		SUM(AMOU) AS AMOU
			FROM
			(
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '1'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '01' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '01' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '2'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '02' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '02' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '3'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '03' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '03' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '4'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '04' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '04' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '5'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '05' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '05' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '6'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '06' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '06' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '7'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '07' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '07' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '8'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '08' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '08' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '9'   AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '09' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '09' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '10'  AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '10' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '10' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '11'  AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '11' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '11' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU UNION ALL
				SELECT	'A' AS TYPE , #{stdYear} AS YEAR , '12'  AS MONTH ,ROUND((SELECT SUM(AA.SALE_TOTA_AMOU) FROM MSSALM AA WHERE AA.CLOS_SALE_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '12' + '01 23:59')) AND AA.TRANSFER_STATUS = '1')-(SELECT SUM(AA.RECE_PAY_AMOU) FROM MPTREC AA WHERE AA.ALRAM_DATE < DATEADD(DAY, -1, CONVERT(DATETIME,   #{stdYear} + '12' + '01 23:59')) AND EXISTS(SELECT 1 FROM MSSALM Z WHERE Z.sale_sequ_numb = AA.sale_sequ_numb AND Z.TRANSFER_STATUS = '1') AND AA.alram_date IS NOT NULL), 0) AS AMOU
				UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '1'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '01' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '01' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '2'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '02' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '02' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '3'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '03' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '03' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '4'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '04' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '04' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '5'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '05' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '05' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '6'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '06' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '06' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '7'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '07' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '07' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '8'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '08' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '08' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '9'   AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '09' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '09' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '10'  AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '10' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '10' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '11'  AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '11' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '11' + '01 23:59'))-1 AND TRANSFER_STATUS = '1' UNION ALL
				SELECT	'B' AS TYPE , #{stdYear} AS YEAR , '12'  AS MONTH ,ISNULL(SUM(SALE_TOTA_AMOU), 0) AS AMOU FROM	MSSALM WHERE CLOS_SALE_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '12' + '01') AND dateadd(month, 1, CONVERT(DATETIME,   #{stdYear} + '12' + '01 23:59'))-1 AND TRANSFER_STATUS = '1'
				UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '1'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '01' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '01' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '2'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '02' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '02' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '3'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '03' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '03' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '4'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '04' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '04' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '5'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '05' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '05' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '6'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '06' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '06' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '7'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '07' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '07' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '8'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '08' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '08' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '9'   AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '09' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '09' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '10'  AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '10' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '10' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '11'  AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '11' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '11' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL UNION ALL
				SELECT	'C' AS TYPE ,  #{stdYear} AS YEAR , '12'  AS MONTH , ISNULL(SUM(RECE_PAY_AMOU), 0) AS NOW_AMOU FROM MPTREC AA, MSSALM BB WHERE AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB AND BB.TRANSFER_STATUS = '1' AND AA.ALRAM_DATE BETWEEN CONVERT(DATETIME,   #{stdYear} + '12' + '01') AND DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear} + '12' + '01 23:59'))-1 AND AA.alram_date IS NOT NULL
			)AA
			GROUP BY TYPE, YEAR, MONTH
		)A CROSS JOIN  
		(
		SELECT 1 AS MONTH UNION ALL 
		SELECT 2 UNION ALL
		SELECT 3 UNION ALL
		SELECT 4 UNION ALL
		SELECT 5 UNION ALL
		SELECT 6 UNION ALL
		SELECT 7 UNION ALL
		SELECT 8 UNION ALL
		SELECT 9 UNION ALL
		SELECT 10 UNION ALL
		SELECT 11 UNION ALL
		SELECT 12 
		)B
		GROUP BY A.YEAR, A.TYPE
		]]>
	</select>
	
	<select id="getBondsTypeList" resultType="java.util.HashMap">
		/* adjust.getBondsTypeList */
		<![CDATA[
		WITH TEMP_ADJUST AS (
				SELECT	SUM(AAA.SALE_AMOU) AS SALE_TOTA_AMOU
				,		AAA.CONTRACTSPECIAL
				,		AAA.BONDS_KIND
				FROM	(
						SELECT	AA.SALE_SEQU_NUMB
						,		ISNULL(BB.CONTRACTSPECIAL, '40') AS CONTRACTSPECIAL
						,		CASE
									WHEN AA.EXPIRATION_DATE > (CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																		THEN GETDATE() 
																	ELSE DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01 23:59:59'))
																END) 
										THEN '0'
									WHEN AA.EXPIRATION_DATE 
											BETWEEN 
													(CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() - 120
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01')) - 120
													END)
												AND (CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
															THEN GETDATE()
														ELSE DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01 23:59:59'))
													END)
										THEN '1'
									WHEN AA.EXPIRATION_DATE < (CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																		THEN GETDATE() - 120
																	ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01 23:59:59'))) - 120 
																END)
										THEN '2'
								END AS BONDS_KIND
						,		AA.EXPIRATION_DATE
						,		AA.SALE_AMOU
						FROM	(
								SELECT	A.SALE_SEQU_NUMB
								,		A.BRANCHID
								,		A.EXPIRATION_DATE
								,		A.SALE_TOTA_AMOU - 
										ISNULL(
										(SELECT	SUM(RECE_PAY_AMOU)
										FROM	MPTREC B WITH(NOLOCK) 
										WHERE	B.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
										AND		B.ALRAM_DATE < CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																		THEN GETDATE() 
																	ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01 23:59:59')))
																END
										),0) AS SALE_AMOU
								FROM	MSSALM A WITH(NOLOCK) 
								WHERE	A.CLOS_SALE_DATE < CASE WHEN ( #{stdYear}+  #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																	THEN GETDATE() 
																ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdYear}+  #{stdMonth} + '01 23:59:59')))
															END
								AND		A.TRANSFER_STATUS = '1'
						) AA
						LEFT OUTER JOIN SMPBRANCHS BB WITH(NOLOCK) 
							ON	AA.BRANCHID = BB.BRANCHID
				) AAA
				GROUP BY AAA.CONTRACTSPECIAL
				,		AAA.BONDS_KIND
				UNION ALL
				SELECT	SUM(AA.SALE_AMOU) AS SALE_TOTA_AMOU
				,		AA.CONTRACTSPECIAL
				,		AA.BONDS_KIND
				FROM	(
						SELECT	ISNULL(B.CONTRACTSPECIAL, '40') AS CONTRACTSPECIAL
						,		'3' AS BONDS_KIND
						,		A.SALE_TOTA_AMOU - 
									ISNULL(
									(SELECT	SUM(RECE_PAY_AMOU)
									FROM	MPTREC C WITH(NOLOCK) 
									WHERE	C.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
									AND		C.ALRAM_DATE < CASE WHEN #{stdYear}+  #{stdMonth} >= CONVERT(VARCHAR(6),GETDATE(),112) 
																	THEN GETDATE() 
																ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdYear}+  #{stdMonth} + '01 23:59:59')))
															END
									),0) AS SALE_AMOU
						FROM	MSSALM A WITH(NOLOCK) 
						,		SMPBRANCHS B WITH(NOLOCK) 
						WHERE	A.BRANCHID = B.BRANCHID
						AND		A.TRANSFER_STATUS = '0'	
						AND		TRANSFER_DATE < CASE WHEN #{stdYear}+  #{stdMonth} >= CONVERT(VARCHAR(6),GETDATE(),112) 
														THEN GETDATE() 
													ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdYear}+  #{stdMonth} + '01 23:59:59')))
												END
				) AA
				GROUP BY AA.CONTRACTSPECIAL
				,		AA.BONDS_KIND
		)
		SELECT	AA.BONDS_KIND
		,		SUM(CASE WHEN CONTRACTSPECIAL ='10' THEN SALE_TOTA_AMOU ELSE 0 END) AS SKT1
		,		SUM(CASE WHEN CONTRACTSPECIAL ='20' THEN SALE_TOTA_AMOU ELSE 0 END) AS SKB1
		,		SUM(CASE WHEN CONTRACTSPECIAL ='50' THEN SALE_TOTA_AMOU ELSE 0 END) AS SKB2
		,		SUM(CASE WHEN CONTRACTSPECIAL ='30' THEN SALE_TOTA_AMOU ELSE 0 END) AS SKB3
		,		SUM(CASE WHEN CONTRACTSPECIAL ='40' THEN SALE_TOTA_AMOU ELSE 0 END) AS ETC
		FROM	(
				SELECT	0 AS BONDS_KIND UNION ALL
				SELECT	1 AS BONDS_KIND UNION ALL
				SELECT	2 AS BONDS_KIND UNION ALL
				SELECT	3 AS BONDS_KIND
		) AA
		LEFT OUTER JOIN TEMP_ADJUST BB
			ON	AA.BONDS_KIND = BB.BONDS_KIND
		GROUP BY AA.BONDS_KIND
		]]>
	</select>
	
	
	<sql id="adjustBondsTypeDetailSql">
		<![CDATA[
		SELECT	AAA.SALE_SEQU_NUMB
		,		AAA.BRANCHID
		,		AAA.BRANCHNM
		,		CONVERT(VARCHAR(10), AAA.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
		,		CONVERT(VARCHAR(10), AAA.EXPIRATION_DATE, 120) AS EXPIRATION_DATE
		,		AAA.SALE_TOTA_AMOU
		,		AAA.SALE_AMOU AS AMOU
		,		AAA.BONDS_KIND
		,		(AAA.SALE_TOTA_AMOU-AAA.SALE_AMOU) AS NOT_AMOU
		FROM	(
				SELECT	AA.SALE_SEQU_NUMB
				,		AA.BRANCHID
				,		BB.BRANCHNM
				,		AA.CLOS_SALE_DATE
				,		ISNULL(BB.CONTRACTSPECIAL, '40') AS CONTRACTSPECIAL
				,		CASE
							WHEN AA.EXPIRATION_DATE > (CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() 
															ELSE DATEADD(DAY, -1, DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdyyyymm} + '01 23:59:59')))
														END) 
								THEN '0'
							WHEN AA.EXPIRATION_DATE 
									BETWEEN 
											(CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
														THEN GETDATE() - 120
													ELSE DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdyyyymm} + '01')) - 120
											END)
										AND (CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
													THEN GETDATE()
												ELSE DATEADD(MONTH,1, CONVERT(DATETIME,   #{stdyyyymm} + '01 23:59:59'))
											END)
								THEN '1'
							WHEN AA.EXPIRATION_DATE < (CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() - 120
															ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdyyyymm} + '01 23:59:59'))) - 120
														END)
								THEN '2'
						END AS BONDS_KIND
				,		AA.EXPIRATION_DATE
				,		AA.SALE_TOTA_AMOU
				,		AA.SALE_AMOU
				FROM	(
						SELECT	A.SALE_SEQU_NUMB
						,		A.BRANCHID
						,		A.CLOS_SALE_DATE
						,		A.EXPIRATION_DATE
						,		A.SALE_TOTA_AMOU
						,		ISNULL(
								(SELECT	SUM(RECE_PAY_AMOU)
								FROM	MPTREC B WITH(NOLOCK) 
								WHERE	B.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
								AND		B.ALRAM_DATE < CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() 
															ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdyyyymm} + '01 23:59:59')))
														END
								),0) AS SALE_AMOU
						FROM	MSSALM A WITH(NOLOCK) 
						WHERE	A.CLOS_SALE_DATE < CASE WHEN ( #{stdyyyymm}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() 
														ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,   #{stdyyyymm} + '01 23:59:59')))
													END
						AND		A.TRANSFER_STATUS = '1'
				) AA
				LEFT OUTER JOIN SMPBRANCHS BB WITH(NOLOCK) 
					ON	AA.BRANCHID = BB.BRANCHID
				UNION ALL
					
				SELECT	A.SALE_SEQU_NUMB
				,		A.BRANCHID
				,		B.BRANCHNM
				,		A.CLOS_SALE_DATE
				,		ISNULL(B.CONTRACTSPECIAL, '40') AS CONTRACTSPECIAL
				,		'3' AS BONDS_KIND
				,		A.EXPIRATION_DATE
				,		A.SALE_TOTA_AMOU 
				,		ISNULL(
							(SELECT	SUM(RECE_PAY_AMOU)
							FROM	MPTREC C WITH(NOLOCK) 
							WHERE	C.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
							AND		C.ALRAM_DATE < CASE WHEN  #{stdyyyymm} >= CONVERT(VARCHAR(6),GETDATE(),112) 
															THEN GETDATE() 
														ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdyyyymm} + '01 23:59:59')))
													END
							),0) AS SALE_AMOU
				FROM	MSSALM A WITH(NOLOCK) 
				LEFT OUTER JOIN SMPBRANCHS B WITH(NOLOCK) 
					ON	A.BRANCHID = B.BRANCHID
				WHERE	A.TRANSFER_STATUS = '0'
				AND		TRANSFER_DATE < CASE WHEN  #{stdyyyymm} >= CONVERT(VARCHAR(6),GETDATE(),112) 
												THEN GETDATE() 
											ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdyyyymm} + '01 23:59:59')))
										END
					
		) AAA
		WHERE	AAA.BONDS_KIND =  #{bondsType}
		AND		AAA.CONTRACTSPECIAL =  #{contType}
		AND		AAA.SALE_TOTA_AMOU <> AAA.SALE_AMOU
		]]>
	</sql>
	<select id="adjustBondsTypeDetailCnt" resultType="int">
		/* adjust.adjustBondsTypeDetailCnt */
		SELECT	COUNT(1)
		FROM	(
		<include refid="adjustBondsTypeDetailSql"/>
		) Z
	</select>
	<select id="adjustBondsTypeDetail" resultType="java.util.HashMap">
		/* adjust.adjustBondsTypeDetail */
		<include refid="adjustBondsTypeDetailSql"/>
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>
	</select>
	
	<select id="adjustBondsTypeDetailCnt_bak" resultType="int">
		/* adjust.adjustBondsTypeDetailCnt_bak */
		SELECT	COUNT(1)
		FROM 
		(
			SELECT	BRANCHNM
			,		CLOS_SALE_DATE
			,		OVERDATE
			,		SALE_TOTA_AMOU - PAY_AMOU AS AMOU
			,		SALE_TOTA_AMOU
			,		PAY_AMOU
			,		EXPIRATION_DATE
			,		SALE_PAY_DATE
			,		CASE 
						WHEN TRANSFER_STATUS = '0' THEN '3'
						ELSE( 
							CASE 
								WHEN SALE_TOTA_AMOU - PAY_AMOU = 0 THEN '0'
								ELSE(
									CASE 
										WHEN OVERDATE &lt;= 0 THEN '0'
										WHEN OVERDATE > 0 AND OVERDATE &lt;= 120 THEN '1'
										WHEN OVERDATE > 120  THEN '2'
									END
									)
								END					 
							)
					END AS BONDS_KIND	
			,		CONTRACTSPECIAL					 
			FROM
			(		
				SELECT	BRANCHNM
				,		CLOS_SALE_DATE
				,		OVERDATE
				,		TRANSFER_STATUS
				,		SALE_TOTA_AMOU
				,		EXPIRATION_DATE
				,		SALE_PAY_DATE
				,		CASE
							WHEN SALE_PAY_DATE > DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01'))) THEN 0
							ELSE ISNULL(PAY_AMOU, 0)
						END AS PAY_AMOU
				,		CONTRACTSPECIAL			
				FROM
				(
					SELECT	BRANCHNM
					,		CONVERT(VARCHAR(10), CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
					,		CONVERT(VARCHAR(10), EXPIRATION_DATE, 120) AS EXPIRATION_DATE
					,		DATEDIFF(DAY,EXPIRATION_DATE, DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01')))) AS OVERDATE
					,		SALE_TOTA_AMOU
					,		PAY_AMOU
					,		SALE_PAY_DATE
					,		TRANSFER_STATUS
					,		B.CONTRACTSPECIAL
					FROM	MSSALM A WITH(NOLOCK) 
					,		SMPBRANCHS B WITH(NOLOCK) 
					WHERE	A.BRANCHID = B.BRANCHID
					AND 	A.TRANSFER_STATUS = '1'
					AND		EXPIRATION_DATE &lt; DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01'))
				)A
			)AA
		)AAA
		where	BONDS_KIND = #{bondsType}
		and		CONTRACTSPECIAL = #{contType}
	</select>
	
	<select id="adjustBondsTypeDetail_bak" resultType="java.util.HashMap">
		/* adjust.adjustBondsTypeDetail_bak */
				SELECT	BRANCHNM
		,		CLOS_SALE_DATE
		,		EXPIRATION_DATE
		,		SALE_TOTA_AMOU
		,		AMOU
		FROM 
		(
			SELECT	BRANCHNM
			,		CLOS_SALE_DATE
			,		OVERDATE
			,		SALE_TOTA_AMOU - PAY_AMOU AS AMOU
			,		SALE_TOTA_AMOU
			,		PAY_AMOU
			,		EXPIRATION_DATE
			,		SALE_PAY_DATE
			,		CASE 
						WHEN TRANSFER_STATUS = '0' THEN '3'
						ELSE( 
							CASE 
								WHEN SALE_TOTA_AMOU - PAY_AMOU = 0 THEN '0'
								ELSE(
									CASE 
										WHEN OVERDATE &lt;= 0 THEN '0'
										WHEN OVERDATE > 0 AND OVERDATE &lt;= 120 THEN '1'
										WHEN OVERDATE > 120  THEN '2'
									END
									)
								END					 
							)
					END AS BONDS_KIND	
			,		CONTRACTSPECIAL					 
			FROM
			(		
				SELECT	BRANCHNM
				,		CLOS_SALE_DATE
				,		OVERDATE
				,		TRANSFER_STATUS
				,		SALE_TOTA_AMOU
				,		EXPIRATION_DATE
				,		SALE_PAY_DATE
				,		CASE
							WHEN SALE_PAY_DATE > DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01'))) THEN 0
							ELSE ISNULL(PAY_AMOU, 0)
						END AS PAY_AMOU
				,		CONTRACTSPECIAL			
				FROM
				(
					SELECT	BRANCHNM
					,		CONVERT(VARCHAR(10), CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
					,		CONVERT(VARCHAR(10), EXPIRATION_DATE, 120) AS EXPIRATION_DATE
					,		DATEDIFF(DAY,EXPIRATION_DATE, DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01')))) AS OVERDATE
					,		SALE_TOTA_AMOU
					,		PAY_AMOU
					,		SALE_PAY_DATE
					,		TRANSFER_STATUS
					,		B.CONTRACTSPECIAL
					FROM	MSSALM A WITH(NOLOCK) 
					,		SMPBRANCHS B WITH(NOLOCK) 
					WHERE	A.BRANCHID = B.BRANCHID
					AND 	A.TRANSFER_STATUS = '1'
					AND		EXPIRATION_DATE &lt; DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdyyyymm}+'01'))
				)A
			)AA
		)AAA
		where	BONDS_KIND = #{bondsType}
		and		CONTRACTSPECIAL = #{contType}
	</select>
	
	<select id="getBondsLateList" resultType="java.util.HashMap">
		/* adjust.getBondsLateList */
		<![CDATA[
		SELECT	SUM(CASE	WHEN AA.CLOS_SALE_DATE +30 >=	(CASE	WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE()
																ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,    #{stdYear} + #{stdMonth} + '01 23:59:59')))
														END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D30
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 30 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
									AND AA.CLOS_SALE_DATE + 60 >= (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																			THEN GETDATE()
																		ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
																	END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D60
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 60 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
									AND AA.CLOS_SALE_DATE + 90 >= (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																			THEN GETDATE()
																		ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
																	END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D90
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 90 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
									AND AA.CLOS_SALE_DATE + 120 >= (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																			THEN GETDATE()
																		ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
																	END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D120
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 120 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
									AND AA.CLOS_SALE_DATE + 150 >= (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																			THEN GETDATE()
																		ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
																	END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D150
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 150 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
									AND AA.CLOS_SALE_DATE + 180 >= (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																			THEN GETDATE()
																		ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
																	END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D180
		,		SUM(CASE	WHEN AA.CLOS_SALE_DATE + 180 < (CASE WHEN ( #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE()
															ELSE DATEADD(MONTH,1, CONVERT(DATETIME, #{stdYear} + #{stdMonth} + '01'))
														END)
								THEN AA.SALE_TOTA_AMOU-AA.SALE_AMOU
						ELSE 0
				END) AS D181
		FROM	(
				SELECT	A.SALE_SEQU_NUMB
				,		A.BRANCHID
				,		A.CLOS_SALE_DATE
				,		A.EXPIRATION_DATE
				,		A.SALE_TOTA_AMOU
				,		ISNULL(
						(SELECT	SUM(RECE_PAY_AMOU)
						FROM	MPTREC B WITH(NOLOCK) 
						WHERE	B.SALE_SEQU_NUMB = A.SALE_SEQU_NUMB
						AND		B.ALRAM_DATE < CASE WHEN (  #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
														THEN GETDATE() 
													ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,    #{stdYear} + #{stdMonth} + '01 23:59:59')))
												END
						),0) AS SALE_AMOU
				FROM	MSSALM A WITH(NOLOCK) 
				WHERE	A.CLOS_SALE_DATE < CASE WHEN (  #{stdYear} + #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
														THEN GETDATE() 
												ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,    #{stdYear} + #{stdMonth} + '01 23:59:59')))
											END
				AND		A.TRANSFER_STATUS = '1'
		) AA
		]]>
<!-- 
		SELECT	ISNULL(D30 , 0) AS D30  
		,		ISNULL(D60 , 0) AS D60 
		,		ISNULL(D90 , 0) AS D90 
		,		ISNULL(D120, 0) AS D120
		,		ISNULL(D150, 0) AS D150
		,		ISNULL(D180, 0) AS D180
		,		ISNULL(D181, 0) AS D181
		from
		(
			SELECT	A.BONDS_DAY
			,		AMOU
			FROM
			(
				SELECT	'D30' AS BONDS_DAY UNION ALL
				SELECT	'D60' AS BONDS_DAY UNION ALL
				SELECT	'D70' AS BONDS_DAY UNION ALL
				SELECT	'D120' AS BONDS_DAY UNION ALL
				SELECT	'D150' AS BONDS_DAY UNION ALL
				SELECT	'D180' AS BONDS_DAY UNION ALL
				SELECT	'D181' AS BONDS_DAY
			)A
			LEFT OUTER JOIN
			(		
		
				SELECT	A.BONDS_DAY
				,		ISNULL(SALE_TOTA_AMOU,0) - ISNULL(PAY_AMOU,0) AS AMOU
				FROM	
				(
					SELECT  SUM(SALE_TOTA_AMOU) AS SALE_TOTA_AMOU
					,		BONDS_DAY
					FROM
					(
						SELECT	SALE_TOTA_AMOU
						,		CASE 
									WHEN OVERDATE &lt;= 30 THEN 'D30'
									WHEN OVERDATE BETWEEN 31 AND 60 THEN 'D60'
									WHEN OVERDATE BETWEEN 61 AND 90 THEN 'D90'
									WHEN OVERDATE BETWEEN 91 AND 120 THEN 'D120'
									WHEN OVERDATE BETWEEN 121 AND 150 THEN 'D150'
									WHEN OVERDATE BETWEEN 151 AND 180 THEN 'D180'
									WHEN OVERDATE > 180 THEN 'D181'
								END AS BONDS_DAY	
						FROM
						(
							SELECT	A.SALE_TOTA_AMOU
							,		DATEDIFF(DAY,EXPIRATION_DATE, DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear} /**P*/+ #{stdMonth} /**P*/+'01 23:59:59')))) AS OVERDATE
								FROM	MSSALM A
							,		SMPBRANCHS B
							WHERE	A.BRANCHID = B.BRANCHID
							AND		A.TRANSFER_STATUS = '1'	
							AND		A.CLOS_SALE_DATE &lt; DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear} /**P*/+  #{stdMonth} /**P*/ + '01 23:59:59')))
						)X 
					)AA
					GROUP BY BONDS_DAY
				)A
				LEFT OUTER JOIN 	
				(
					SELECT  SUM(PAY_AMOU) AS PAY_AMOU
					,		BONDS_DAY
					FROM
					(
						SELECT	PAY_AMOU
						,		CASE 
									WHEN OVERDATE &lt;= 30 THEN 'D30'
									WHEN OVERDATE BETWEEN 31 AND 60 THEN 'D60'
									WHEN OVERDATE BETWEEN 61 AND 90 THEN 'D90'
									WHEN OVERDATE BETWEEN 91 AND 120 THEN 'D120'
									WHEN OVERDATE BETWEEN 121 AND 150 THEN 'D150'
									WHEN OVERDATE BETWEEN 151 AND 180 THEN 'D180'
									WHEN OVERDATE > 180 THEN 'D181'
								END AS BONDS_DAY	
						FROM
						(					
							SELECT	A.PAY_AMOU
							,		ISNULL(CONTRACTSPECIAL, '40') AS CONTRACTSPECIAL
							,		DATEDIFF(DAY,EXPIRATION_DATE, DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear} /**P*/+ #{stdMonth} /**P*/+'01 23:59:59')))) AS OVERDATE
							FROM	MSSALM A
							,		SMPBRANCHS B
							WHERE	A.BRANCHID = B.BRANCHID
							AND		A.TRANSFER_STATUS = '1'	
							AND		A.SALE_PAY_DATE &lt; DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear} /**P*/+  #{stdMonth} /**P*/ + '01 23:59:59')))
						)X
					)AA
					GROUP BY BONDS_DAY
				)B
				ON A.BONDS_DAY = B.BONDS_DAY
			)B
			ON A.BONDS_DAY = B.BONDS_DAY
		)XX
		PIVOT(SUM (AMOU)FOR BONDS_DAY IN(D30, D60, D90, D120, D150, D180, D181 )) AS PVT
 -->
	</select>
	
	<select id="getBondsLateList_bak" resultType="java.util.HashMap">
		/* adjust.getBondsLateList_bak */
		SELECT	ROUND(ISNULL(D30 , 0)/CONVERT(FLOAT, 1000),0) AS D30  
		,		ROUND(ISNULL(D60 , 0)/CONVERT(FLOAT, 1000),0) AS D60 
		,		ROUND(ISNULL(D90 , 0)/CONVERT(FLOAT, 1000),0) AS D90 
		,		ROUND(ISNULL(D120, 0)/CONVERT(FLOAT, 1000),0) AS D120
		,		ROUND(ISNULL(D150, 0)/CONVERT(FLOAT, 1000),0) AS D150
		,		ROUND(ISNULL(D180, 0)/CONVERT(FLOAT, 1000),0) AS D180
		,		ROUND(ISNULL(D181, 0)/CONVERT(FLOAT, 1000),0) AS D181
		FROM(
		SELECT	BONDS_DAY
		,		AMOU
		FROM
		(
			SELECT	
					CASE	
						WHEN OVERDATE &lt;= 30 THEN 'D30'
						WHEN OVERDATE > 30 AND OVERDATE &lt;= 60 THEN 'D60'
						WHEN OVERDATE > 60 AND OVERDATE &lt;= 90 THEN 'D90'
						WHEN OVERDATE > 90 AND OVERDATE &lt;= 120 THEN 'D120'
						WHEN OVERDATE > 120 AND OVERDATE &lt;= 150 THEN 'D150'
						WHEN OVERDATE > 150 AND OVERDATE &lt;= 180 THEN 'D180'
						WHEN OVERDATE >= 181 THEN 'D181'
					END AS BONDS_DAY	
			,		OVERDATE
			,		SALE_TOTA_AMOU
			,		PAY_AMOU
			,		SALE_TOTA_AMOU - PAY_AMOU AS AMOU
			FROM
			(
				SELECT	DATEDIFF(DAY,EXPIRATION_DATE, DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01')))) AS OVERDATE 
				,		SALE_TOTA_AMOU
				,		CASE
							WHEN SALE_PAY_DATE > DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01'))) THEN 0
							ELSE ISNULL(PAY_AMOU, 0)
						END AS PAY_AMOU
				FROM	MSSALM  WITH(NOLOCK) 
				WHERE	EXPIRATION_DATE &lt; DATEADD(MONTH, 1, CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01'))
				AND 	TRANSFER_STATUS = '1'
			)A
			WHERE SALE_TOTA_AMOU - PAY_AMOU > 0
		)AA
		
		)XX
		PIVOT(SUM (AMOU)FOR BONDS_DAY IN(D30, D60, D90, D120, D150, D180, D181 )) AS PVT
	</select>
	
	<select id="getBondsReturnList1" resultType="java.util.HashMap">
		/* adjust.getBondsReturnList1 */
		<![CDATA[
		WITH TMP_MSSALM AS (
				SELECT	AA.*
				,		BB.ALRAM_DATE
				,		ISNULL(BB.RECE_PAY_AMOU,0) AS RECE_PAY_AMOU
				,		(CASE WHEN ROUND(AA.SALE_TOTA_AMOU,-1) = ROUND(ISNULL(BB.RECE_PAY_AMOU,0),-1) THEN CONVERT(INT,(BB.ALRAM_DATE - AA.CLOS_SALE_DATE)) ELSE 0 END) AS REV_AMOU_DATE
				,		CASE WHEN AA.EXPIRATION_DATE >= CASE WHEN (  #{stdYear}+#{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																THEN GETDATE() 
															ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
														END
									THEN '0'
							WHEN AA.EXPIRATION_DATE+120 >= CASE WHEN (  #{stdYear}+#{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) 
																	THEN GETDATE() 
																ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
															END
									THEN '1'
							ELSE '2'
						END AS BONDS_TYPE_CD
				FROM	MSSALM AA WITH(NOLOCK) 
				LEFT OUTER JOIN (
						SELECT	B.SALE_SEQU_NUMB
						,		MAX(B.ALRAM_DATE) AS ALRAM_DATE
						,		SUM(B.RECE_PAY_AMOU) AS RECE_PAY_AMOU
						FROM	MPTREC B WITH(NOLOCK) 
						WHERE	B.ALRAM_DATE < CASE WHEN (  #{stdYear}+#{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() 
													ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
												END
						AND		B.ALRAM_DATE IS NOT NULL
						GROUP BY B.SALE_SEQU_NUMB
				) BB
					ON	AA.SALE_SEQU_NUMB = BB.SALE_SEQU_NUMB
				WHERE	AA.TRANSFER_STATUS = CASE WHEN (  #{stdYear}+#{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN '1' ELSE AA.TRANSFER_STATUS END
				AND		AA.CLOS_SALE_DATE < CASE WHEN (  #{stdYear}+#{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() 
												ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
											END
				AND		AA.SALE_TOTA_AMOU <> 0
		)
		]]>
		SELECT	'P' AS PLAN_TYPE
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='0' AND (A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='0' AND (A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END)
				)/CONVERT(FLOAT, 1000),0),0) AS M0
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='1' AND (A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='1' AND (A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS M1
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='2' AND (A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='2' AND (A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS M2
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='0' AND A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='0' AND A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y0
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='1' AND A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='1' AND A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y1
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='2' AND A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU1,0) ELSE 0 END) + 
					(CASE WHEN B.BONDS_TYPE_CD='2' AND A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59'))) THEN ISNULL(A.BOND_PLAN_AMOU2,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y2
		FROM	BOND_PLAN A WITH(NOLOCK) 
		INNER JOIN TMP_MSSALM B
			ON	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		WHERE	(
				A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
				OR
				A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
		)
		UNION ALL
		SELECT	'R' AS PLAN_TYPE
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='0' AND (C.ALRAM_DATE BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END)
				)/CONVERT(FLOAT, 1000),0),0) AS M0
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='1' AND (C.ALRAM_DATE BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END)
				)/CONVERT(FLOAT, 1000),0),0) AS M1
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='2' AND (C.ALRAM_DATE BETWEEN CONVERT(DATETIME, #{stdYear}+#{stdMonth}+'01') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))) THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END)
				)/CONVERT(FLOAT, 1000),0),0) AS M2
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='0' THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y0
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='1' THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y1
		,		ISNULL(ROUND(SUM(
					(CASE WHEN B.BONDS_TYPE_CD='2' THEN ISNULL(C.RECE_PAY_AMOU,0) ELSE 0 END) 
				)/CONVERT(FLOAT, 1000),0),0) AS Y2
		FROM	BOND_PLAN A WITH(NOLOCK) 
		INNER JOIN TMP_MSSALM B
			ON	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
		INNER JOIN MPTREC C WITH(NOLOCK) 
			ON	B.SALE_SEQU_NUMB = C.SALE_SEQU_NUMB
		WHERE	(
				A.BOND_PLAN_DATE1 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
				OR
				A.BOND_PLAN_DATE2 BETWEEN CONVERT(DATETIME, #{stdYear}+ '0101') AND DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+#{stdMonth} + '01 23:59:59')))
		)
	</select>
	
	<select id="getBondsReturnList2" resultType="java.util.HashMap">
		/* adjust.getBondsReturnList2 */
		<![CDATA[
		SELECT	ROUND(AA.SALE_TOTA_AMOU/CONVERT(FLOAT, 1000),0) AS SALE_TOTA_AMOU
		,		ROUND(AA.PAY_AMOU/CONVERT(FLOAT, 1000),0) AS PAY_AMOU 
		,		(CASE WHEN AA.SALE_TOTA_AMOU=0 THEN 0 ELSE CONVERT(DECIMAL(10,1),ROUND((AA.PAY_AMOU*100)/AA.SALE_TOTA_AMOU,1)) END) AS RTN_RATE
		,		(
				SELECT	(CASE WHEN AA.SALE_TOTA_AMOU=0 THEN 0 ELSE CONVERT(DECIMAL(10,1),PAY_AMOU*100/AA.SALE_TOTA_AMOU) END) AS ALL_TRN_RATE
				FROM	(
						SELECT	ISNULL((
										SELECT	SUM(A.SALE_TOTA_AMOU)
										FROM	MSSALM A WITH(NOLOCK)
										WHERE	A.TRANSFER_STATUS = '1'
										AND		A.SAP_JOUR_NUMB IS NOT NULL
										AND		A.EXPIRATION_DATE BETWEEN CONVERT(DATETIME,( #{stdYear}+'-01-01')) 
																	AND	CASE	WHEN '2016' >= CONVERT(VARCHAR(4),GETDATE(),112) THEN CONVERT(DATETIME,CONVERT(VARCHAR(6), DATEADD(MONTH,1,GETDATE()),112)+'01 23:59:59')-1
																				ELSE DATEADD(YEAR,1,CONVERT(DATETIME,( #{stdYear}+'-01-01')))
																		END
								),0) AS SALE_TOTA_AMOU
						,		ISNULL((
										SELECT	SUM(ISNULL(B.RECE_PAY_AMOU,0))
										FROM	MSSALM A WITH(NOLOCK)
										INNER JOIN MPTREC B WITH(NOLOCK)
											ON	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
										WHERE	A.TRANSFER_STATUS = '1'
										AND		A.SAP_JOUR_NUMB IS NOT NULL
										AND		A.EXPIRATION_DATE >= B.ALRAM_DATE
										AND		A.EXPIRATION_DATE BETWEEN CONVERT(DATETIME,( #{stdYear}+'-01-01')) 
																	AND	CASE	WHEN '2016' >= CONVERT(VARCHAR(4),GETDATE(),112) THEN CONVERT(DATETIME,CONVERT(VARCHAR(6), DATEADD(MONTH,1,GETDATE()),112)+'01 23:59:59')-1
																				ELSE DATEADD(YEAR,1,CONVERT(DATETIME,( #{stdYear}+'-01-01')))
																		END
								),0) AS PAY_AMOU
				) AA
		) AS ALL_TRN_RATE
		FROM	(
				SELECT	ISNULL((
								SELECT	SUM(A.SALE_TOTA_AMOU) AS SALE_TOTA_AMOU
								FROM	MSSALM A WITH(NOLOCK)
								WHERE	A.TRANSFER_STATUS = '1'
								AND		A.SAP_JOUR_NUMB IS NOT NULL
								AND		A.EXPIRATION_DATE BETWEEN (CASE WHEN (#{stdYear}+ #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() -30
																							ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,#{stdYear}+ #{stdMonth} + '01')))-30
																						END)
																				AND	(CASE WHEN (#{stdYear}+ #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE()
																							ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,#{stdYear}+ #{stdMonth} + '01 23:59:59')))
																					END)
						),0) AS SALE_TOTA_AMOU
				,		ISNULL((
								SELECT	SUM(ISNULL(B.RECE_PAY_AMOU,0)) AS PAY_AMOU
								FROM	MSSALM A WITH(NOLOCK)
								INNER JOIN MPTREC B WITH(NOLOCK)
									ON	A.SALE_SEQU_NUMB = B.SALE_SEQU_NUMB
								WHERE	A.TRANSFER_STATUS = '1'
								AND		A.SAP_JOUR_NUMB IS NOT NULL
								AND		A.EXPIRATION_DATE >= B.ALRAM_DATE
								AND		A.EXPIRATION_DATE BETWEEN (CASE WHEN (#{stdYear}+ #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() -30
																							ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,#{stdYear}+ #{stdMonth} + '01')))-30
																						END)
																				AND	(CASE WHEN (#{stdYear}+ #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE()
																							ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,  #{stdYear}+ #{stdMonth} + '01 23:59:59')))
																					END)
								AND		B.ALRAM_DATE <= CASE WHEN (#{stdYear}+ #{stdMonth}) >= CONVERT(VARCHAR(6),GETDATE(),112) THEN GETDATE() 
																					ELSE DATEADD(DAY, -1, DATEADD(MONTH, 1, CONVERT(DATETIME,#{stdYear}+ #{stdMonth} + '01 23:59:59')))
																				END
						),0) AS PAY_AMOU
		) AA
		]]>
	</select>
	
	<select id="getBondsMonthDetailCnt" resultType="int">
		/* adjust.getBondsMonthDetailCnt */
		SELECT	COUNT(1)
		FROM	MSSALM A WITH(NOLOCK) 
		INNER JOIN MPTREC A1 WITH(NOLOCK) 
			ON	A.sale_sequ_numb = A1.sale_sequ_numb
		WHERE	A1.ALRAM_DATE BETWEEN CONVERT(DATETIME,  #{stdyyyymm} + '01') AND DATEADD(MONTH,1,CONVERT(DATETIME,  #{stdyyyymm} + '01 23:59:59'))-1
		AND 	A.TRANSFER_STATUS = '1'
		AND		A1.alram_date IS NOT NULL
	</select>
	
	<select id="getBondsMonthDetail" resultType="java.util.HashMap">
		/* adjust.getBondsMonthDetail */
		SELECT	A.SALE_SEQU_NUMB
		,		B.BRANCHNM
		,		CONVERT(VARCHAR(10), A.CLOS_SALE_DATE, 120) AS CLOS_SALE_DATE
		,		CONVERT(VARCHAR(10), A.EXPIRATION_DATE, 120) AS EXPIRATION_DATE
		,		CONVERT(VARCHAR(10), A1.ALRAM_DATE, 120) AS SALE_PAY_DATE
		,		DATEPART(YEAR, A1.ALRAM_DATE) AS YEAR 
		,		DATEPART(MONTH, A1.ALRAM_DATE) AS MONTH 
		,		ISNULL(A.SALE_TOTA_AMOU, 0) AS SALE_TOTA_AMOU
		,		ISNULL(A1.RECE_PAY_AMOU, 0) AS PAY_AMOU
		FROM	MSSALM A WITH(NOLOCK) 
		INNER JOIN MPTREC A1 WITH(NOLOCK) 
			ON	A.sale_sequ_numb = A1.sale_sequ_numb
		LEFT OUTER JOIN SMPBRANCHS B WITH(NOLOCK) 
		ON	A.BRANCHID = B.BRANCHID
		WHERE	A1.ALRAM_DATE BETWEEN CONVERT(DATETIME,  #{stdyyyymm} + '01') AND DATEADD(MONTH,1,CONVERT(DATETIME,  #{stdyyyymm} + '01 23:59:59'))-1
		AND 	A.TRANSFER_STATUS = '1'
		AND		A1.alram_date IS NOT NULL
		<if test="orderString != null and orderString != ''">
			ORDER BY ${orderString}
		</if>
	</select>
	
	<select id="getPlanCount" resultType="int">
		/* adjust.getPlanCount */
		SELECT	COUNT(1) AS CNT 
		FROM	BOND_PLAN WITH(NOLOCK) 
		WHERE	SALE_SEQU_NUMB = #{sale_sequ_numb}
<!-- 		AND 	PLAN_YYYYMM = CONVERT(VARCHAR(4), DATEPART(YEAR,GETDATE())) + CONVERT(VARCHAR(2), DATEPART(MONTH,GETDATE())) -->
	</select>
	
	<update id="updateBondPlans">
		/* adjust.updateBondPlans */
		UPDATE	BOND_PLAN 
		SET		BOND_PLAN_AMOU1 = #{planAmou1}
		,		BOND_PLAN_DATE1 = CONVERT(DATETIME, #{planDate1})
		,		BOND_PLAN_AMOU2 = #{planAmou2}
		,		BOND_PLAN_DATE2 = CONVERT(DATETIME, #{planDate2})
		,		UPD_DT			= GETDATE()
		,		UPD_USER_ID		= #{userId}
		WHERE	SALE_SEQU_NUMB  = #{sale_sequ_numb}
		AND 	PLAN_YYYYMM = CONVERT(VARCHAR(4), DATEPART(YEAR,GETDATE())) + CONVERT(VARCHAR(2), DATEPART(MONTH,GETDATE()))
	</update>
	
	<insert id="insertBondPlans">
		/* adjust.insertBondPlans */
		INSERT INTO BOND_PLAN
		(
			SALE_SEQU_NUMB
		,	PLAN_YYYYMM
		,	BOND_PLAN_AMOU1	
		,	BOND_PLAN_DATE1	
		,	BOND_PLAN_AMOU2	
		,	BOND_PLAN_DATE2
		,	REG_DT
		,	REG_USER_ID	
		)VALUES(
			#{sale_sequ_numb}
		,	CONVERT(VARCHAR(4), DATEPART(YEAR,GETDATE())) + CONVERT(VARCHAR(2), DATEPART(MONTH,GETDATE()))
		,	#{planAmou1}	
		,	#{planDate1}	
		,	#{planAmou2}	
		,	#{planDate2}	
		,	GETDATE()
		,	#{userId}	
		)
	</insert>
	
	<select id="adjustBondsHistList" resultType="java.util.HashMap" >
		/* adjust.adjustBondsHistList */
		SELECT	A.BOND_MANAGE_ID
		,		A.CLIENTID
		,		CONVERT(VARCHAR(10),A.REG_DT, 120) AS REG_DT
		,		A.MANAGE_TYPE
		,		C.CODENM1 AS MANAGE_TYPE_NM
		,		A.CONTENTS
		,		A.REG_ID
		,		B.USERNM AS REG_NM
		,		A.ATTACH_SEQ	AS ATTACH_SEQ1
		,		A.ATTACH_SEQ2
		,		A.ATTACH_SEQ3
		,		A.ATTACH_SEQ4
		,		A.ATTACH_SEQ5
		,		A.UPD_ID
		,		CONVERT(VARCHAR(10),A.UPD_DT, 120) AS UPD_DT
		,		D.ATTACH_FILE_NAME AS FILE_NAME1
		,		D.ATTACH_FILE_PATH AS FILE_PATH1
		,		E.ATTACH_FILE_NAME AS FILE_NAME2
		,		E.ATTACH_FILE_PATH AS FILE_PATH2
		,		F.ATTACH_FILE_NAME AS FILE_NAME3
		,		F.ATTACH_FILE_PATH AS FILE_PATH3
		,		G.ATTACH_FILE_NAME AS FILE_NAME4
		,		G.ATTACH_FILE_PATH AS FILE_PATH4
		,		H.ATTACH_FILE_NAME AS FILE_NAME5
		,		H.ATTACH_FILE_PATH AS FILE_PATH5
		FROM 	BOND_MANAGE_HIST A WITH(NOLOCK) 
				INNER JOIN SMPUSERS B WITH(NOLOCK) 
				ON A.REG_ID = B.USERID
				INNER JOIN SMPCODES C WITH(NOLOCK) 
				ON A.MANAGE_TYPE = C.CODEVAL1
				AND	C.CODETYPECD = 'BOND_MANAGE_TYPE'
				LEFT OUTER JOIN ATTACHINFO D WITH(NOLOCK) 
				ON A.ATTACH_SEQ = D.ATTACH_SEQ
				LEFT OUTER JOIN ATTACHINFO E WITH(NOLOCK) 
				ON A.ATTACH_SEQ2 = E.ATTACH_SEQ
				LEFT OUTER JOIN ATTACHINFO F WITH(NOLOCK) 
				ON A.ATTACH_SEQ3 = F.ATTACH_SEQ
				LEFT OUTER JOIN ATTACHINFO G WITH(NOLOCK) 
				ON A.ATTACH_SEQ4 = G.ATTACH_SEQ
				LEFT OUTER JOIN ATTACHINFO H WITH(NOLOCK) 
				ON A.ATTACH_SEQ5 = H.ATTACH_SEQ
		WHERE	CLIENTID = #{clientId}
		ORDER BY REG_DT DESC
	</select>
	
	<insert id="insertBondsHistory">
		/* adjust.insertBondsHistory */
		INSERT INTO BOND_MANAGE_HIST
		(
			BOND_MANAGE_ID
		,	CLIENTID
		,	REG_DT	
		,	MANAGE_TYPE
		,	CONTENTS
		,	REG_ID
		,	ATTACH_SEQ
		,	ATTACH_SEQ2
		,	ATTACH_SEQ3
		,	ATTACH_SEQ4
		,	ATTACH_SEQ5
		)VALUES(
			#{bond_manage_id}
		,	#{clientId}	
		,	GETDATE()
		,	#{manage_type}	
		,	#{contents}	
		,	#{user_id}	
		,	#{attach_seq1}	
		,	#{attach_seq2}	
		,	#{attach_seq3}	
		,	#{attach_seq4}	
		,	#{attach_seq5}	
		)
	</insert>
	
	<update id="updateBondsHistory">
		/* adjust.updateBondsHistory */
		UPDATE BOND_MANAGE_HIST SET
			MANAGE_TYPE = #{manage_type}
		,	CONTENTS	= #{contents}		
		,	ATTACH_SEQ	= #{attach_seq1}		
		,	ATTACH_SEQ2	= #{attach_seq2}		
		,	ATTACH_SEQ3	= #{attach_seq3}		
		,	ATTACH_SEQ4	= #{attach_seq4}		
		,	ATTACH_SEQ5	= #{attach_seq5}		
		,	UPD_ID		= #{user_id}
		,	UPD_DT		= GETDATE()
		WHERE BOND_MANAGE_ID = #{bond_manage_id}
	</update>
</mapper>